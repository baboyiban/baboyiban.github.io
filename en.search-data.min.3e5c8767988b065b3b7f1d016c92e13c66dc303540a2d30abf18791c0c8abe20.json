[{"id":0,"href":"/docs/docs/%EB%82%98%EB%A7%8C%EC%9D%98-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/","title":"나만의 프로그래밍 언어","section":"Docs","content":" 나만의 프로그래밍 언어 # 나만의 프로그래밍 언어 # 소개 # // C언어 #include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;Hello, World!\\n\u0026#34;); } Hello, World! std: lib.std; pub main(): return std.out(\u0026#34;Hello, World!\u0026#34;); ; Hello, World! 핵심 내용 # int4 a: 10; // 4바이트 정수에 숫자 10 할당 구조체 # pub Person{}: str name: \u0026#34;이름\u0026#34;; str phone: \u0026#34;010-1234-5678\u0026#34; str email: \u0026#34;example@example.com\u0026#34; (name, phone, email): (.name, .phone, .email); ; 변수 # i4 int: 10; // 4바이트 정수에 숫자 10 할당 f8 float: 0.1234 // 8바이트 부동소수 s string: \u0026#34;test\u0026#34; // 문자열 a[6] array: [0, 1, 2, 3, 4, 5] // 배열 함수 # exam(): return 10; ; exam2(i4 a, i4 b): i4 c: a + b; return c; ; 기본 라이브러리 # Map # std: lib.std; map: std.map; func main: map m; m: \u0026#34;key1\u0026#34;: \u0026#34;value1\u0026#34;, \u0026#34;key2\u0026#34;: \u0026#34;value2\u0026#34;; ; map m; m.key: \u0026#34;name\u0026#34;; // {\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;} m.value: \u0026#34;smith\u0026#34;; // {\u0026#34;name\u0026#34;:\u0026#34;smith\u0026#34;} Set # std: lib.std; set: std.set; func main: set s; s: \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;; ; List # std: lib.std; list: std.list; func main: list l; l: \u0026#34;a\u0026#34;, \u0026#34;\bb\u0026#34;, \u0026#34;c\u0026#34;; ; 형변환 # to: lib.std.to; to.int(\u0026#39;10\u0026#39;); // \u0026#39;10\u0026#39; -\u0026gt; 10 to.str(10); // 10 -\u0026gt; \u0026#39;10\u0026#39; 반환 타입 # func test(int a, int b) int: return a + b; ; 함수 선언 형식 # hello() void: print(\u0026#34;Hello, World!\u0026#34;); ; "},{"id":1,"href":"/docs/docs/ai%EA%B0%80-%EC%96%B4%EB%A0%A4%EC%9B%8C%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C-1---%EC%B6%94%EA%B0%80/","title":"Ai가 어려워하는 문제 1 추가","section":"Docs","content":"\u0026#39;Book/Programming/CSS/gradient image.md \u0026#34;Book/Programming/Database/SQL/Prisma/\\354\\202\\254\\354\\232\\251 \\353\\260\\251\\353\\262\\225.md\u0026#34; .github/workflows/blank.yml .github/workflows/delete-files.js .github/workflows/upsert-files.js Book/.obsidian/plugins/frontmatter-modified-date/data.json Book/.obsidian/workspace.json \u0026#34;Book/2024/9/\\353\\223\\234\\353\\224\\224\\354\\226\\264! Obsidian \\353\\270\\224\\353\\241\\234\\352\\267\\270\\354\\235\\230 \\354\\262\\253\\352\\270\\200\\354\\235\\204 \\354\\223\\260\\352\\262\\214 \\353\\220\\220\\353\\224\\260!.md\u0026#34; \u0026#34;Book/2024/9/\\353\\247\\245 \\352\\270\\260\\353\\263\\270 \\354\\225\\204\\354\\235\\264\\354\\275\\230\\354\\235\\264 \\353\\263\\200\\352\\262\\275\\353\\220\\230\\354\\226\\264\\354\\204\\234....md\u0026#34; \u0026#34;Book/2024/9/\\354\\211\\274\\355\\221\\234\\352\\260\\200 \\355\\217\\254\\355\\225\\250\\353\\220\\234 \\355\\214\\214\\354\\235\\274 \\354\\235\\264\\353\\246\\204\\354\\235\\204 \\354\\240\\200\\354\\236\\245\\355\\225\\230\\352\\263\\240 \\353\\266\\210\\353\\237\\254\\354\\230\\254 \\354\\210\\230 \\354\\236\\210\\352\\262\\214 \\355\\225\\250.md\u0026#34; \u0026#34;Book/2024/9/\\354\\231\\204\\354\\204\\261! supabase\\354\\231\\200 github \\354\\227\\260\\353\\217\\231\\355\\225\\230\\352\\270\\260.md\u0026#34; \u0026#34;Book/2024/9/\\355\\234\\264 \\353\\223\\234\\353\\224\\224\\354\\226\\264....md\u0026#34; \u0026#34;Book/AI/AI\\352\\260\\200 \\354\\226\\264\\353\\240\\244\\354\\233\\214\\355\\225\\230\\353\\212\\224 \\353\\254\\270\\354\\240\\234/\\353\\254\\270\\354\\240\\234 1.md\u0026#34; \u0026#34;Book/AI/AI\\352\\260\\200 \\354\\226\\264\\353\\240\\244\\354\\233\\214\\355\\225\\230\\353\\212\\224 \\353\\254\\270\\354\\240\\234/\\353\\254\\270\\354\\240\\234 2.md\u0026#34; \u0026#34;Book/AI/AI\\352\\260\\200 \\354\\226\\264\\353\\240\\244\\354\\233\\214\\355\\225\\230\\353\\212\\224 \\353\\254\\270\\354\\240\\234/\\353\\254\\270\\354\\240\\234 3.md\u0026#34; \u0026#34;Book/AI/AI\\352\\260\\200 \\354\\226\\264\\353\\240\\244\\354\\233\\214\\355\\225\\230\\353\\212\\224 \\353\\254\\270\\354\\240\\234/\\353\\254\\270\\354\\240\\234 4.md\u0026#34; \u0026#34;Book/Programming/AWS/AWS \\354\\227\\260\\352\\262\\260\\355\\225\\230\\353\\212\\224 \\353\\262\\225.md\u0026#34; \u0026#34;Book/Programming/AWS/\\354\\240\\200\\354\\236\\245\\352\\263\\265\\352\\260\\204 \\353\\212\\230\\353\\246\\254\\352\\270\\260.md\u0026#34; Book/Programming/CSS/BEM.md \u0026#34;Book/Programming/CSS/Color \\354\\241\\260\\355\\225\\251.md\u0026#34; Book/Programming/CSS/Table.md \u0026#34;Book/Programming/Color/RGB/4\\353\\266\\200\\355\\204\\260 256\\352\\271\\214\\354\\247\\200.md\u0026#34; Book/Programming/Font/Font Size.md \u0026#34;Book/Programming/Git/lfs \\354\\202\\254\\354\\232\\251\\353\\262\\225.md\u0026#34; \u0026#34;Book/Programming/Git/\\352\\260\\225\\354\\240\\234 \\353\\263\\221\\355\\225\\251.md\u0026#34; \u0026#34;Book/Programming/Git/\\353\\250\\270\\354\\247\\200 \\354\\267\\250\\354\\206\\214.md\u0026#34; \u0026#34;Book/Programming/Git/\\354\\273\\244\\353\\260\\213 \\353\\251\\224\\354\\204\\270\\354\\247\\200.md\u0026#34; \u0026#34;Book/Programming/Github/add\\354\\231\\200 commit.md\u0026#34; \u0026#34;Book/Programming/Github/username password \\354\\240\\200\\354\\236\\245.md\u0026#34; \u0026#34;Book/Programming/Github/\\352\\260\\225\\354\\240\\234 \\353\\263\\221\\355\\225\\251.md\u0026#34; \u0026#34;Book/Programming/Github/\\353\\263\\200\\352\\262\\275\\354\\202\\254\\355\\225\\255 \\355\\231\\225\\354\\235\\270 (git status).md\u0026#34; \u0026#34;Book/Programming/Github/\\353\\263\\200\\352\\262\\275\\354\\202\\254\\355\\225\\255\\354\\235\\204 \\353\\213\\244\\353\\245\\270 \\353\\270\\214\\353\\240\\214\\354\\271\\230\\354\\227\\220\\354\\204\\234 \\354\\240\\201\\354\\232\\251\\355\\225\\230\\352\\270\\260.md\u0026#34; \u0026#34;Book/Programming/Github/\\353\\270\\214\\353\\240\\214\\354\\271\\230 \\354\\202\\255\\354\\240\\234.md\u0026#34; \u0026#34;Book/Programming/Github/\\354\\265\\234\\354\\213\\240 \\354\\273\\244\\353\\260\\213 \\354\\240\\234\\352\\261\\260.md\u0026#34; \u0026#34;Book/Programming/Github/\\354\\265\\234\\354\\213\\240\\354\\202\\254\\355\\225\\255 pull \\355\\225\\230\\352\\270\\260.md\u0026#34; \u0026#34;Book/Programming/Github/\\354\\273\\244\\353\\260\\213 \\354\\264\\210\\352\\270\\260 \\354\\203\\201\\355\\203\\234\\353\\241\\234 \\353\\220\\230\\353\\217\\214\\353\\246\\254\\352\\270\\260.md\u0026#34; \u0026#34;Book/Programming/NextJS/\\352\\265\\254\\354\\241\\260.md\u0026#34; \u0026#34;Book/Programming/NextJS/\\353\\260\\260\\355\\217\\254(bun).md\u0026#34; \u0026#34;Book/Programming/NextJS/\\353\\260\\260\\355\\217\\254(npm).md\u0026#34; \u0026#34;Book/Programming/NextJS/\\354\\204\\244\\354\\271\\230.md\u0026#34; \u0026#34;Book/Programming/NextJS/\\354\\213\\234\\354\\236\\221.md\u0026#34; \u0026#34;Book/Programming/NextJS/\\354\\230\\244\\353\\245\\230/failed WebSocket is closed due to suspension..md\u0026#34; \u0026#34;Book/Programming/NextJS/\\355\\224\\204\\353\\241\\234\\354\\240\\235\\355\\212\\270/MTC Co.,Ltd..md\u0026#34; \u0026#34;Book/Programming/NextJS/\\355\\224\\204\\353\\241\\234\\354\\240\\235\\355\\212\\270/\\353\\213\\244\\353\\243\\250\\355\\225\\234\\354\\235\\230 \\353\\270\\224\\353\\241\\234\\352\\267\\270.md\u0026#34; \u0026#34;Book/Programming/Oracle/Oracle \\354\\227\\260\\352\\262\\260.md\u0026#34; Book/Programming/SSL/Certbot.md \u0026#34;Book/Programming/SSL/Letsencrypt \\354\\236\\220\\353\\217\\231\\352\\260\\261\\354\\213\\240.md\u0026#34; \u0026#34;Book/Programming/SSL/SSL \\354\\235\\270\\354\\246\\235 \\353\\260\\233\\352\\270\\260.md\u0026#34; \u0026#34;Book/Programming/Terminal/PID \\354\\243\\275\\354\\235\\264\\352\\270\\260.md\u0026#34; \u0026#34;Book/Programming/Terminal/Tmux/\\354\\202\\254\\354\\232\\251 \\353\\260\\251\\353\\262\\225.md\u0026#34; \u0026#34;Book/Programming/Terminal/Vim/Iterm2/zshrc \\354\\204\\244\\354\\240\\225.md\u0026#34; \u0026#34;Book/Programming/Terminal/Vim/\\353\\254\\270\\354\\236\\220 \\353\\214\\200\\354\\271\\230.md\u0026#34; \u0026#34;Book/Programming/Terminal/Vim/\\354\\244\\204 \\354\\235\\264\\353\\217\\231.md\u0026#34; \u0026#34;Book/Programming/Terminal/Yabai/\\354\\213\\244\\355\\226\\211.md\u0026#34; \u0026#34;Book/Programming/Terminal/\\352\\266\\214\\355\\225\\234 \\354\\204\\244\\354\\240\\225.md\u0026#34; \u0026#34;Book/Programming/Ubuntu/\\354\\240\\200\\354\\236\\245\\352\\263\\265\\352\\260\\204 \\355\\231\\225\\354\\235\\270.md\u0026#34; Book/Programming/npm/pm2.md\u0026#39; "},{"id":2,"href":"/docs/docs/ai%EA%B0%80-%EC%96%B4%EB%A0%A4%EC%9B%8C%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C-1/","title":"Ai가 어려워하는 문제 1","section":"Docs","content":" 문제 1 # \u0026#39;\u0026#34;Book/2024/9/\\355\\205\\214\\354\\212\\244\\355\\212\\270 2.md\u0026#34; Book/Excalidraw/Drawing 2024-09-24 23.22.27.excalidraw.md Book/.obsidian/workspace.json decode-string.js sync-script.js\u0026#39; 이런 문자열이 있을 때 자바스크립트로 밑의 배열 처럼 만드는 방법을 알려줘\n[ \u0026#39;Book/2024/9/테스트 2.md\u0026#39;, \u0026#39;Book/Excalidraw/Drawing 2024-09-24 23.22.27.excalidraw.md\u0026#39;, \u0026#39;Book/.obsidian/workspace.json\u0026#39;, \u0026#39;decode-string.js\u0026#39;, \u0026#39;sync-script.js\u0026#39; ] 실패 Claude Sonnet 3.5 0621 Claude Sonnet 3.5 1022 Claude Opus 3 Mistral Large 2 Gemini 1.5 Pro 002 Chat GPT 4 Chat GPT 4-mini Chat GPT 4o Gemini 1.5 Flash 002\n성공 DeepSeek R1 - 2025.1.21 Chat GPT 4-turbo Chat GPT o1-mini Chat GPT o1-preview Llama 3.1 405B Llama 3.1 Nemotron 70B Qwen 2.5 Coder 32B\n기분 탓인지는 모르겠지만 o1-preview 보다 o1-mini 가 코딩 성능이 더 우세한 듯 하다.\n/** * 옥탈 이스케이프 시퀀스를 포함한 문자열을 디코딩하여 UTF-8 문자열로 변환합니다. * @param {string} str - 옥탈 이스케이프 시퀀스를 포함한 입력 문자열 * @returns {string} - 디코딩된 UTF-8 문자열 */ function decodeOctalString(str) { // 바이트 배열을 저장할 배열 초기화 let byteArray = []; // \\xxx 패턴을 찾기 위한 정규 표현식 (000 ~ 377) const regex = /\\\\([0-3][0-7]{2})/g; let lastIndex = 0; let match; // 정규 표현식을 사용하여 \\xxx 패턴을 순회 while ((match = regex.exec(str)) !== null) { // 매치 이전의 문자열을 바이트로 변환하여 배열에 추가 let before = str.slice(lastIndex, match.index); for (let char of before) { byteArray.push(char.charCodeAt(0)); } // 매치된 \\xxx를 옥탈수에서 디코딩하여 바이트 배열에 추가 byteArray.push(parseInt(match[1], 8)); // 다음 검색을 위한 인덱스 업데이트 lastIndex = regex.lastIndex; } // 마지막 매치 이후의 문자열을 바이트로 변환하여 배열에 추가 let remaining = str.slice(lastIndex); for (let char of remaining) { byteArray.push(char.charCodeAt(0)); } // Uint8Array로 변환 후 UTF-8 디코딩 let decoder = new TextDecoder(\u0026#34;utf-8\u0026#34;); let bytes = new Uint8Array(byteArray); return decoder.decode(bytes); } /** * 문자열에서 큰 따옴표를 제거합니다. * @param {string} input - 처리할 문자열 * @returns {string} 따옴표가 제거된 문자열 */ function removeQuotes(input) { return input.replace(/\u0026#34;([^\u0026#34;]*)\u0026#34;/g, \u0026#34;$1\u0026#34;); } /** * 문자열을 파일 확장자를 기준으로 분리합니다. * @param {string} input - 처리할 문자열 * @param {string[]} extensions - 파일 확장자 배열 * @returns {string[]} 분리된 파일 경로 배열 */ function splitByFileExtension(input, extensions) { let words = input.split(\u0026#34; \u0026#34;); let paths = []; let currentPath = \u0026#34;\u0026#34;; words.forEach((word) =\u0026gt; { if (currentPath) { currentPath += \u0026#34; \u0026#34; + word; } else { currentPath = word; } // 지정한 확장자로 끝나는지 확인 if (extensions.some((ext) =\u0026gt; currentPath.endsWith(ext))) { paths.push(currentPath); currentPath = \u0026#34;\u0026#34;; } }); return paths; } /** * 인코딩된 문자열을 디코딩하고 파일 확장자를 기준으로 문자열을 분리합니다. * @param {string} encodedString - 디코딩할 인코딩된 문자열 * @returns {string[]} 분리된 파일 경로 배열 */ function decodeString(encodedString) { // 입력된 문자열을 디코딩하고 큰 따옴표를 제거합니다. let decodedStr = removeQuotes(decodeOctalString(encodedString)); // 파일 확장자를 기준으로 문자열을 분리하기 위해 사용할 확장자 목록입니다. const extensions = [\u0026#34;.md\u0026#34;, \u0026#34;.excalidraw.md\u0026#34;, \u0026#34;.json\u0026#34;, \u0026#34;.js\u0026#34;]; // 디코딩된 문자열을 파일 확장자를 기준으로 분리합니다. const paths = splitByFileExtension(decodedStr, extensions); // 분리된 파일 경로 배열을 반환합니다. return paths; } const inputString = \u0026#39;\u0026#34;Book/2024/9/\\355\\205\\214\\354\\212\\244\\355\\212\\270 2.md\u0026#34; Book/Excalidraw/Drawing 2024-09-24 23.22.27.excalidraw.md Book/.obsidian/workspace.json decode-string.js sync-script.js\u0026#39;; console.log(decodeString(inputString)); // 주어진 문자열 const input = \u0026#39;\u0026#34;Book/2024/9/\\355\\205\\214\\354\\212\\244\\355\\212\\270 2.md\u0026#34; Book/Excalidraw/Drawing 2024-09-24 23.22.27.excalidraw.md Book/.obsidian/workspace.json decode-string.js sync-script.js\u0026#39;; /** * 이스케이프된 옥탈 시퀀스를 디코딩하는 함수 * @param {string} str - 이스케이프된 문자열 * @returns {string} - 디코딩된 문자열 */ function decodeEscapedString(str) { const bytes = []; for (let i = 0; i \u0026lt; str.length; ) { if (str[i] === \u0026#34;\\\\\u0026#34;) { // 다음 세 문자가 옥탈 숫자인지 확인 const octal = str.substr(i + 1, 3); if (/^[0-7]{3}$/.test(octal)) { bytes.push(parseInt(octal, 8)); i += 4; // \\ + 3자리 숫자 continue; } } // 이스케이프된 시퀀스가 아니면 현재 문자의 유니코드 값을 추가 bytes.push(str.charCodeAt(i)); i++; } // UTF-8로 디코딩 return new TextDecoder(\u0026#34;utf-8\u0026#34;).decode(new Uint8Array(bytes)); } /** * 파일 확장자를 확인하는 함수 * @param {string} str - 확인할 문자열 * @returns {boolean} - 확장자가 있는지 여부 */ function hasFileExtension(str) { return /\\.[a-zA-Z0-9]+$/.test(str); } /** * 입력 문자열을 배열로 변환하는 함수 * @param {string} str - 입력 문자열 * @returns {string[]} - 변환된 배열 */ function parseStringToArray(str) { const regex = /\u0026#34;([^\u0026#34;]*)\u0026#34;|(\\S+)/g; const tokens = []; let match; while ((match = regex.exec(str)) !== null) { // match[1]은 따옴표로 묶인 부분, match[2]는 그렇지 않은 부분 tokens.push(match[1] || match[2]); } const decodedTokens = tokens.map((token) =\u0026gt; decodeEscapedString(token)); const result = []; let current = []; for (let token of decodedTokens) { if (hasFileExtension(token)) { current.push(token); result.push(current.join(\u0026#34; \u0026#34;)); current = []; } else { current.push(token); } } // 남아있는 토큰이 있을 경우 추가 if (current.length \u0026gt; 0) { result.push(current.join(\u0026#34; \u0026#34;)); } return result; } // 변환 실행 const result = parseStringToArray(input); console.log(result); const inputString = \u0026#39;\u0026#34;Book/2024/9/\\355\\205\\214\\354\\212\\244\\355\\212\\270 2.md\u0026#34; Book/Excalidraw/Drawing 2024-09-24 23.22.27.excalidraw.md Book/.obsidian/workspace.json decode-string.js sync-script.js\u0026#39;; // 먼저 문자열을 배열로 나눔 (공백 기준) let items = inputString.split(\u0026#39; \u0026#39;); let result = []; let currentPath = \u0026#39;\u0026#39;; let inQuotes = false; items.forEach((item, index) =\u0026gt; { if (item.startsWith(\u0026#39;\u0026#34;\u0026#39;)) { // 큰따옴표로 시작하는 경우 큰따옴표 제거 후 현재 경로로 설정 currentPath = item.slice(1); inQuotes = true; if (item.endsWith(\u0026#39;\u0026#34;\u0026#39;)) { // 큰따옴표로 끝나는 경우 배열에 추가 currentPath = decodeURIComponent(escape(currentPath)); result.push(currentPath); currentPath = \u0026#39;\u0026#39;; inQuotes = false; } } else if (item.endsWith(\u0026#39;\u0026#34;\u0026#39;)) { // 큰따옴표로 끝나는 경우 큰따옴표 제거 후 배열에 추가 currentPath += \u0026#39; \u0026#39; + item.slice(0, -1); currentPath = decodeURIComponent(escape(currentPath)); result.push(currentPath); currentPath = \u0026#39;\u0026#39;; inQuotes = false; } else if (inQuotes) { // 큰따옴표로 둘러싸인 문자열의 나머지 부분 currentPath += \u0026#39; \u0026#39; + item; } else { // 파일 확장자가 있는 경우 배열에 추가 if (/\\.[^.]*$/.test(item)) { // 이전에 처리한 경로가 있다면 결합 if (currentPath) { result.push(currentPath + \u0026#39; \u0026#39; + item); currentPath = \u0026#39;\u0026#39;; } else { result.push(item); } } else { // 파일 확장자가 없는 경우 현재 경로로 설정 if (currentPath) { currentPath += \u0026#39; \u0026#39; + item; } else { currentPath = item; } } } }); // 마지막으로 처리한 경로가 있다면 배열에 추가 if (currentPath) { result.push(currentPath); } console.log(result); "},{"id":3,"href":"/docs/docs/ai%EA%B0%80-%EC%96%B4%EB%A0%A4%EC%9B%8C%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C-2/","title":"Ai가 어려워하는 문제 2","section":"Docs","content":"질문\nimport { Nav } from \u0026#34;@/interfaces/nav\u0026#34;; import Link from \u0026#34;next/link\u0026#34;; export default function DesktopNavbarMenu({ navData }: { navData: Nav }) { return ( \u0026lt;div className=\u0026#34;hidden md:visible md:block h-full\u0026#34;\u0026gt; \u0026lt;ul className=\u0026#34;h-full flex\u0026#34;\u0026gt; {navData.children?.map((item) =\u0026gt; ( \u0026lt;li key={item.path} className=\u0026#34;px-2 h-full flex items-center group cursor-pointer\u0026#34; \u0026gt; \u0026lt;p className=\u0026#34;text-base\u0026#34;\u0026gt;{item.name}\u0026lt;/p\u0026gt; \u0026lt;div className=\u0026#34;absolute left-0 top-[3rem] bg-white/80 backdrop-blur-2xl backdrop-saturate-200 w-full group-hover:grid group-hover:visible hidden grid-col-[30px]\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;max-w-[80rem] w-full max-h-[calc(100dvh-3rem)] m-auto px-4 py-16 overflow-x-auto\u0026#34;\u0026gt; {renderDesktopNavbarMenu(item)} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ); } function renderDesktopNavbarMenu(nav: Nav) { return ( \u0026lt;div className=\u0026#34;text-center flex flex-row gap-8 justify-center\u0026#34;\u0026gt; {(nav.children ?? []).filter((children) =\u0026gt; children.type === \u0026#34;item\u0026#34;) .length \u0026gt; 0 \u0026amp;\u0026amp; ( \u0026lt;ul className=\u0026#34;flex flex-col\u0026#34;\u0026gt; {(nav.children ?? []) .filter((children) =\u0026gt; children.type === \u0026#34;item\u0026#34;) .map((children) =\u0026gt; ( \u0026lt;li key={children.path} className=\u0026#34;\u0026#34;\u0026gt; \u0026lt;Link href={children.path} className=\u0026#34;bold p-1 cursor-pointer\u0026#34;\u0026gt; {children.name} \u0026lt;/Link\u0026gt; \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; )} {(nav.children ?? []).filter((children) =\u0026gt; children.type === \u0026#34;category\u0026#34;) .length \u0026gt; 0 \u0026amp;\u0026amp; ( \u0026lt;ul\u0026gt; {(nav.children ?? []) .filter((children) =\u0026gt; children.type === \u0026#34;category\u0026#34;) .map((children) =\u0026gt; ( \u0026lt;li key={children.path} className=\u0026#34;\u0026#34;\u0026gt; \u0026lt;p className=\u0026#34;mb-4 text-base\u0026#34;\u0026gt;{children.name}\u0026lt;/p\u0026gt; {renderDesktopNavbarMenu(children)} \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; )} \u0026lt;/div\u0026gt; ); } 왜 cursor-pointer가 안먹힐까?\n해결 # 정답은 li 태그에 있는 cursor-pointer 속성을 제거하는 것이다 그리고 p 요소나 Link 요소에 cursor-pointer를 적용하니 의도하는 대로 되었다\n모델 # claude sonnet 3.5 실패 claude opus 3 해결\ndeepseek chat 2.5 해결\ncopilot chat gpt 4o 실패\nchat gpt 4o 해결 chat gpt o1-mini 해결\ngemini 1.5 pro 002 실패\n"},{"id":4,"href":"/docs/docs/ai%EA%B0%80-%EC%96%B4%EB%A0%A4%EC%9B%8C%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C-3/","title":"Ai가 어려워하는 문제 3","section":"Docs","content":"문제\n(d) 한계비용이 체증하므로, 추가적인 상품 한 단위 생산에 대한 한계수용의사금액은 상승한다. A. 맞음 B. 틀림 정답\n[정답] A. 맞음 [설명] 한계비용이 체증할 때, 기업은 추가적인 상품을 생산하기 위해 더 많은 비용을 필요로 하게 되고, 이로 인해 그 상품을 판매할 때 더 높은 가격을 받아야 하므로, 한계수용의사금액이 상승하게 된다. 이는 시장에서 가격 결정과 공급량에 영향을 미치는 요인이다. 틀림 llama 3.2 3B llama 3.1 405B Hermes 3 70B Gemini 1.5 Flash Gemini 1.5 Pro Qwen 2.5 72B Vercel v0 DeepSeek V2.5 Mistral Large 2 Claude Sonnet 3.5 Chat GPT 4o-mini - 답은 맞았으나 설명이 틀림 Chat GPT 4o DeepSeek Think DeepSeek R1 Claude Sonnet 3.7 Qwen 2.5 Max QwQ Grok 3 Grok 3 Think Gemini 2.0 Flash\n맞음 Chat GPT o1-mini Chat GPT o1-preview Mistral Large 24.11 (설명은 틀림) Gemini 2.0 Flash Thinking Experimental\n원인 한계수용의사금액에 대한 용어를 헷갈림 생산자의 한계수용의사금액인지 소비자의 한계수용의사금액인지를 문맥에서 유추해내는 것에 서투름\n"},{"id":5,"href":"/docs/docs/ai%EA%B0%80-%EC%96%B4%EB%A0%A4%EC%9B%8C%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C-4/","title":"Ai가 어려워하는 문제 4","section":"Docs","content":"(c) 초콜릿 시장의 수요–공급모형을 생각해 보자. 그리고 초콜릿은 정상재이고 공급 곡선이 우상향 한다고 가정하자. 생산 요소 가격 상승이 초콜릿의 공급에 영향을 주었는데, 기사의 마지막에서 일부 소비자는 구매량을 줄이기 시작했지만, 상점 주인인 파크씨는 아직까지 변화를 느끼지 못한다고 했다. 그 이유는 무엇일까? 그리고 생산 요소 가격 변화 이전과 비교해 시장의 균형 거래량과 균형 가격은 어떻게 변화할 까? 타당한 모든 설명을 고르시오. A. 수요 변화 없음 – 균형 거래량 감소 – 균형 가격 상승 B. 수요 변화 없음 – 균형 거래량 감소 – 균형 가격 단언할 수 없음 C. 미래에 더 큰 가격 상승을 예상하여 현재 수요의 증가 – 균형 거래량 단언할 수 없음 – 균형 가격 상승 D. 발렌타인 데이로 인한 수요의 일시적 증가 – 균형 거래량 단언할 수 없음 – 균형 가격 상승 "},{"id":6,"href":"/docs/docs/aws-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/","title":"Aws 연결하는 방법","section":"Docs","content":"ssh -i /AWS/Proejct/aws-seoul-key.pem ubuntu@ec2-13-125-209-24.ap-northeast-2.compute.amazonaws.com\n"},{"id":7,"href":"/docs/docs/c-init.bat/","title":"C Init.bat","section":"Docs","content":"@echo off setlocal enabledelayedexpansion echo ================================== echo C 프로젝트 빌드 시스템 초기화 echo ================================== echo. :: 프로젝트 이름 입력받기 set /p PROJECT_NAME=\u0026#34;프로젝트 이름을 입력하세요 (기본값: MyProject): \u0026#34; if \u0026#34;!PROJECT_NAME!\u0026#34;==\u0026#34;\u0026#34; set PROJECT_NAME=MyProject :: VS Code 폴더 생성 mkdir .vscode 2\u0026gt;nul :: 필요한 디렉토리 확인 및 생성 echo [1/8] 디렉토리 구조 생성 중... if not exist src mkdir src if not exist src\\lib mkdir src\\lib if not exist src\\main.c ( echo #include ^\u0026lt;stdio.h^\u0026gt; \u0026gt; src\\main.c echo. \u0026gt;\u0026gt; src\\main.c echo int main(void) { \u0026gt;\u0026gt; src\\main.c echo printf(\u0026#34;Hello, World!\\n\u0026#34;); \u0026gt;\u0026gt; src\\main.c echo return 0; \u0026gt;\u0026gt; src\\main.c echo } \u0026gt;\u0026gt; src\\main.c ) :: CMakeLists.txt 생성 echo [2/8] CMakeLists.txt 생성 중... echo cmake_minimum_required(VERSION 3.15) \u0026gt; CMakeLists.txt echo project(%PROJECT_NAME% C CXX) # C와 C++ 모두 지원 \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 빌드 산출물 디렉토리 설정 \u0026gt;\u0026gt; CMakeLists.txt echo set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) \u0026gt;\u0026gt; CMakeLists.txt echo set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) \u0026gt;\u0026gt; CMakeLists.txt echo set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 빌드 타입이 지정되지 않은 경우 기본값 설정 \u0026gt;\u0026gt; CMakeLists.txt echo if(NOT CMAKE_BUILD_TYPE) \u0026gt;\u0026gt; CMakeLists.txt echo set(CMAKE_BUILD_TYPE Debug) \u0026gt;\u0026gt; CMakeLists.txt echo endif() \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 소스 디렉토리 추가 \u0026gt;\u0026gt; CMakeLists.txt echo include_directories(src) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # Conan 패키지 찾기 \u0026gt;\u0026gt; CMakeLists.txt echo find_package(ZLIB CONFIG REQUIRED) \u0026gt;\u0026gt; CMakeLists.txt echo find_package(GTest CONFIG REQUIRED) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 모든 C 소스 및 헤더 파일 자동 수집 \u0026gt;\u0026gt; CMakeLists.txt echo file(GLOB_RECURSE SOURCES \u0026#34;src/*.c\u0026#34;) \u0026gt;\u0026gt; CMakeLists.txt echo file(GLOB_RECURSE HEADERS \u0026#34;src/*.h\u0026#34;) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 수집된 파일 목록 출력 (디버깅용) \u0026gt;\u0026gt; CMakeLists.txt echo message(STATUS \u0026#34;Found source files: ${SOURCES}\u0026#34;) \u0026gt;\u0026gt; CMakeLists.txt echo message(STATUS \u0026#34;Found header files: ${HEADERS}\u0026#34;) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 실행 파일 생성 \u0026gt;\u0026gt; CMakeLists.txt echo add_executable(%PROJECT_NAME% ${SOURCES}) \u0026gt;\u0026gt; CMakeLists.txt echo target_link_libraries(%PROJECT_NAME% PRIVATE ZLIB::ZLIB GTest::gtest GTest::gtest_main) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 컴파일러 경고 처리 \u0026gt;\u0026gt; CMakeLists.txt echo if(MSVC) \u0026gt;\u0026gt; CMakeLists.txt echo # Windows에서 안전하지 않은 함수 경고 무시 옵션 추가 \u0026gt;\u0026gt; CMakeLists.txt echo target_compile_definitions(%PROJECT_NAME% PRIVATE _CRT_SECURE_NO_WARNINGS) \u0026gt;\u0026gt; CMakeLists.txt echo # 경고 레벨 설정 \u0026gt;\u0026gt; CMakeLists.txt echo target_compile_options(%PROJECT_NAME% PRIVATE /W4) \u0026gt;\u0026gt; CMakeLists.txt echo else() \u0026gt;\u0026gt; CMakeLists.txt echo target_compile_options(%PROJECT_NAME% PRIVATE -Wall -Wextra) \u0026gt;\u0026gt; CMakeLists.txt echo endif() \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 소스 그룹 생성 (IDE에서 폴더 구조 유지) \u0026gt;\u0026gt; CMakeLists.txt echo source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX \u0026#34;Source Files\u0026#34; FILES ${SOURCES}) \u0026gt;\u0026gt; CMakeLists.txt echo source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX \u0026#34;Header Files\u0026#34; FILES ${HEADERS}) \u0026gt;\u0026gt; CMakeLists.txt :: conanfile.txt 생성 echo [3/8] conanfile.txt 생성 중... echo [requires] \u0026gt; conanfile.txt echo zlib/1.2.11 \u0026gt;\u0026gt; conanfile.txt echo gtest/1.10.0 \u0026gt;\u0026gt; conanfile.txt echo. \u0026gt;\u0026gt; conanfile.txt echo [generators] \u0026gt;\u0026gt; conanfile.txt echo CMakeDeps \u0026gt;\u0026gt; conanfile.txt echo CMakeToolchain \u0026gt;\u0026gt; conanfile.txt echo. \u0026gt;\u0026gt; conanfile.txt echo [options] \u0026gt;\u0026gt; conanfile.txt echo zlib/*:shared=False \u0026gt;\u0026gt; conanfile.txt echo gtest/*:shared=False \u0026gt;\u0026gt; conanfile.txt echo. \u0026gt;\u0026gt; conanfile.txt echo [imports] \u0026gt;\u0026gt; conanfile.txt echo bin, *.dll -^\u0026gt; ./bin \u0026gt;\u0026gt; conanfile.txt echo lib, *.dylib* -^\u0026gt; ./bin \u0026gt;\u0026gt; conanfile.txt echo lib, *.so* -^\u0026gt; ./bin \u0026gt;\u0026gt; conanfile.txt :: build.bat 생성 echo [4/8] build.bat 생성 중... echo @echo off \u0026gt; build.bat echo setlocal \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 빌드 타입 설정 (기본값: Debug) \u0026gt;\u0026gt; build.bat echo set BUILD_TYPE=Debug \u0026gt;\u0026gt; build.bat echo if not \u0026#34;%%~1\u0026#34;==\u0026#34;\u0026#34; set BUILD_TYPE=%%~1 \u0026gt;\u0026gt; build.bat echo echo Building in %%BUILD_TYPE%% mode \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 빌드 디렉토리 설정 \u0026gt;\u0026gt; build.bat echo set BUILD_DIR=build \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 빌드 디렉토리 생성 \u0026gt;\u0026gt; build.bat echo if not exist %%BUILD_DIR%% mkdir %%BUILD_DIR%% \u0026gt;\u0026gt; build.bat echo cd %%BUILD_DIR%% \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: Conan 설정 및 종속성 설치 (출력 폴더 명시적 지정) \u0026gt;\u0026gt; build.bat echo conan install .. --build=missing -s build_type=%%BUILD_TYPE%% -g CMakeDeps -g CMakeToolchain --output-folder=. \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: CMake 구성 (생성된 Conan 툴체인 파일 명시적 지정) \u0026gt;\u0026gt; build.bat echo cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=%%BUILD_TYPE%% \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 빌드 실행 \u0026gt;\u0026gt; build.bat echo cmake --build . --config %%BUILD_TYPE%% \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 실행 파일 경로 출력 \u0026gt;\u0026gt; build.bat echo echo Build completed. Executable is at: %%CD%%\\bin\\%%BUILD_TYPE%%\\%PROJECT_NAME%.exe \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 원래 디렉토리로 돌아가기 \u0026gt;\u0026gt; build.bat echo cd .. \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo endlocal \u0026gt;\u0026gt; build.bat :: run.bat 생성 echo [5/8] run.bat 생성 중... echo @echo off \u0026gt; run.bat echo setlocal \u0026gt;\u0026gt; run.bat echo. \u0026gt;\u0026gt; run.bat echo :: 빌드 타입 설정 (기본값: Debug) \u0026gt;\u0026gt; run.bat echo set BUILD_TYPE=Debug \u0026gt;\u0026gt; run.bat echo if not \u0026#34;%%~1\u0026#34;==\u0026#34;\u0026#34; set BUILD_TYPE=%%~1 \u0026gt;\u0026gt; run.bat echo. \u0026gt;\u0026gt; run.bat echo :: 실행 파일 경로 \u0026gt;\u0026gt; run.bat echo set EXECUTABLE_PATH=build\\bin\\%%BUILD_TYPE%%\\%PROJECT_NAME%.exe \u0026gt;\u0026gt; run.bat echo. \u0026gt;\u0026gt; run.bat echo :: 실행 파일 존재 확인 \u0026gt;\u0026gt; run.bat echo if not exist %%EXECUTABLE_PATH%% ( \u0026gt;\u0026gt; run.bat echo echo Error: Executable not found at %%EXECUTABLE_PATH%%. \u0026gt;\u0026gt; run.bat echo echo Please run build.bat first. \u0026gt;\u0026gt; run.bat echo exit /b 1 \u0026gt;\u0026gt; run.bat echo ) \u0026gt;\u0026gt; run.bat echo. \u0026gt;\u0026gt; run.bat echo :: 실행 파일 실행 \u0026gt;\u0026gt; run.bat echo echo Running %%EXECUTABLE_PATH%%... \u0026gt;\u0026gt; run.bat echo %%EXECUTABLE_PATH%% %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9 \u0026gt;\u0026gt; run.bat echo. \u0026gt;\u0026gt; run.bat echo endlocal \u0026gt;\u0026gt; run.bat :: clean.bat 생성 echo [6/8] clean.bat 생성 중... echo @echo off \u0026gt; clean.bat echo echo Cleaning build directory... \u0026gt;\u0026gt; clean.bat echo. \u0026gt;\u0026gt; clean.bat echo if exist build ( \u0026gt;\u0026gt; clean.bat echo rd /s /q build \u0026gt;\u0026gt; clean.bat echo echo Build directory removed successfully. \u0026gt;\u0026gt; clean.bat echo ) else ( \u0026gt;\u0026gt; clean.bat echo echo No build directory found. \u0026gt;\u0026gt; clean.bat echo ) \u0026gt;\u0026gt; clean.bat :: clean_all.bat 생성 echo [7/8] clean_all.bat 생성 중... echo @echo off \u0026gt; clean_all.bat echo echo Performing complete cleanup... \u0026gt;\u0026gt; clean_all.bat echo. \u0026gt;\u0026gt; clean_all.bat echo :: 빌드 디렉토리 삭제 \u0026gt;\u0026gt; clean_all.bat echo if exist build ( \u0026gt;\u0026gt; clean_all.bat echo rd /s /q build \u0026gt;\u0026gt; clean_all.bat echo echo Build directory removed. \u0026gt;\u0026gt; clean_all.bat echo ) \u0026gt;\u0026gt; clean_all.bat echo. \u0026gt;\u0026gt; clean_all.bat echo :: 프로젝트 루트의 Conan 생성 파일 삭제 \u0026gt;\u0026gt; clean_all.bat echo if exist conan_toolchain.cmake del /f /q conan_toolchain.cmake \u0026gt;\u0026gt; clean_all.bat echo if exist conaninfo.txt del /f /q conaninfo.txt \u0026gt;\u0026gt; clean_all.bat echo if exist conanbuildinfo.* del /f /q conanbuildinfo.* \u0026gt;\u0026gt; clean_all.bat echo if exist conan.lock del /f /q conan.lock \u0026gt;\u0026gt; clean_all.bat echo if exist CMakeUserPresets.json del /f /q CMakeUserPresets.json \u0026gt;\u0026gt; clean_all.bat echo. \u0026gt;\u0026gt; clean_all.bat echo :: 기타 VS 임시 파일 삭제 \u0026gt;\u0026gt; clean_all.bat echo if exist .vs rd /s /q .vs \u0026gt;\u0026gt; clean_all.bat echo if exist *.user del /f /q *.user \u0026gt;\u0026gt; clean_all.bat echo if exist *.sln del /f /q *.sln \u0026gt;\u0026gt; clean_all.bat echo if exist *.vcxproj* del /f /q *.vcxproj* \u0026gt;\u0026gt; clean_all.bat echo. \u0026gt;\u0026gt; clean_all.bat echo echo Cleanup completed. \u0026gt;\u0026gt; clean_all.bat :: VS Code 설정 파일 생성 echo [8/8] VS Code 설정 파일 생성 중... :: tasks.json echo { \u0026gt; .vscode\\tasks.json echo \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;tasks\u0026#34;: [ \u0026gt;\u0026gt; .vscode\\tasks.json echo { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;label\u0026#34;: \u0026#34;build\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;command\u0026#34;: \u0026#34;build.bat Debug\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;group\u0026#34;: { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;isDefault\u0026#34;: true \u0026gt;\u0026gt; .vscode\\tasks.json echo }, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;problemMatcher\u0026#34;: [\u0026#34;$msCompile\u0026#34;] \u0026gt;\u0026gt; .vscode\\tasks.json echo }, \u0026gt;\u0026gt; .vscode\\tasks.json echo { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;label\u0026#34;: \u0026#34;build-release\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;command\u0026#34;: \u0026#34;build.bat Release\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;group\u0026#34;: \u0026#34;build\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;problemMatcher\u0026#34;: [\u0026#34;$msCompile\u0026#34;] \u0026gt;\u0026gt; .vscode\\tasks.json echo }, \u0026gt;\u0026gt; .vscode\\tasks.json echo { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;label\u0026#34;: \u0026#34;run\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;command\u0026#34;: \u0026#34;run.bat\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;dependsOn\u0026#34;: [\u0026#34;build\u0026#34;], \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;group\u0026#34;: { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;kind\u0026#34;: \u0026#34;test\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;isDefault\u0026#34;: true \u0026gt;\u0026gt; .vscode\\tasks.json echo } \u0026gt;\u0026gt; .vscode\\tasks.json echo }, \u0026gt;\u0026gt; .vscode\\tasks.json echo { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;label\u0026#34;: \u0026#34;clean\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;command\u0026#34;: \u0026#34;clean.bat\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;problemMatcher\u0026#34;: [] \u0026gt;\u0026gt; .vscode\\tasks.json echo }, \u0026gt;\u0026gt; .vscode\\tasks.json echo { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;label\u0026#34;: \u0026#34;clean-all\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;command\u0026#34;: \u0026#34;clean_all.bat\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;problemMatcher\u0026#34;: [] \u0026gt;\u0026gt; .vscode\\tasks.json echo } \u0026gt;\u0026gt; .vscode\\tasks.json echo ] \u0026gt;\u0026gt; .vscode\\tasks.json echo } \u0026gt;\u0026gt; .vscode\\tasks.json :: launch.json echo { \u0026gt; .vscode\\launch.json echo \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;configurations\u0026#34;: [ \u0026gt;\u0026gt; .vscode\\launch.json echo { \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;name\u0026#34;: \u0026#34;Debug\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;type\u0026#34;: \u0026#34;cppvsdbg\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}\\\\build\\\\bin\\\\Debug\\\\%PROJECT_NAME%.exe\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;args\u0026#34;: [], \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;stopAtEntry\u0026#34;: false, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;environment\u0026#34;: [], \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;externalConsole\u0026#34;: false, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;preLaunchTask\u0026#34;: \u0026#34;build\u0026#34; \u0026gt;\u0026gt; .vscode\\launch.json echo } \u0026gt;\u0026gt; .vscode\\launch.json echo ] \u0026gt;\u0026gt; .vscode\\launch.json echo } \u0026gt;\u0026gt; .vscode\\launch.json :: settings.json echo { \u0026gt; .vscode\\settings.json echo \u0026#34;cmake.configureOnOpen\u0026#34;: true, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;cmake.buildDirectory\u0026#34;: \u0026#34;${workspaceFolder}/build\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;cmake.defaultVariants\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;buildType\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;default\u0026#34;: \u0026#34;debug\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;description\u0026#34;: \u0026#34;The build type.\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;choices\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;debug\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;short\u0026#34;: \u0026#34;Debug\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;long\u0026#34;: \u0026#34;Debug build type\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;buildType\u0026#34;: \u0026#34;Debug\u0026#34; \u0026gt;\u0026gt; .vscode\\settings.json echo }, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;release\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;short\u0026#34;: \u0026#34;Release\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;long\u0026#34;: \u0026#34;Release build type\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;buildType\u0026#34;: \u0026#34;Release\u0026#34; \u0026gt;\u0026gt; .vscode\\settings.json echo } \u0026gt;\u0026gt; .vscode\\settings.json echo } \u0026gt;\u0026gt; .vscode\\settings.json echo } \u0026gt;\u0026gt; .vscode\\settings.json echo }, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;files.associations\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;*.h\u0026#34;: \u0026#34;c\u0026#34; \u0026gt;\u0026gt; .vscode\\settings.json echo }, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;cmake.sourceDirectory\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; \u0026gt;\u0026gt; .vscode\\settings.json echo } \u0026gt;\u0026gt; .vscode\\settings.json :: .gitignore 생성 echo # 빌드 디렉토리 \u0026gt; .gitignore echo /build/ \u0026gt;\u0026gt; .gitignore echo /bin/ \u0026gt;\u0026gt; .gitignore echo /lib/ \u0026gt;\u0026gt; .gitignore echo. \u0026gt;\u0026gt; .gitignore echo # Visual Studio 파일 \u0026gt;\u0026gt; .gitignore echo .vs/ \u0026gt;\u0026gt; .gitignore echo *.user \u0026gt;\u0026gt; .gitignore echo *.suo \u0026gt;\u0026gt; .gitignore echo *.sln \u0026gt;\u0026gt; .gitignore echo *.vcxproj \u0026gt;\u0026gt; .gitignore echo *.vcxproj.filters \u0026gt;\u0026gt; .gitignore echo *.vcxproj.user \u0026gt;\u0026gt; .gitignore echo. \u0026gt;\u0026gt; .gitignore echo # Conan 파일 \u0026gt;\u0026gt; .gitignore echo conanbuildinfo.* \u0026gt;\u0026gt; .gitignore echo conaninfo.txt \u0026gt;\u0026gt; .gitignore echo conan.lock \u0026gt;\u0026gt; .gitignore echo conan_toolchain.cmake \u0026gt;\u0026gt; .gitignore echo CMakeUserPresets.json \u0026gt;\u0026gt; .gitignore echo. \u0026gt;\u0026gt; .gitignore echo # 임시 파일 \u0026gt;\u0026gt; .gitignore echo *.tmp \u0026gt;\u0026gt; .gitignore echo *.log \u0026gt;\u0026gt; .gitignore echo. echo =============================================== echo 초기화가 완료되었습니다! echo 프로젝트 이름: %PROJECT_NAME% echo. echo 다음 단계: echo 1. VS Code에서 프로젝트 열기 echo 2. \u0026#39;build.bat\u0026#39; 실행하여 프로젝트 빌드하기 echo 3. \u0026#39;run.bat\u0026#39; 실행하여 프로그램 실행하기 echo 4. VS Code에서 F5 키로 디버깅 시작하기 echo =============================================== endlocal "},{"id":8,"href":"/docs/docs/class-%EC%9D%B4%EB%A6%84-bem/","title":"Class 이름 Bem","section":"Docs","content":"Block, Element, Modifier(속성)\nElement\n예) header__logo\nModifier\n예) block-name_modifier-name 예) block-name__element-name_modifier-name 예) search-form__button_disabled\n(형태)(의미)(순서)_(상태)\nwrapper - 페이지 전체 영역 그룹핑 header - 머리글 영역 container - 본문영역 그룹핑 content - 주용컨텐츠 영역 footer - 바닥글 popWrapper - 팝업 페이지 전체 영역 그룹핑 popHeader - 팝업 머리글 영역 popContainer - 팝업 본문영역 그룹핑 popContent - 팝업 주용컨텐츠 영역 popFooter - 팝업 바닥글 gnbNav - 글로벌 네이게이션 영역 메뉴 lnbNav - 로컬 네비게이션 영역의 메뉴 snbNav - 사이드 네이게이션 영역의 메뉴\n"},{"id":9,"href":"/docs/docs/conan%EC%9C%BC%EB%A1%9C-c%EC%96%B8%EC%96%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%94%94%EB%B2%84%EA%B7%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%8B%A4%ED%96%89%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%9A%94%EC%95%BD/","title":"Conan으로 C언어 프로젝트 디버그, 컴파일, 실행하는 방법 요약","section":"Docs","content":" 주요 파일 구성 # CMakeLists.txt - 빌드 구성\n모든 소스 파일 자동 수집 (GLOB_RECURSE) 빌드 결과물 위치 지정 (CMAKE_RUNTIME_OUTPUT_DIRECTORY) 외부 라이브러리 설정 (ZLIB, GTest) 컴파일러 경고 설정 conanfile.txt - 종속성 관리\n필요한 외부 라이브러리 지정 빌드 옵션 설정 라이브러리 파일 임포트 방식 지정 빌드 스크립트\nbuild.bat - 프로젝트 빌드 run.bat - 프로그램 실행 clean.bat - 빌드 파일 정리 VS Code 설정\ntasks.json - 빌드 작업 자동화 launch.json - 디버깅 설정 주요 명령어 # 빌드하기: build.bat [Debug|Release]\nConan으로 종속성 설치 CMake로 빌드 파일 생성 컴파일 및 링크 실행 실행하기: run.bat [Debug|Release]\n빌드된 프로그램 실행 정리하기: clean.bat\n모든 빌드 파일 삭제 디렉토리 구조 # 프로젝트/ │ ├── src/ # 소스 코드 │ ├── main.c │ └── lib/ # 라이브러리 구현 │ ├── Module1/ │ │ ├── Module1.c │ │ └── Module1.h │ └── ... │ ├── build/ # 빌드 출력 (자동 생성) │ ├── bin/ # 실행 파일 │ │ ├── Debug/ │ │ └── Release/ │ └── lib/ # 라이브러리 파일 │ ├── CMakeLists.txt # CMake 설정 ├── conanfile.txt # Conan 종속성 ├── build.bat # 빌드 스크립트 ├── run.bat # 실행 스크립트 └── clean.bat # 정리 스크립트 주요 특징 # 자동화된 소스 관리\n소스 파일 추가 시 CMakeLists.txt 수정 불필요 GLOB_RECURSE로 모든 .c 파일 자동 감지 종속성 관리\nConan을 통한 외부 라이브러리 자동 설치 플랫폼 간 일관된 빌드 환경 빌드 결과 정리\n모든 빌드 파일은 build/ 디렉토리에 격리 실행 파일은 build/bin/에 생성 VS Code 통합\nF5 키로 디버깅 Ctrl+Shift+B로 빌드 Tasks로 다양한 작업 실행 주의사항 # 코드 페이지 관련 경고는 소스 파일을 UTF-8로 저장하여 해결 CRT 보안 경고는 _CRT_SECURE_NO_WARNINGS 정의로 해결 초기 설정 후 소스 파일 추가는 자동으로 감지됨 이 빌드 시스템으로 C 프로젝트를 쉽게 관리하고, 외부 라이브러리 종속성을 효율적으로 처리할 수 있습니다.\n아니 내용을 빠트리면 안되고 코드는 다 써줘\nC 프로젝트 빌드 시스템 종합 정리 # 1. CMakeLists.txt # cmake_minimum_required(VERSION 3.15) project(MyProject C CXX) # C와 C++ 모두 지원 # 빌드 산출물 디렉토리 설정 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin) # 빌드 타입이 지정되지 않은 경우 기본값 설정 if(NOT CMAKE_BUILD_TYPE) set(CMAKE_BUILD_TYPE Debug) endif() # 소스 디렉토리 추가 include_directories(src) # Conan 패키지 찾기 find_package(ZLIB CONFIG REQUIRED) find_package(GTest CONFIG REQUIRED) # 모든 C 소스 및 헤더 파일 자동 수집 file(GLOB_RECURSE SOURCES \u0026#34;src/*.c\u0026#34;) file(GLOB_RECURSE HEADERS \u0026#34;src/*.h\u0026#34;) # 수집된 파일 목록 출력 (디버깅용) message(STATUS \u0026#34;Found source files: ${SOURCES}\u0026#34;) message(STATUS \u0026#34;Found header files: ${HEADERS}\u0026#34;) # 실행 파일 생성 add_executable(my_program ${SOURCES}) target_link_libraries(my_program PRIVATE ZLIB::ZLIB GTest::gtest GTest::gtest_main) # 컴파일러 경고 처리 if(MSVC) # Windows에서 안전하지 않은 함수 경고 무시 옵션 추가 target_compile_definitions(my_program PRIVATE _CRT_SECURE_NO_WARNINGS) # 경고 레벨 설정 target_compile_options(my_program PRIVATE /W4) else() target_compile_options(my_program PRIVATE -Wall -Wextra) endif() # 소스 그룹 생성 (IDE에서 폴더 구조 유지) source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX \u0026#34;Source Files\u0026#34; FILES ${SOURCES}) source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX \u0026#34;Header Files\u0026#34; FILES ${HEADERS}) 2. conanfile.txt # [requires] zlib/1.2.11 gtest/1.10.0 [generators] CMakeDeps CMakeToolchain [options] zlib/*:shared=False gtest/*:shared=False [imports] bin, *.dll -\u0026gt; ./build/bin lib, *.dylib* -\u0026gt; ./build/bin lib, *.so* -\u0026gt; ./build/bin 3. build.bat # @echo off setlocal :: 빌드 타입 설정 (기본값: Debug) set BUILD_TYPE=Debug if not \u0026#34;%~1\u0026#34;==\u0026#34;\u0026#34; set BUILD_TYPE=%~1 echo Building in %BUILD_TYPE% mode :: 빌드 디렉토리 설정 set BUILD_DIR=build :: 빌드 디렉토리 생성 if not exist %BUILD_DIR% mkdir %BUILD_DIR% cd %BUILD_DIR% :: Conan 설정 및 종속성 설치 (출력 폴더 명시적 지정) conan install .. --build=missing -s build_type=%BUILD_TYPE% -g CMakeDeps -g CMakeToolchain --output-folder=. :: CMake 구성 (생성된 Conan 툴체인 파일 명시적 지정) cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=%BUILD_TYPE% :: 빌드 실행 cmake --build . --config %BUILD_TYPE% :: 실행 파일 경로 출력 echo Build completed. Executable is at: %CD%\\bin\\%BUILD_TYPE%\\my_program.exe :: 원래 디렉토리로 돌아가기 cd .. endlocal 4. run.bat # @echo off setlocal :: 빌드 타입 설정 (기본값: Debug) set BUILD_TYPE=Debug if not \u0026#34;%~1\u0026#34;==\u0026#34;\u0026#34; set BUILD_TYPE=%~1 :: 실행 파일 경로 set EXECUTABLE_PATH=build\\bin\\%BUILD_TYPE%\\my_program.exe :: 실행 파일 존재 확인 if not exist %EXECUTABLE_PATH% ( echo Error: Executable not found at %EXECUTABLE_PATH%. echo Please run build.bat first. exit /b 1 ) :: 실행 파일 실행 echo Running %EXECUTABLE_PATH%... %EXECUTABLE_PATH% %2 %3 %4 %5 %6 %7 %8 %9 endlocal 5. clean.bat # @echo off echo Cleaning build directory... if exist build ( rd /s /q build echo Build directory removed successfully. ) else ( echo No build directory found. ) 6. VSCode 설정 파일 (.vscode/tasks.json) # { \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;tasks\u0026#34;: [ { \u0026#34;label\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;build.bat Debug\u0026#34;, \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true }, \u0026#34;problemMatcher\u0026#34;: [\u0026#34;$msCompile\u0026#34;] }, { \u0026#34;label\u0026#34;: \u0026#34;build-release\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;build.bat Release\u0026#34;, \u0026#34;group\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;problemMatcher\u0026#34;: [\u0026#34;$msCompile\u0026#34;] }, { \u0026#34;label\u0026#34;: \u0026#34;run\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;run.bat\u0026#34;, \u0026#34;dependsOn\u0026#34;: [\u0026#34;build\u0026#34;], \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;isDefault\u0026#34;: true } }, { \u0026#34;label\u0026#34;: \u0026#34;clean\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;clean.bat\u0026#34;, \u0026#34;problemMatcher\u0026#34;: [] } ] } 7. VSCode 디버깅 설정 (.vscode/launch.json) # { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Debug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;cppvsdbg\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}\\\\build\\\\bin\\\\Debug\\\\my_program.exe\u0026#34;, \u0026#34;args\u0026#34;: [], \u0026#34;stopAtEntry\u0026#34;: false, \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026#34;environment\u0026#34;: [], \u0026#34;externalConsole\u0026#34;: false, \u0026#34;preLaunchTask\u0026#34;: \u0026#34;build\u0026#34; } ] } 8. .gitignore # # 빌드 디렉토리 /build/ /bin/ /lib/ # Visual Studio 파일 .vs/ *.user *.suo *.sln *.vcxproj *.vcxproj.filters *.vcxproj.user # Conan 파일 conanbuildinfo.* conaninfo.txt conan.lock # 임시 파일 *.tmp *.log 9. VSCode 설정 (.vscode/settings.json) # { \u0026#34;cmake.configureOnOpen\u0026#34;: true, \u0026#34;cmake.buildDirectory\u0026#34;: \u0026#34;${workspaceFolder}/build\u0026#34;, \u0026#34;cmake.defaultVariants\u0026#34;: { \u0026#34;buildType\u0026#34;: { \u0026#34;default\u0026#34;: \u0026#34;debug\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;The build type.\u0026#34;, \u0026#34;choices\u0026#34;: { \u0026#34;debug\u0026#34;: { \u0026#34;short\u0026#34;: \u0026#34;Debug\u0026#34;, \u0026#34;long\u0026#34;: \u0026#34;Debug build type\u0026#34;, \u0026#34;buildType\u0026#34;: \u0026#34;Debug\u0026#34; }, \u0026#34;release\u0026#34;: { \u0026#34;short\u0026#34;: \u0026#34;Release\u0026#34;, \u0026#34;long\u0026#34;: \u0026#34;Release build type\u0026#34;, \u0026#34;buildType\u0026#34;: \u0026#34;Release\u0026#34; } } } }, \u0026#34;files.associations\u0026#34;: { \u0026#34;*.h\u0026#34;: \u0026#34;c\u0026#34; } } 사용 방법 # 초기 설정:\n위 파일들을 프로젝트 루트 디렉토리에 생성 .vscode 폴더에 tasks.json, launch.json, settings.json 파일 생성 빌드하기:\n명령줄에서 build.bat 실행 VS Code에서 Ctrl+Shift+B 누르기 실행하기:\n명령줄에서 run.bat 실행 VS Code에서 작업 실행 메뉴를 통해 \u0026lsquo;run\u0026rsquo; 작업 선택 디버깅하기:\nVS Code에서 F5 키 누르기 정리하기:\n명령줄에서 clean.bat 실행 VS Code에서 작업 실행 메뉴를 통해 \u0026lsquo;clean\u0026rsquo; 작업 선택 이 빌드 시스템은 다음과 같은 이점을 제공합니다:\n소스 파일을 자동으로 감지하여 빌드합니다. Conan을 통해 외부 라이브러리 종속성을 관리합니다. 빌드 결과물을 build 디렉토리에 정리합니다. VS Code와의 통합으로 편리한 개발 환경을 제공합니다. 문제 해결:\n코드 페이지 경고는 소스 파일을 UTF-8로 저장하여 해결할 수 있습니다. CRT 보안 경고는 _CRT_SECURE_NO_WARNINGS 정의를 통해 처리됩니다. "},{"id":10,"href":"/docs/docs/css-color-%EC%A1%B0%ED%95%A9/","title":"Css Color 조합","section":"Docs","content":"0, 111, 222 30, 130, 230\n"},{"id":11,"href":"/docs/docs/css-gradient-image/","title":"Css Gradient Image","section":"Docs","content":".image-1 { background-color: hsla(173, 77%, 83%, 1); background-image: radial-gradient( circle at 7% 81%, hsla(104.5588235294118, 91%, 91%, 1) 16%, transparent 53% ), radial-gradient(circle at 11% 29%, hsla(213, 97%, 75%, 1) 8%, transparent 74%), radial-gradient( circle at 21% 14%, hsla(149, 93%, 64%, 1) 14.288924492243542%, transparent 68% ), radial-gradient(circle at 90% 50%, hsla(118, 94%, 89%, 1) 2%, transparent 85%), radial-gradient(circle at 5% 1%, hsla(250, 76%, 61%, 1) 7%, transparent 84%); background-blend-mode: normal, normal, normal, normal, normal; } .image-2 { background-color: hsla(195, 82%, 85%, 1); background-image: radial-gradient( circle at 85% 15%, hsla(320, 95%, 89%, 1) 12%, transparent 60% ), radial-gradient(circle at 95% 85%, hsla(180, 90%, 70%, 1) 10%, transparent 70%), radial-gradient(circle at 15% 25%, hsla(45, 95%, 85%, 1) 15%, transparent 65%), radial-gradient(circle at 10% 90%, hsla(280, 85%, 75%, 1) 5%, transparent 80%), radial-gradient(circle at 50% 50%, hsla(150, 90%, 80%, 1) 8%, transparent 75%); background-blend-mode: normal, normal, normal, normal, normal; } .image-3 { background-color: hsla(210, 75%, 92%, 1); /* 부드러운 하늘색 베이스 */ background-image: radial-gradient( circle at 20% 20%, hsla(340, 85%, 85%, 1) 18%, transparent 58% ), radial-gradient( circle at 80% 80%, hsla(135, 90%, 80%, 1) 15%, transparent 65% ), radial-gradient( circle at 75% 25%, hsla(55, 85%, 85%, 1) 12%, transparent 70% ), radial-gradient( circle at 25% 75%, hsla(200, 95%, 75%, 1) 10%, transparent 75% ), radial-gradient( circle at 50% 40%, hsla(290, 80%, 85%, 1) 8%, transparent 80% ); background-blend-mode: normal, normal, normal, normal, normal; } "},{"id":12,"href":"/docs/docs/css-table/","title":"Css Table","section":"Docs","content":"width: 100%임에도 불구하고 화면 밖으로 나가는 문제\n해결:\ntable { table-layout: fixed; } "},{"id":13,"href":"/docs/docs/css-%EC%B4%88%EA%B8%B0-%EC%84%B8%ED%8C%85/","title":"Css 초기 세팅","section":"Docs","content":"*, *::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: \u0026#39;Apple SD Gothic Neo\u0026#39;, \u0026#39;Noto Sans KR\u0026#39;, sans-serif; } button { background: none; color: inherit; border: none; cursor: pointer; outline: inherit; } a { color: inherit; text-decoration: none; } li { list-style: none; } input:focus { outline: none; } "},{"id":14,"href":"/docs/docs/docker-%EC%82%AD%EC%A0%9C-%EB%AA%85%EB%A0%B9%EC%96%B4/","title":"Docker 삭제 명령어","section":"Docs","content":"# 실행 중인 컨테이너 일괄 정지 docker stop $(docker ps -aq) # 모든 컨테이너 삭제 (실행 중이던 정지된 것 모두) docker rm -f $(docker ps -aq) # 모든 도커 이미지 삭제 docker rmi -f $(docker images -q) # 사용하지 않는 네트워크, 캐시, 볼륨 등 전체 정리 docker system prune -a --volumes docker stop $(docker ps -aq) docker rm -f $(docker ps -aq) docker rmi -f $(docker images -aq) docker volume rm -f $(docker volume ls -q) docker network rm $(docker network ls -q) docker system prune -af --volumes "},{"id":15,"href":"/docs/docs/font-size/","title":"Font Size","section":"Docs","content":" Size Desktop Tablet Mobile 10px 11px 12px comment-text, default-text main-text 13px main-text 14px main-text title-text 15px title-text head-text, subtitle 16px title-text head-text, subtitle subhead, title 20px subtitle, head-text 24px item-text subhead, title 32px subhead, title headline 36px 40px 48px headline 64px headline 96px 128px 100, Thin - 200, Extra Light - 300, Light - 400, Regular - comment-text, default-text 500, Medium - item-text, head-text, main-text, item-text, title-text 600, SemiBold - subhead, subtitle 700, Bold - headline, title 800, ExtraBold - 900, Black -\n6 12 18 24 30 36 42 48 56 60\n"},{"id":16,"href":"/docs/docs/ghostty---config/","title":"Ghostty Config","section":"Docs","content":"# font font-family = \u0026#34;RobotoMono Nerd Font\u0026#34; # window window-padding-balance = true window-padding-x = 0 window-padding-y = 0 "},{"id":17,"href":"/docs/docs/git-add%EC%99%80-commit/","title":"Git Add와 Commit","section":"Docs","content":"Git에서 변경사항을 저장하는 주요 단계는 git add와 git commit입니다. 아래는 각 단계에 대한 간략한 설명입니다.\n변경사항 스테이징 (git add): 변경한 파일들 중에서 어떤 것들을 저장할지를 선택하는 단계입니다. 모든 변경사항을 스테이징 영역에 올리려면 다음과 같이 명령어를 사용합니다.\ngit add . 여기서 .은 현재 디렉토리의 모든 파일과 하위 디렉토리를 의미합니다. 만약 특정 파일만 스테이징하고 싶다면 파일명을 지정합니다.\ngit add filename 변경사항 커밋 (git commit): 스테이징 영역에 올라간 변경사항들을 로컬 저장소에 영구히 저장하는 단계입니다.\ngit commit -m \u0026#34;커밋 메시지\u0026#34; -m 옵션은 커밋 메시지를 직접 명령어로 입력할 수 있게 해줍니다. 커밋 메시지는 해당 커밋의 목적이나 변경사항에 대한 간결한 설명을 기입합니다.\n예를 들어:\ngit add . # 모든 변경사항 스테이징 git commit -m \u0026#34;기능 추가: 새로운 로그인 화면 구현\u0026#34; 이렇게 하면 변경사항이 스테이징되고 커밋이 생성되어 로컬 저장소에 저장됩니다. 만약 원격 저장소에 변경사항을 반영하려면 git push 명령어를 사용합니다.\n"},{"id":18,"href":"/docs/docs/git-username-password-%EC%A0%80%EC%9E%A5/","title":"Git Username Password 저장","section":"Docs","content":"git config --global user.name 이름 git config --global user.email 이메일 "},{"id":19,"href":"/docs/docs/helix-editor---config.toml/","title":"Helix Editor Config.toml","section":"Docs","content":"# ~/.config/helix/config.toml theme = \u0026#34;onedark\u0026#34; [editor] line-number = \u0026#34;relative\u0026#34; mouse = true [editor.cursor-shape] insert = \u0026#34;bar\u0026#34; normal = \u0026#34;block\u0026#34; select = \u0026#34;underline\u0026#34; [editor.file-picker] hidden = false [editor.soft-wrap] enable = true [keys.normal] A-up = [\u0026#34;extend_to_line_bounds\u0026#34;, \u0026#34;delete_selection\u0026#34;, \u0026#34;move_line_up\u0026#34;, \u0026#34;paste_before\u0026#34;] A-down = [\u0026#34;extend_to_line_bounds\u0026#34;, \u0026#34;delete_selection\u0026#34;, \u0026#34;paste_after\u0026#34;] [keys.insert] C-s = \u0026#34;:w\u0026#34; "},{"id":20,"href":"/docs/docs/helix-editor---languages.toml/","title":"Helix Editor Languages.toml","section":"Docs","content":"# ~/.config/helix/languages.toml # Go [language-server.gopls] command = \u0026#34;gopls\u0026#34; args = [\u0026#34;serve\u0026#34;] [[language]] name = \u0026#34;go\u0026#34; scope = \u0026#34;source.go\u0026#34; file-types = [\u0026#34;go\u0026#34;] language-servers = [\u0026#34;gopls\u0026#34;] formatter = { command = \u0026#34;goimports\u0026#34; } auto-format = true # Rust [[language]] name = \u0026#34;rust\u0026#34; scope = \u0026#34;source.rust\u0026#34; file-types = [\u0026#34;rs\u0026#34;] language-servers = [\u0026#34;rust-analyzer\u0026#34;] formatter = { command = \u0026#34;rustfmt\u0026#34; } auto-format = true "},{"id":21,"href":"/docs/docs/helix-editor-%EC%96%B8%EC%96%B4-%EC%84%A4%EC%A0%95/","title":"Helix Editor 언어 설정","section":"Docs","content":" Go # brew install gopls # Go [language-server.gopls] command = \u0026#34;gopls\u0026#34; args = [\u0026#34;serve\u0026#34;] [[language]] name = \u0026#34;go\u0026#34; scope = \u0026#34;source.go\u0026#34; file-types = [\u0026#34;go\u0026#34;] language-servers = [\u0026#34;gopls\u0026#34;] formatter = { command = \u0026#34;goimports\u0026#34; } auto-format = true Rust # brew install llvm echo \u0026#39;export PATH=\u0026#34;$(brew --prefix llvm)/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc source ~/.zshrc # ~/.config/helix/languages.toml # Rust [[language]] name = \u0026#34;rust\u0026#34; scope = \u0026#34;source.rust\u0026#34; file-types = [\u0026#34;rs\u0026#34;] language-servers = [\u0026#34;rust-analyzer\u0026#34;] formatter = { command = \u0026#34;rustfmt\u0026#34; } auto-format = true "},{"id":22,"href":"/docs/docs/mqtt-%EA%B7%BC%EB%8D%B0-%EB%B3%B4%ED%86%B5-%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4%EC%99%80-%ED%86%B5%EC%8B%A0%ED%95%98%EB%8A%94-api-%EC%84%9C%EB%B2%84%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4/","title":"Mqtt 근데 보통 라즈베리파이와 통신하는 API 서버는 어떻게 만들어?","section":"Docs","content":"좋은 질문이에요!\n라즈베리파이(Raspberry Pi)와 통신하는 API 서버를 만들 때는, 일반적인 웹 애플리케이션보다 안정성, 보안, 네트워크 환경, 데이터 포맷, 프로토콜 등을 더 신경 써야 합니다.\n🧱 기본 개념: 라즈베리파이 ↔ API 서버 통신 구조 # 라즈베리파이 (센서 + MQTT 또는 HTTP 클라이언트) ↓ 네트워크 (Wi-Fi / 이더넷 / LTE 등) ↓ API 서버 (Go + Gin + GORM 등) ↓ MySQL / PostgreSQL 등 DB 저장 ↓ 웹/앱에서 조회 가능 ✅ 1. API 서버 설계 방향 # 항목 설명 통신 방식 HTTP REST API or MQTT or WebSocket 등 보안 HTTPS, 인증(Token/JWT), IP 제한 등 데이터 포맷 JSON 사용 권장 에러 처리 정확한 HTTP 상태 코드 반환 로그 기록 요청 로그, 오류 로그 남기기 📡 2. 라즈베리파이와 주로 사용하는 통신 방식 # 1) HTTP REST API # 가장 간단하고 직관적 라즈베리파이에서 curl, Python requests 등을 이용해 POST 요청 전송 예시 (Python): # import requests import json url = \u0026#34;http://api.yourserver.com/data\u0026#34; data = { \u0026#34;device_id\u0026#34;: \u0026#34;raspi-01\u0026#34;, \u0026#34;temperature\u0026#34;: 25.5, \u0026#34;humidity\u0026#34;: 60.3 } response = requests.post(url, json=data) print(response.status_code) Go(Gin) API 예시: # r.POST(\u0026#34;/data\u0026#34;, func(c *gin.Context) { var payload struct { DeviceID string `json:\u0026#34;device_id\u0026#34;` Temperature float32 `json:\u0026#34;temperature\u0026#34;` Humidity float32 `json:\u0026#34;humidity\u0026#34;` } if err := c.ShouldBindJSON(\u0026amp;payload); err != nil { c.JSON(http.StatusBadRequest, gin.H{\u0026#34;error\u0026#34;: err.Error()}) return } db.Create(\u0026amp;models.SensorData{ DeviceID: payload.DeviceID, Temperature: payload.Temperature, Humidity: payload.Humidity, }) c.JSON(http.StatusOK, gin.H{\u0026#34;status\u0026#34;: \u0026#34;success\u0026#34;}) }) 2) MQTT 통신 (추천) # 실시간 센서 데이터 수신 시 유리 라즈베리파이가 발행(publish), 서버가 구독(subscribe) 라즈베리파이에서 예시 (Python): # import paho.mqtt.client as mqtt import json client = mqtt.Client() client.connect(\u0026#34;your.server.ip\u0026#34;, 1883) data = { \u0026#34;device_id\u0026#34;: \u0026#34;raspi-01\u0026#34;, \u0026#34;temperature\u0026#34;: 25.5, \u0026#34;humidity\u0026#34;: 60.3 } client.publish(\u0026#34;sensor/data\u0026#34;, json.dumps(data)) Go 서버에서 수신 (MQTT Subscriber): # func StartMQTTSubscriber(db *gorm.DB, broker, topic string) { opts := paho_mqtt_golang.NewClientOptions().AddBroker(broker) client := paho_mqtt_golang.NewClient(opts) client.Connect() token := client.Subscribe(topic, 1, func(client paho_mqtt_golang.Client, msg paho_mqtt_golang.Message) { var data map[string]interface{} json.Unmarshal(msg.Payload(), \u0026amp;data) sensor := models.SensorData{ DeviceID: data[\u0026#34;device_id\u0026#34;].(string), Temperature: float32(data[\u0026#34;temperature\u0026#34;].(float64)), Humidity: float32(data[\u0026#34;humidity\u0026#34;].(float64)), } db.Create(\u0026amp;sensor) }) token.Wait() } 3) WebSocket (선택사항) # 실시간 양방향 통신 필요 시 예: 서버 → 라즈베리파이로 커맨드 전달 (예: LED 켜짐/꺼짐 명령) 🔐 3. 보안 관련 고려 사항 # 항목 설명 HTTPS 반드시 TLS 적용 (Let's Encrypt) 인증 JWT 토큰이나 API Key로 접근 제어 IP 제한 특정 IP(라즈베리파이의 공인 IP)만 접근 허용 Rate Limiting 과다 요청 차단 로그 기록 누가 언제 어떤 데이터를 보냈는지 기록 🌐 4. 네트워크 설정 주의점 # 항목 설명 공인 IP vs 내부망 외부에서 접근 가능해야 함 방화벽 설정 API 포트(80, 443), MQTT 포트(1883, 8883) 열기 DDNS 공인 IP가 변하는 경우 도메인으로 고정 관리 가능 NAT 설정 라우터에서 포트 포워딩 필요할 수 있음 📦 5. 운영 환경 구성 추천 # 아래는 Docker + Traefik + Go + MySQL 구성입니다.\nversion: \u0026#39;3\u0026#39; services: traefik: image: traefik:v2.9 command: - --api.insecure=true - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --certificatesresolvers.myresolver.acme.tlschallenge - --certificatesresolvers.myresolver.acme.email=you@example.com - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json ports: - \u0026#34;80:80\u0026#34; - \u0026#34;443:443\u0026#34; - \u0026#34;8080:8080\u0026#34; # Traefik Dashboard volumes: - /var/run/docker.sock:/var/run/docker.sock - ./letsencrypt:/letsencrypt api-server: build: . labels: - \u0026#34;traefik.http.routers.api.rule=Host(`api.example.com`)\u0026#34; - \u0026#34;traefik.http.routers.api.entrypoints=websecure\u0026#34; - \u0026#34;traefik.http.routers.api.tls.certresolver=myresolver\u0026#34; - \u0026#34;traefik.http.services.api.loadbalancer.server.port=8080\u0026#34; mysql: image: mysql:8.0 environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: sensordb volumes: - db_data:/var/lib/mysql volumes: db_data: ✅ 요약 # 항목 추천 방법 통신 방식 MQTT or HTTP 데이터 포맷 JSON 보안 HTTPS + API Key or JWT 운영 Docker + Traefik + Let\u0026rsquo;s Encrypt DB 저장 GORM 활용하여 MySQL 등에 저장 모니터링 로그, 대시보드(Traefik 제공), Prometheus 연동도 가능 필요하다면 아래 내용도 도와드릴게요 😊\n라즈베리파이 센서 연결 방법 (GPIO, I2C 등) MQTT Broker(Docker Mosquitto) 설치 가이드 JWT 기반 인증 추가 방법 전체 Docker Compose + Go 예제 어떤 걸 먼저 해볼까요?\n"},{"id":23,"href":"/docs/docs/neovim-plugin---colorscheme.lua/","title":"Neo Vim Plugin Colorscheme.lua","section":"Docs","content":"-- lua/plugins/colorscheme.lua return { -- add { \u0026#34;sainnhe/sonokai\u0026#34; }, -- Configure LazyVim to load sonokai { \u0026#34;LazyVim/LazyVim\u0026#34;, opts = { colorscheme = \u0026#34;sonokai\u0026#34;, }, }, } "},{"id":24,"href":"/docs/docs/neovim-plugin---oil.lua/","title":"Neo Vim Plugin Oil.lua","section":"Docs","content":"return { \u0026#34;stevearc/oil.nvim\u0026#34;, dependencies = { \u0026#34;nvim-tree/nvim-web-devicons\u0026#34; }, config = function() require(\u0026#34;oil\u0026#34;).setup({ -- 기본 파일 탐색기 설정 default_file_explorer = true, columns = { \u0026#34;icon\u0026#34;, \u0026#34;permissions\u0026#34;, \u0026#34;size\u0026#34; }, view_options = { show_hidden = true, }, }) -- 🔥 \u0026#39;-\u0026#39; 키로 oil.nvim 파일 탐색기 열도록 설정 vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;-\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;Oil\u0026lt;CR\u0026gt;\u0026#34;, { silent = true }) end, } "},{"id":25,"href":"/docs/docs/neovim-plugin---telescope.lua/","title":"Neo Vim Plugin Telescope.lua","section":"Docs","content":"return { \u0026#34;nvim-telescope/telescope.nvim\u0026#34;, dependencies = { \u0026#34;nvim-lua/plenary.nvim\u0026#34; }, config = function() require(\u0026#34;telescope\u0026#34;).setup({ defaults = { file_ignore_patterns = { \u0026#34;node_modules\u0026#34;, \u0026#34;.git/\u0026#34;, \u0026#34;dist\u0026#34; }, }, pickers = { live_grep = { additional_args = function(_) return { \u0026#34;--hidden\u0026#34;, \u0026#34;--smart-case\u0026#34; } end, }, }, }) end, } "},{"id":26,"href":"/docs/docs/nextjs---failed-websocket-is-closed-due-to-suspension./","title":"Nextjs Failed Web Socket Is Closed Due to Suspension.","section":"Docs","content":"https://github.com/vercel/next.js/issues/30491\n"},{"id":27,"href":"/docs/docs/nextjs-%EA%B5%AC%EC%A1%B0/","title":"Nextjs 구조","section":"Docs","content":"NextJS 웹앱의 권장 폴더 구조는 다음과 같습니다:\nmy-nextjs-app/ ├── app/ │ ├── api/ │ ├── (routes)/ │ ├── layout.tsx │ └── page.tsx ├── components/ ├── lib/ ├── public/ ├── styles/ ├── types/ ├── utils/ ├── .env.local ├── .gitignore ├── next.config.js ├── package.json └── tsconfig.json 주요 폴더 및 파일의 설명:\napp/: 라우팅 및 페이지 컴포넌트 api/: API 라우트 (routes)/: 그룹화된 라우트 components/: 재사용 가능한 UI 컴포넌트 lib/: 외부 라이브러리 및 API public/: 정적 파일 styles/: 전역 스타일 및 CSS 모듈 types/: TypeScript 타입 정의 utils/: 유틸리티 함수 이 구조는 NextJS 13 이상의 App Router를 기반으로 합니다. 프로젝트의 규모와 요구사항에 따라 조정할 수 있습니다.\n"},{"id":28,"href":"/docs/docs/nginx---ssl-%EC%9D%B8%EC%A6%9D-%EB%B0%9B%EA%B8%B0/","title":"Nginx Ssl 인증 받기","section":"Docs","content":"# SSL 발급을 위한 디렉토리 생성 sudo mkdir -p /var/www/letsencrypt/.well-known/acme-challenge sudo apt update # apt 업데이트 # nginx 설치 sudo apt install nginx-core # ubuntu 계정에 권한 및 파일 수정 권한을 부여 sudo touch /etc/nginx/snippets/letsencrypt.conf sudo chown root:ubuntu /etc/nginx/snippets/letsencrypt.conf sudo chmod 775 /etc/nginx/snippets/letsencrypt.conf # /etc/nginx/snippets/letsencrypt.conf 열기 sudo vi /etc/nginx/snippets/letsencrypt.conf # /etc/nginx/snippets/letsencrypt.conf 파일에 아래 텍스트 입력 후 저장 location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; root /var/www/letsencrypt; } # /etc/nginx/sites-available/default 파일 수정 sudo vi /etc/nginx/sites-available/default ## # You should look at the following URL\u0026#39;s in order to grasp a solid understanding # of Nginx configuration files in order to fully unleash the power of Nginx. # https://www.nginx.com/resources/wiki/start/ # https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/ # https://wiki.debian.org/Nginx/DirectoryStructure # # In most cases, administrators will remove this file from sites-enabled/ and # leave it as reference inside of sites-available where it will continue to be # updated by the nginx packaging team. # # This file will automatically load configuration files provided by other # applications, such as Drupal or Wordpress. These applications will be made # available underneath a path with that package name, such as /drupal8. # # Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples. ## # Default server configuration # server { listen 80 default_server; listen [::]:80 default_server; # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 # # Read up on ssl_ciphers to ensure a secure configuration. # See: https://bugs.debian.org/765782 # # Self signed certs generated by the ssl-cert package # Don\u0026#39;t use them in a production server! # # include snippets/snakeoil.conf; root /var/www/html; # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html; server_name _; # _를 example.com 처럼 바꿈 include /etc/nginx/snippets/letsencrypt.conf; location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; } # pass PHP scripts to FastCGI server # #location ~ \\.php$ { # include snippets/fastcgi-php.conf; # # # With php-fpm (or other unix sockets): # fastcgi_pass unix:/run/php/php7.4-fpm.sock; # # With php-cgi (or other tcp sockets): # fastcgi_pass 127.0.0.1:9000; #} # deny access to .htaccess files, if Apache\u0026#39;s document root # concurs with nginx\u0026#39;s one # #location ~ /\\.ht { # deny all; #} } # Virtual Host configuration for example.com # # You can move that to a different file under sites-available/ and symlink that # to sites-enabled/ to enable it. # #server { # listen 80; # listen [::]:80; # # server_name example.com; # # root /var/www/example.com; # index index.html; # # location / { # try_files $uri $uri/ =404; # } #} # nginx 적용 sudo nginx -t # nginx 다시시작 sudo service nginx restart # snap core 설치 sudo snap install core; sudo snap refresh core # certbot 구버전 제거 sudo apt remove certbot # snap으로 certbot 신버전 설치 sudo snap install --classic certbot # /snap/bin/certbot -\u0026gt; /usr/bin/certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot # ssl 인증서 받기 # example@example.com을 자신의 이메일로 바꾸고, example.com을 자신의 도메인으로 바꾼다 sudo certbot certonly --webroot --agree-tos --no-eff-email --email example@example.com -w /var/www/letsencrypt -d example.com -d www.example.com # 인증서 위치 확인 sudo ls /etc/letsencrypt/live/ # 인증서 확인 sudo ls -al /etc/letsencrypt/live/example.com // 자신의 도메인을 example.com처럼 입력한다 # 자동 업데이트 테스트 sudo certbot renew --dry-run # pem 파일 확인 sudo ls -al /etc/letsencrypt/live/example.com # 인증서 적용 sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096 # /etc/nginx/snippets/ssl.conf를 열기 sudo vi /etc/nginx/snippets/ssl.conf # /etc/nginx/snippets/ssl.conf에 밑에 코드 복사 후 저장 ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_dhparam /etc/nginx/dhparam.pem; ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384; ssl_ecdh_curve secp384r1; ssl_prefer_server_ciphers on; ssl_stapling on; ssl_stapling_verify on; resolver 8.8.8.8 8.8.4.4; add_header Strict-Transport-Security \u0026#34;max-age=15768000; includeSubdomains; preload\u0026#34;; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \u0026#34;SAMEORIGIN\u0026#34;; # /etc/nginx/snippets/ssl.conf 접근 권한 막기 sudo chmod 644 /etc/nginx/snippets/ssl.conf # /etc/nginx/sites-available/default 열기 sudo vi /etc/nginx/sites-available/default # /etc/nginx/sites-available/default에 밑에 내용 복사 후 저장. example.com은 자신의 도메인으로 바꾼다 # Default HTTPS server configuration server { listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name example.com; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/example.com/fullchain.pem; include /etc/nginx/snippets/ssl.conf; root /var/www/html; index index.php index.html index.htm index.nginx-debian.html; location / { #try_files $uri $uri/ =404; #if (!-e $request_filename) { # rewrite ^.*$ /index.php last; #} proxy_pass http://localhost:8080; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.4-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; fastcgi_read_timeout 300; } location ~ /\\.ht { deny all; } } # HTTPS www. server configuration server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name www.example.com; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/example.com/fullchain.pem; include /etc/nginx/snippets/ssl.conf; location / { return 301 https://example.com$request_uri; } } # Default server configuration server { listen 80; listen [::]:80 default_server; server_name example.com; include /etc/nginx/snippets/letsencrypt.conf; location / { return 301 https://example.com$request_uri; } } # HTTP - CNAME Connect www.example.com to example.com server { listen 80; listen [::]:80; server_name www.example.com; include /etc/nginx/snippets/letsencrypt.conf; location / { return 301 https://www.example.com$request_uri; } } sudo nginx -t sudo service nginx restart # 갱신 방법 sudo certbot renew --dry-run # 갱신 방법 2 sudo certbot certonly --webroot --agree-tos --no-eff-email --email 이메일주소 -w /var/www/letsencrypt -d 도메인주소 -d www.도메인주소 참고사이트 # [https://techhans.tistory.com/41] [https://devbono.com/https-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0lets-encrypt-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%82%AC%EC%9A%A9/]\n"},{"id":29,"href":"/docs/docs/prisma-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95/","title":"Prisma 사용 방법","section":"Docs","content":"npx prisma migrate dev "},{"id":30,"href":"/docs/docs/qwen-2.5-coder/","title":"Qwen 2.5 Coder","section":"Docs","content":" 32B # temperature: 0.1 top p: 0.9\n"},{"id":31,"href":"/docs/docs/react-flux-%ED%8C%A8%ED%84%B4-%EA%B0%84%EB%8B%A8-%EC%98%88%EC%A0%9C/","title":"React Flux 패턴 간단 예제","section":"Docs","content":"\u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; import Button from \u0026#39;$lib/components/ui/Button.svelte\u0026#39;; import { createStore } from \u0026#39;$lib/flux/store\u0026#39;; const store = createStore\u0026lt;number\u0026gt;(0, (state: number, action: { type: string }): number =\u0026gt; { switch (action.type) { case \u0026#39;INCREMENT\u0026#39;: return state + 1; case \u0026#39;DECREMENT\u0026#39;: return state - 1; default: return state; } }); \u0026lt;/script\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Button onclick={() =\u0026gt; store.dispatch({ type: \u0026#39;DECREMENT\u0026#39; })}\u0026gt;-\u0026lt;/Button\u0026gt; \u0026lt;span\u0026gt;{store.getState()}\u0026lt;/span\u0026gt; \u0026lt;Button onclick={() =\u0026gt; store.dispatch({ type: \u0026#39;INCREMENT\u0026#39; })}\u0026gt;+\u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; export type Action = { type: string; }; export class Dispatcher\u0026lt;T\u0026gt; { private listeners: Array\u0026lt;(action: T) =\u0026gt; void\u0026gt; = []; register(listener: (action: T) =\u0026gt; void): () =\u0026gt; void { this.listeners.push(listener); return () =\u0026gt; { this.listeners = this.listeners.filter((l) =\u0026gt; l !== listener); }; } dispatch(action: T): void { this.listeners.forEach((listener) =\u0026gt; listener(action)); } } import { Dispatcher, type Action } from \u0026#39;$lib/flux/dispatcher\u0026#39;; type Reducer\u0026lt;T\u0026gt; = (state: T, action: Action) =\u0026gt; T; export class Store\u0026lt;T\u0026gt; { private state: T; private dispatcher: Dispatcher\u0026lt;Action\u0026gt; = new Dispatcher(); private reducer: Reducer\u0026lt;T\u0026gt;; constructor(state: T, reducer: Reducer\u0026lt;T\u0026gt;) { this.state = state; this.reducer = reducer; } getState(): T { return this.state; } dispatch(action: Action): void { console.log(\u0026#39;state\u0026#39;, this.state); this.state = this.reducer(this.state, action); this.dispatcher.dispatch(action); } subscribe(listener: () =\u0026gt; void): () =\u0026gt; void { const unregister = this.dispatcher.register(() =\u0026gt; listener()); return () =\u0026gt; { unregister(); }; } } export const createStore = \u0026lt;T\u0026gt;(state: T, reducer: Reducer\u0026lt;T\u0026gt;): Store\u0026lt;T\u0026gt; =\u0026gt; { return new Store(state, reducer); }; 작동은 되지 않는다. 왜냐하면 Svelte 환경은 React와 다르기 때문이다.\n"},{"id":32,"href":"/docs/docs/ubuntu-%EC%84%A4%EC%A0%95/","title":"Ubuntu 설정","section":"Docs","content":"# /etc/apt/sources.list.d/ubuntu-sources server-1\n# /etc/netplan/50-cloud-init.yaml network: version: 2 ethernets: enp0s1: dhcp: no addresses: [192.168.0.100/24] router: - to: default via: 192.168.0.1 nameservers: addresses: [192.168.0.1] server-2\n# /etc/netplan/50-cloud-init.yaml network: version: 2 ethernets: enp0s1: dhcp: no addresses: [192.168.0.200/24] routes: - to: default via: 192.168.0.1 nameservers: addresses: [192.168.0.1] client\n"},{"id":33,"href":"/docs/docs/ubuntu-%EC%A0%80%EC%9E%A5-%EA%B3%B5%EA%B0%84-%ED%99%95%EC%9D%B8/","title":"Ubuntu 저장 공간 확인","section":"Docs","content":"df -h "},{"id":34,"href":"/docs/docs/ubuntu-%ED%95%9C%EA%B8%80-%EA%B9%A8%EC%A7%90-%EB%AC%B8%EC%A0%9C/","title":"Ubuntu 한글 깨짐 문제","section":"Docs","content":"# language-pack-ko 패키지 설치 apt-get install language-pack-ko # 로케일 설치 locale-gen ko_KR.UTF-8 # 패키지 재설정 dpkg-reconfigure locales # ko_KR.UTF-8 UTF-8 찾아 번호 입력 # (290 또는 299) # ko_KR.UTF-8 이 써져 있는 번호 입력 # 환경변수 export LANGUAGE=ko_KR.UTF-8 export LANG=ko_KR.UTF-8 # 적용 locale # .bashrc 에 추가해 자동 실행 적용 nano ~/.bashrc export LANGUAGE=ko_KR.UTF-8 export LANG=ko_KR.UTF-8 source ~/.bashrc "},{"id":35,"href":"/docs/docs/uiux-%EC%83%89%EC%83%81/","title":"Uiux 색상","section":"Docs","content":"\n"},{"id":36,"href":"/docs/docs/windows-%EC%84%A4%EC%B9%98-%EC%A4%91-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%97%B0%EA%B2%B0-%EB%AC%B8%EC%A0%9C/","title":"Windows 설치 중 네트워크 연결 문제","section":"Docs","content":"shift + f10 oobe₩bypassnro "},{"id":37,"href":"/docs/docs/xmake-%EC%82%AC%EC%9A%A9%EB%B2%95/","title":"Xmake 사용법","section":"Docs","content":" 🚀 XMake: Rust의 Cargo 같은 C 빌드 시스템 사용법 # XMake는 C, C++ 프로젝트에서 Cargo처럼 간편한 빌드 + 실행 + 패키지 관리를 제공합니다.\nRust에서 cargo build, cargo run을 쓰듯이, XMake에서는 xmake, xmake run을 사용할 수 있습니다.\n1️⃣ XMake 설치 # 📌 Linux/macOS\ncurl -fsSL https://xmake.io/shget.text | bash 📌 Windows\nPowerShell에서 실행:\niwr -useb https://xmake.io/psget.text | iex 📌 또는 패키지 매니저 사용\nmacOS: brew install xmake Linux: sudo apt install xmake (Ubuntu), sudo pacman -S xmake (Arch) Windows: scoop install xmake 또는 choco install xmake 설치 확인:\nxmake --version 2️⃣ 새로운 프로젝트 생성 # 📌 C 프로젝트 생성\nxmake create -l c myproject cd myproject 📌 C++ 프로젝트 생성\nxmake create -l c++ myproject cd myproject 3️⃣ 프로젝트 구조 # 생성된 프로젝트 폴더는 아래처럼 구성됩니다.\nmyproject/ ├── src/ │ ├── main.c # 메인 코드 ├── xmake.lua # 빌드 설정 파일 (Cargo.toml 같은 역할) 👉 xmake.lua 파일이 Cargo.toml 같은 역할을 합니다.\n4️⃣ 빌드 \u0026amp; 실행 # 📌 프로젝트 빌드\nxmake 📌 프로그램 실행\nxmake run 📌 디버그 빌드\nxmake f -m debug # Debug 모드 설정 xmake # 다시 빌드 xmake run # 실행 📌 릴리즈 빌드\nxmake f -m release # Release 모드 설정 xmake # 빌드 5️⃣ 코드 수정 (xmake.lua 설정) # 기본적으로 xmake.lua는 다음과 같이 생성됩니다.\nadd_rules(\u0026#34;mode.debug\u0026#34;, \u0026#34;mode.release\u0026#34;) target(\u0026#34;myproject\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) add_files(\u0026#34;src/*.c\u0026#34;) add_rules(\u0026quot;mode.debug\u0026quot;, \u0026quot;mode.release\u0026quot;) → 디버그 \u0026amp; 릴리즈 모드 지원 target(\u0026quot;myproject\u0026quot;) → 실행 파일 이름 set_kind(\u0026quot;binary\u0026quot;) → 실행 가능한 프로그램으로 빌드 add_files(\u0026quot;src/*.c\u0026quot;) → src/ 폴더 안의 .c 파일을 포함 📌 C++ 프로젝트로 변경하려면?\ntarget(\u0026#34;myproject\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) set_languages(\u0026#34;c++17\u0026#34;) -- C++17 설정 add_files(\u0026#34;src/*.cpp\u0026#34;) 6️⃣ 패키지(라이브러리) 관리 # Rust의 Cargo처럼 라이브러리를 쉽게 추가할 수 있습니다.\n📌 예제: OpenSSL 추가\nadd_requires(\u0026#34;openssl\u0026#34;) target(\u0026#34;myproject\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) add_files(\u0026#34;src/*.c\u0026#34;) add_packages(\u0026#34;openssl\u0026#34;) 📌 패키지 설치\nxmake require --info openssl 📌 패키지 목록 검색\nxmake repo --search zlib 7️⃣ 디버깅 # 📌 GDB/Lldb 디버깅\nxmake run -d 📌 VScode와 연동\nxmake project -k vsxmake 📌 CMake 프로젝트 변환\nxmake project -k cmake 🎯 XMake 사용 요약 # 기능 명령어 프로젝트 생성 xmake create -l c myproject 빌드 xmake 실행 xmake run 디버그 실행 xmake run -d 릴리즈 빌드 xmake f -m release \u0026amp;\u0026amp; xmake CMake 프로젝트로 변환 xmake project -k cmake VSCode 프로젝트로 변환 xmake project -k vsxmake 패키지 설치 xmake require --info \u0026lt;package\u0026gt; 🚀 결론: Cargo 같은 XMake! # ✔ 단순한 명령어 (xmake, xmake run)\n✔ C/C++ 패키지 관리 (add_requires(\u0026quot;openssl\u0026quot;))\n✔ 디버깅 (xmake run -d) \u0026amp; 크로스 플랫폼 지원\n👉 Rust의 Cargo처럼 쉽게 C 프로젝트를 관리하려면 XMake가 최고의 선택!\n필요한 추가 설정이 있으면 알려주세요! 😊\n"},{"id":38,"href":"/docs/docs/zed-editor-windows%EC%97%90-%EC%84%A4%EC%B9%98/","title":"Zed Editor Windows에 설치","section":"Docs","content":"# 설치 https://scoop.sh/#/apps?q=zed-nightly # 업데이트 scoop update zed-nightly "},{"id":39,"href":"/docs/docs/zshrc-%EC%84%A4%EC%A0%95/","title":"Zshrc 설정","section":"Docs","content":"# ~/.zshrc 설정 # 기존 테마 설정 # ZSH_THEME=\u0026#34;agnoster\u0026#34; # 테마 수정 ZSH_THEME=\u0026#34;agnoster\u0026#34; # 컴퓨터 이름 제거 prompt_context() { if [[ \u0026#34;$USER\u0026#34; != \u0026#34;$DEFAULT_USER\u0026#34; || -n \u0026#34;$SSH_CLIENT\u0026#34; ]]; then prompt_segment black default \u0026#34;%(!.%{%F{yellow}%}.)$USER\u0026#34; fi } "},{"id":40,"href":"/docs/docs/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%84%A3%EB%8A%94%EB%B2%95/","title":"마크다운 이미지 넣는법","section":"Docs","content":" 마크다운 이미지 넣는법 # ![bears](http://placebear.com/200/200) 결과\n"},{"id":41,"href":"/docs/docs/%EB%B0%9C%EB%8F%84%EB%A5%B4%ED%94%84-%EA%B5%90%EC%9C%A1/","title":"발도르프 교육","section":"Docs","content":" 발도르프 교육 # 발도르프 교육: 루돌프 슈타이너의 철학에서 시작된 대안 교육 # 발도르프(Waldorf)는 오스트리아의 철학자이자 교육자인 루돌프 슈타이너(Rudolf Steiner, 1861~1925)가 창시한 교육 사상 및 그 실천을 의미하며, 주로 발도르프 교육으로 알려져 있습니다. 이는 1919년 독일 슈투트가르트에서 처음 시작된 대안 교육의 한 형태로, 전 세계적으로 많은 학교와 유치원에서 채택하고 있습니다.\n발도르프 교육의 핵심은 인간에 대한 깊은 이해를 바탕으로, 아동의 지적, 감성적, 의지적 측면이 조화롭게 발달하도록 돕는 전인 교육을 지향하는 데 있습니다. 슈타이너는 인간이 7년 주기로 발달 단계를 거치며, 각 시기마다 고유한 특성과 필요를 가진다고 보았습니다. 따라서 발도르프 교육 과정은 이러한 발달 단계에 맞춰 세심하게 구성됩니다.\n발도르프 교육의 주요 특징은 다음과 같습니다:\n전인적 접근: 단순히 지식 전달에만 집중하는 것이 아니라, 아이들의 상상력, 창의력, 예술적 감각, 그리고 실천적 능력을 고루 발달시키는 것을 목표로 합니다. 발달 단계에 맞는 교육: 7년 주기(0-7세, 7-14세, 14-21세)로 아동의 발달 단계를 나누고, 각 시기에 맞는 교육 내용과 방법을 제공합니다. 예를 들어, 초기 유아기에는 모방과 놀이를 통한 학습을 강조하고, 초등학교 시기에는 예술과 감성을 통한 접근을 중시합니다. 예술 교육의 강조: 그림, 음악, 수공예, 오이리트미(움직임 예술) 등 다양한 예술 활동이 교육 과정의 중심을 이룹니다. 이를 통해 아이들은 세상을 풍부하게 경험하고 자신을 표현하는 법을 배웁니다. 자연과의 교감: 자연의 리듬과 순환을 중요하게 생각하며, 계절의 변화를 느끼고 자연물을 활용한 활동을 많이 합니다. 담임 교사의 역할: 초등학교 과정(1학년부터 8학년까지)에서는 한 명의 담임 교사가 아이들과 함께 성장하며 오랜 관계를 맺는 것을 중요하게 여깁니다. 경쟁 없는 교육: 시험이나 성적표를 통해 아이들을 줄 세우지 않고, 각자의 개성과 고유한 잠재력을 존중합니다. 아이들은 스스로 만든 공책을 통해 배움의 과정을 기록하고 결과물을 만듭니다. 인지학(Anthroposophy): 발도르프 교육의 철학적 바탕에는 슈타이너가 창시한 인지학이 있습니다. 이는 인간의 영적인 측면을 탐구하고, 우주와 인간의 관계를 이해하려는 사상 체계입니다. 한국에서의 발도르프 교육:\n한국에도 여러 발도르프 학교와 유치원이 운영되고 있으며, 대안 교육에 대한 관심이 높아지면서 점차 주목받고 있습니다. 발도르프 교육을 통해 아이들이 자유롭고 창의적인 주체로 성장하도록 돕는 것을 목표로 합니다.\n비판적 시각:\n한편, 발도르프 교육은 인지학의 다소 신비주의적인 측면과 일부 부모들의 백신 접종 거부 경향 등과 관련하여 비판적인 시각도 존재합니다.\n결론적으로 발도르프는 루돌프 슈타이너의 인간 이해를 바탕으로 아동의 전인적 성장을 목표로 하는 독특한 교육 철학이자 실천 방법이라고 할 수 있습니다.\n"},{"id":42,"href":"/docs/docs/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/","title":"알고리즘","section":"Docs","content":"분할정복\n"},{"id":43,"href":"/docs/docs/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-blog/","title":"프로젝트 Blog","section":"Docs","content":"색상 rgb(30,30,30), rgb(130,130,130), rgb(230,230,230)\n글자 font-weight: 300, 400, 700\n할 일: http3으로 업그레이드 cdn이 뭔지 알아보기 번들링 알아보기 캐싱 컨트롤 알아보기 마지막 수정 날짜를 보고 캐싱 파일 빠꾸 먹이기\n"},{"id":44,"href":"/docs/docs/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-kosta-2/","title":"프로젝트 Kosta 2","section":"Docs","content":"네, MQTT Publisher, Broker, Subscriber, 그리고 API Server를 연동하는 전체적인 예제를 보여드리겠습니다.\n이 예제는 다음 구성 요소들을 포함합니다:\nMQTT Broker: Mosquitto (가장 대중적인 오픈소스 MQTT Broker) MQTT Publisher: Python 스크립트 (임베디드 장치 역할) MQTT Subscriber (API Server 연동 로직): Python 스크립트 (Broker에서 메시지를 받아 API Server로 전달) API Server: Go Gin 프레임워크 (이전 예제에서 사용한 API 서버) 1단계: Mosquitto MQTT Broker 설치 및 실행 # Mosquitto는 MQTT 연동을 위한 필수 요소입니다.\n설치: Ubuntu/Debian: sudo apt update \u0026amp;\u0026amp; sudo apt install mosquitto mosquitto-clients macOS (Homebrew): brew install mosquitto Windows: Mosquitto 공식 웹사이트에서 설치 파일을 다운로드합니다. 실행: 대부분의 OS에서 설치 후 자동으로 서비스로 실행됩니다. 수동 실행: mosquitto -c /etc/mosquitto/mosquitto.conf (설정 파일 경로는 OS마다 다를 수 있습니다) 기본 포트: 1883 Broker가 실행되는지 확인하는 가장 쉬운 방법은 Mosquitto 클라이언트를 사용하여 구독해보는 것입니다: 새로운 터미널을 열고 다음 명령어를 실행합니다:\nmosquitto_sub -h localhost -p 1883 -t \u0026#34;sensor/temperature\u0026#34; 이제 이 터미널은 sensor/temperature 토픽으로 오는 메시지를 기다리게 됩니다.\n2단계: Go API Server (이전 예제와 동일) # 이전 질문에서 제공된 Go API 서버 코드를 그대로 사용합니다. 이 서버는 /api/sensor_data와 같은 엔드포인트를 제공하여 센서 데이터를 받을 것입니다.\nAPI Server 코드 수정 (New Endpoint for Sensor Data):\nmain.go 파일에 SensorData 모델과 해당 createHandler를 추가해야 합니다.\n먼저, SensorData 구조체를 정의합니다:\n// main.go 파일 내 type SensorData struct { gorm.Model SensorID string `gorm:\u0026#34;type:varchar(50);not null\u0026#34;` Temperature float64 `gorm:\u0026#34;not null\u0026#34;` Humidity float64 `gorm:\u0026#34;not null\u0026#34;` Timestamp time.Time `gorm:\u0026#34;not null\u0026#34;` } 이제 initDB 함수에서 SensorData를 AutoMigrate에 추가합니다:\nfunc initDB() *gorm.DB { dsn := getDSN() db, err := gorm.Open(mysql.Open(dsn), \u0026amp;gorm.Config{}) if err != nil { log.Fatalf(\u0026#34;데이터베이스 연결 실패: %v\u0026#34;, err) } err = db.AutoMigrate( \u0026amp;Product{}, \u0026amp;Zone{}, \u0026amp;Vehicle{}, \u0026amp;OperationRecord{}, \u0026amp;OperationProduct{}, \u0026amp;SensorData{}, // --- 이 줄 추가 --- ) if err != nil { log.Fatalf(\u0026#34;데이터베이스 마이그레이션 실패: %v\u0026#34;, err) } log.Println(\u0026#34;데이터베이스 연결 및 마이그레이션 성공\u0026#34;) return db } 마지막으로 main 함수에서 SensorData 엔드포인트를 등록합니다:\nfunc main() { db := initDB() router := gin.Default() api := router.Group(\u0026#34;/api\u0026#34;) { // ... 기존 라우터들 ... // Sensor Data Endpoint api.POST(\u0026#34;/sensor_data\u0026#34;, createHandler[SensorData](db)) // --- 이 줄 추가 --- api.GET(\u0026#34;/sensor_data\u0026#34;, getAllHandler[SensorData](db)) // --- 이 줄 추가 --- } port := \u0026#34;:8080\u0026#34; log.Printf(\u0026#34;서버가 %s 포트에서 실행 중...\u0026#34;, port) if err := router.Run(port); err != nil { log.Fatalf(\u0026#34;서버 실행 실패: %v\u0026#34;, err) } } Go API 서버를 실행합니다:\ngo run main.go 3단계: MQTT Publisher (Python) - 임베디드 장치 역할 # 이 스크립트는 가상의 센서 데이터를 생성하여 MQTT Broker로 발행합니다.\n필요한 라이브러리 설치: pip install paho-mqtt\nmqtt_publisher.py:\nimport paho.mqtt.client as mqtt import time import json import random # MQTT Broker 설정 BROKER_ADDRESS = \u0026#34;localhost\u0026#34; BROKER_PORT = 1883 TOPIC = \u0026#34;sensor/temperature\u0026#34; # MQTT 클라이언트 초기화 client = mqtt.Client() def on_connect(client, userdata, flags, rc): if rc == 0: print(\u0026#34;MQTT Broker에 연결되었습니다!\u0026#34;) else: print(f\u0026#34;연결 실패, 에러 코드: {rc}\u0026#34;) client.on_connect = on_connect # 브로커에 연결 print(f\u0026#34;MQTT Broker ({BROKER_ADDRESS}:{BROKER_PORT})에 연결 시도...\u0026#34;) client.connect(BROKER_ADDRESS, BROKER_PORT, 60) client.loop_start() # 백그라운드 스레드에서 네트워크 루프 시작 try: sensor_id = \u0026#34;ESP32_001\u0026#34; print(f\u0026#34;센서 {sensor_id}로부터 데이터 발행 시작...\u0026#34;) while True: temperature = round(random.uniform(20.0, 30.0), 2) # 20.0 ~ 30.0 랜덤 온도 humidity = round(random.uniform(40.0, 60.0), 2) # 40.0 ~ 60.0 랜덤 습도 timestamp = int(time.time() * 1000) # 밀리초 단위 타임스탬프 payload = { \u0026#34;sensorID\u0026#34;: sensor_id, \u0026#34;temperature\u0026#34;: temperature, \u0026#34;humidity\u0026#34;: humidity, \u0026#34;timestamp\u0026#34;: timestamp } # 메시지 발행 client.publish(TOPIC, json.dumps(payload)) print(f\u0026#34;\u0026#39;{TOPIC}\u0026#39; 토픽 발행: {json.dumps(payload)}\u0026#34;) time.sleep(5) # 5초마다 데이터 발행 except KeyboardInterrupt: print(\u0026#34;발행 중단.\u0026#34;) finally: client.loop_stop() # 네트워크 루프 중지 client.disconnect() print(\u0026#34;MQTT 연결 해제.\u0026#34;) python mqtt_publisher.py 실행. Mosquitto 클라이언트(mosquitto_sub) 터미널에서 발행되는 메시지를 확인할 수 있을 겁니다.\n4단계: MQTT Subscriber (Python) - API Server 연동 로직 역할 # 이 스크립트는 MQTT Broker로부터 메시지를 구독하고, 수신된 메시지를 Go API 서버로 HTTP POST 요청을 통해 전달합니다.\n필요한 라이브러리 설치: pip install paho-mqtt requests\nmqtt_api_integrator.py:\nimport paho.mqtt.client as mqtt import requests import json import datetime # MQTT Broker 설정 BROKER_ADDRESS = \u0026#34;localhost\u0026#34; BROKER_PORT = 1883 TOPIC = \u0026#34;sensor/temperature\u0026#34; # API Server 설정 API_SERVER_URL = \u0026#34;http://localhost:8080/api/sensor_data\u0026#34; # MQTT 클라이언트 초기화 client = mqtt.Client() def on_connect(client, userdata, flags, rc): if rc == 0: print(\u0026#34;MQTT Broker에 연결되었습니다!\u0026#34;) client.subscribe(TOPIC) # 연결 성공 시 토픽 구독 print(f\u0026#34;토픽 \u0026#39;{TOPIC}\u0026#39; 구독 시작.\u0026#34;) else: print(f\u0026#34;연결 실패, 에러 코드: {rc}\u0026#34;) def on_message(client, userdata, msg): print(f\u0026#34;메시지 수신 - 토픽: {msg.topic}, 페이로드: {msg.payload.decode()}\u0026#34;) try: data = json.loads(msg.payload.decode()) # API 서버로 보낼 데이터 형식 변환 (Go 모델에 맞게) # Go의 time.Time은 ISO 8601 형식 문자열을 잘 처리합니다. # Python timestamp는 초 단위이므로, Go의 time.Time으로 변환하기 쉽도록 ISO 8601 문자열로 변환하는 것이 일반적입니다. # 고의 float64, Go의 string에 맞게. # timestamp가 밀리초 단위로 가정하고 초 단위로 변환 후 datetime 객체 생성 if \u0026#39;timestamp\u0026#39; in data: dt_object = datetime.datetime.fromtimestamp(data[\u0026#39;timestamp\u0026#39;] / 1000.0) data[\u0026#39;timestamp\u0026#39;] = dt_object.isoformat() + \u0026#34;Z\u0026#34; # GORM이 UTC 시간을 기대하므로 \u0026#39;Z\u0026#39; 추가 else: data[\u0026#39;timestamp\u0026#39;] = datetime.datetime.utcnow().isoformat() + \u0026#34;Z\u0026#34; # 필드 이름 매핑 api_payload = { \u0026#34;SensorID\u0026#34;: data.get(\u0026#34;sensorID\u0026#34;), \u0026#34;Temperature\u0026#34;: data.get(\u0026#34;temperature\u0026#34;), \u0026#34;Humidity\u0026#34;: data.get(\u0026#34;humidity\u0026#34;), \u0026#34;Timestamp\u0026#34;: data.get(\u0026#34;timestamp\u0026#34;) } # API 서버로 POST 요청 보내기 print(f\u0026#34;API 서버로 POST 요청 전송: {json.dumps(api_payload)}\u0026#34;) response = requests.post(API_SERVER_URL, json=api_payload) if response.status_code == 201: print(\u0026#34;데이터가 API 서버에 성공적으로 전송되었습니다.\u0026#34;) # print(response.json()) # API 서버 응답 확인 else: print(f\u0026#34;API 서버 전송 실패. 상태 코드: {response.status_code}, 응답: {response.text}\u0026#34;) except json.JSONDecodeError: print(\u0026#34;JSON 디코딩 오류: 유효하지 않은 페이로드입니다.\u0026#34;) except requests.exceptions.RequestException as e: print(f\u0026#34;API 서버 요청 중 오류 발생: {e}\u0026#34;) except Exception as e: print(f\u0026#34;예상치 못한 오류 발생: {e}\u0026#34;) client.on_connect = on_connect client.on_message = on_message # 브로커에 연결 print(f\u0026#34;MQTT Broker ({BROKER_ADDRESS}:{BROKER_PORT})에 연결 시도...\u0026#34;) client.connect(BROKER_ADDRESS, BROKER_PORT, 60) # 네트워크 루프를 무한정 실행하여 메시지 대기 client.loop_forever() python mqtt_api_integrator.py 실행.\n전체 시스템 동작 시나리오: # Mosquitto Broker가 실행됩니다 (mosquitto). Go API Server가 실행됩니다 (go run main.go). /api/sensor_data 엔드포인트를 통해 센서 데이터를 받을 준비를 합니다. MQTT Publisher (mqtt_publisher.py)가 실행됩니다. 5초마다 가상의 센서 데이터를 JSON 형식으로 만들어 sensor/temperature 토픽으로 MQTT Broker에 발행합니다. MQTT Subscriber (API Integrator) (mqtt_api_integrator.py)가 실행됩니다. sensor/temperature 토픽을 구독하여 MQTT Broker로부터 Publisher가 보낸 메시지를 실시간으로 수신합니다. Subscriber는 수신된 MQTT 메시지(JSON 페이로드)를 파싱하고, Go API 서버의 SensorData 모델에 맞는 형식으로 데이터를 준비합니다. Subscriber는 준비된 데이터를 Go API 서버의 /api/sensor_data 엔드포인트로 HTTP POST 요청을 보냅니다. Go API 서버는 이 POST 요청을 받아 데이터를 데이터베이스에 저장합니다. 저장 성공 시 201 Created 응답을 Subscriber에게 보냅니다. 이제 Postman이나 cURL을 사용하여 Go API 서버의 /api/sensor_data 엔드포인트에 GET 요청을 보내면 데이터베이스에 저장된 센서 데이터 목록을 확인할 수 있습니다:\ncurl http://localhost:8080/api/sensor_data 이 예제는 임베디드 장치와 클라우드/API 서버 간의 MQTT 기반 데이터 파이프라인의 기본적인 형태를 보여줍니다. 실제 프로덕션 환경에서는 보안(TLS/SSL, 인증), 에러 처리, 재시도 로직, 고가용성 등을 위한 더 많은 고려가 필요합니다.\n"},{"id":45,"href":"/docs/docs/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-mtc/","title":"프로젝트 Mtc","section":"Docs","content":" 폰트 사이즈 # 64 56 48 40 36 32 28 24 20 18 16 14\n간격 # 16px 32px 64px\n색상 # efefef bfbfbf\n"},{"id":46,"href":"/docs/docs/alacritty---alacritty.toml/","title":"alacritty.toml","section":"Docs","content":"alacritty.toml\n# ~/.config/alacritty/alacritty.toml # windows [terminal] [terminal.shell] program = \u0026#34;wsl\u0026#34; args = [\u0026#34;~\u0026#34;,] [font] size = 12.0 [font.normal] family = \u0026#34;RobotoMono Nerd Font\u0026#34; style = \u0026#34;Regular\u0026#34; [[keyboard.bindings]] key = \u0026#34;Space\u0026#34; mods = \u0026#34;Control\u0026#34; chars = \u0026#34;\\u0000\u0026#34; "},{"id":47,"href":"/docs/docs/cmakelists.txt/","title":"CMakeLists.txt","section":"Docs","content":"cmake_minimum_required(VERSION 3.10) project(MyProject) file(GLOB_RECURSE SOURCES \u0026#34;src/*.cpp\u0026#34; \u0026#34;src/*.c\u0026#34; \u0026#34;src/*.h\u0026#34; ) add_executable(${PROJECT_NAME} ${SOURCES}) include_directories( src/header ) target_link_libraries(${PROJECT_NAME} m) "},{"id":48,"href":"/docs/docs/neovim-config---keymaps.lua/","title":"keymaps.lua","section":"Docs","content":"-- Keymaps are automatically loaded on the VeryLazy event -- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua -- Add any additional keymaps here -- telescope local builtin = require(\u0026#34;telescope.builtin\u0026#34;) vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;ff\u0026#34;, builtin.find_files, { desc = \u0026#34;Telescope find files\u0026#34; }) vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;fg\u0026#34;, builtin.live_grep, { desc = \u0026#34;Telescope live grep\u0026#34; }) vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;fb\u0026#34;, builtin.buffers, { desc = \u0026#34;Telescope buffers\u0026#34; }) vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;fh\u0026#34;, builtin.help_tags, { desc = \u0026#34;Telescope help tags\u0026#34; }) "},{"id":49,"href":"/docs/docs/nginx---letsencrypt-%EC%9E%90%EB%8F%99%EA%B0%B1%EC%8B%A0/","title":"Letsencrypt 자동갱신","section":"Docs","content":"cd /bin sudo vim letsencrypt.sh #!/bin/sh sudo service nginx stop sudo certbot renew \u0026gt; ~/server/certbot/le_renew.log sudo fuser -k 80/tcp sudo service nginx start sudo chmod +x letsencrypt.sh sudo crontab -e 30 4 * * 0 letsencrypt.sh sudo service cron start 참고사이트 # https://www.owl-dev.me/blog/42 https://devlog.jwgo.kr/2019/04/16/how-to-lets-encrypt-ssl-renew/\n"},{"id":50,"href":"/docs/docs/oracle-%EC%97%B0%EA%B2%B0/","title":"Oracle 연결","section":"Docs","content":"ssh -i /Oracle/Project/ssh-key-2023-07-24.key ubuntu@158.180.88.241\n"},{"id":51,"href":"/docs/docs/docker-ubuntu%EC%97%90-%EC%84%A4%EC%B9%98/","title":"Ubuntu에 설치","section":"Docs","content":"# Add Docker\u0026#39;s official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;${UBUNTU_CODENAME:-$VERSION_CODENAME}\u0026#34;) stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin sudo docker run hello-world "},{"id":52,"href":"/docs/docs/xmake.lua/","title":"xmake.lua","section":"Docs","content":"-- 프로젝트 기본 설정 set_project(\u0026#34;MyProject\u0026#34;) set_version(\u0026#34;0.0.0\u0026#34;) set_languages(\u0026#34;c99\u0026#34;) -- 공통 라이브러리 (코드 중복 방지) target(\u0026#34;common_lib\u0026#34;) set_kind(\u0026#34;static\u0026#34;) add_files(\u0026#34;include/*/*.c\u0026#34;) add_includedirs(\u0026#34;include\u0026#34;) add_headerfiles(\u0026#34;include/*/*.h\u0026#34;) -- 메인 애플리케이션 target(\u0026#34;main\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) add_files(\u0026#34;src/*.c\u0026#34;) add_includedirs(\u0026#34;src\u0026#34;, \u0026#34;include\u0026#34;) add_deps(\u0026#34;common_lib\u0026#34;) -- 공통 라이브러리 의존성 추가 -- 테스트 타겟 target(\u0026#34;test\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) add_files(\u0026#34;tests/*.c\u0026#34;) add_includedirs(\u0026#34;tests\u0026#34;, \u0026#34;include\u0026#34;) add_deps(\u0026#34;common_lib\u0026#34;) -- 공통 라이브러리 의존성 추가 add_defines(\u0026#34;TESTING\u0026#34;) -- 테스트 전용 매크로 -- 필요한 경우에만 특별한 실행 설정 추가 -- on_run(function(target) -- os.execv(target:targetfile(), {\u0026#34;--verbose\u0026#34;}) -- 예: 특별한 인자 전달 -- end) "},{"id":53,"href":"/docs/docs/latex-%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EB%AC%B8%EB%B2%95/","title":"기호 모음","section":"Docs","content":"$$ ... % 여러줄 $$ $...$ % 한 줄 $x \\notin A$ % 한 줄 $x \\notin A$\n$\\therefore$ % 결론적으로 $\\therefore$\n$\\because$ % 왜냐하면 $\\because$\n$\\quad$ % 공백 $\\quad$\n$\\left{ \\cdots \\right}$ % 중괄호 $\\left[ \\cdots \\right]$ % 대괄호 $\\left\\vert \\cdots \\right\\vert$ % 바, \\vert, \\mid, \\lvert, \\rvert $\\left{ \\cdots \\right}$ $\\left[ \\cdots \\right]$ $\\left\\vert \\cdots \\right\\vert$\n$\\cdots$ % 수평 ... $\\vdots$ % 수직 ... $\\cdots$ $\\vdots$\n% 여러 줄 수식 정렬 $$ \\begin{array}{\bl} % 왼쪽 정렬 \\end{array} $$ $$ \\begin{array}{r} % 오른쪽 정렬 \\end{array} $$ $$ \\begin{array}{c} % 중앙 정렬 \\end{array} $$ $$ \\begin{aligned} % 오른쪽 정렬, 기호 부등호 정렬 시 유용 \\end{aligned} $$ % 사용 예 $$ \\left\\{ \\begin{array}{\b\bl} a_{11} X_{1} + a_{12} X_{2} + \\cdots + a_{1n} X_{n} = b_{1} \\\\ a_{21} X_{1} + a_{22} X_{2} + \\cdots + a_{2n} X_{n} = b_{2} \\\\ \\vdots \\\\ a_{n1} X_{1} + a_{n2} X_{2} + \\cdots + a_{nn} X_{n} = b_{n} \\end{array} \\right\\} $$ $$ \\left{ \\begin{array}{c} a_{11} X_{1} + a_{12} X_{2} + \\cdots + a_{1n} X_{n} = b_{1} \\ a_{21} X_{1} + a_{22} X_{2} + \\cdots + a_{2n} X_{n} = b_{2} \\ \\vdots \\ a_{n1} X_{1} + a_{n2} X_{2} + \\cdots + a_{nn} X_{n} = b_{n} \\end{array} \\right} $$\n% 사용 예 $$ x_{j} = \\left\\vert \\begin{array}{c} a_{11} \\quad a_{12} \\quad \\cdots \\quad a_{1j-1} \\quad b_{1} \\quad a_{1j+1} \\cdots \\quad a_{1n} \\\\ a_{21} \\quad a_{22} \\quad \\cdots \\quad a_{2j-1} \\quad b_{2} \\quad a_{2j+1} \\cdots \\quad a_{2n} \\\\ \\vdots \\\\ a_{n1} \\quad a_{n2} \\quad \\cdots \\quad a_{nj-1} \\quad b_{n} \\quad a_{nj+1} \\cdots \\quad a_{nn} \\\\ \\end{array} \\right\\vert $$ $$ x_{j} = \\left\\vert \\begin{array}{c} a_{11} \\quad a_{12} \\quad \\cdots \\quad a_{1j-1} \\quad b_{1} \\quad a_{1j+1} \\cdots \\quad a_{1n} \\ a_{21} \\quad a_{22} \\quad \\cdots \\quad a_{2j-1} \\quad b_{2} \\quad a_{2j+1} \\cdots \\quad a_{2n} \\ \\vdots \\ a_{n1} \\quad a_{n2} \\quad \\cdots \\quad a_{nj-1} \\quad b_{n} \\quad a_{nj+1} \\cdots \\quad a_{nn} \\ \\end{array} \\right\\vert (단, j = 1,2, \\cdots, n) $$\n$\\epsilon$ $\\epsilon$\n$|\\alpha - \\alpha\u0026#39;|$ $|\\alpha - \\alpha\u0026rsquo;|$\n$\\frac{a}{b}$ $\\frac{a}{b}$\n서로 다른 두 값 $\\alpha, \\alpha\u0026rsquo;$이 수열 ${a_n}$의 극한값이라고 가정하자. 그렇다면 임의의 양수 $\\epsilon$에 대하여 $|\\alpha - \\alpha\u0026rsquo;| \u0026gt; \\epsilon$이고 극한값의 정의에 따라 $n \u0026gt; N_1$에 대해 $|a_n - \\alpha| \u0026lt; \\frac{\\epsilon}{2}$을 만족하는 $N_1$이 존재하고, $n \u0026gt; N_2$에 대해 $|a_n - \\alpha\u0026rsquo;| \u0026lt; \\frac{\\epsilon}{2}$을 만족하는 $N_2$가 존재한다. 그렇다면 $n \u0026gt; max{N1, N2}$에 대해 $|\\alpha - \\alpha\u0026rsquo;| \\leq |\\alpha - \\alpha_n| + |a_n - \\alpha\u0026rsquo;| \u0026lt; \\epsilon$이 되어 $|\\alpha - \\alpha\u0026rsquo;| \u0026gt; \\epsilon$과 모순이다. 따라서 수렴하는 수열의 극한값은 유일하다.\n$\\to$ $\\rightarrow$\n"},{"id":54,"href":"/docs/docs/sql-lite-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95/","title":"사용 방법","section":"Docs","content":" 초기 설정 # 설치 # brew install sqlite3 실행 # sqlite3 mydb.db SQLite Shell 명령어 # .tables # .tables person .schema # .schema person .exit # .exit .backup # .backup main b_mydb.db SQL # DDL (Data Definition Language: 데이터 정의 언어) # TABLE # CREATE TABLE # CREATE TABLE person ( id INTEGER NOT NULL, name TEXT NOT NULL, age INTEGER, PRIMARY KEY (id AUTOINCREMENT) ); ALTER TABLE # ALTER TABLE person ADD COLUMN salary INTEGER NOT NULL; DROP TABLE # DROP TABLE person; VIEW # CREATE VIEW # CREATE VIEW name_person AS SELECT name FROM person; DROP VIEW # INDEX # 인덱스는 데이터를 빠르게 찾도록 도와주는 목차 같은 구조입니다. 인덱스로 검색하면 전체 데이터를 다 보지 않고 원하는 데이터를 바로 찾아가기 때문에 훨씬 빠릅니다. 단, 인덱스는 검색은 빠르게 하지만 삽입/갱신 시 성능에 약간의 영향을 줄 수 있으니 꼭 필요한 컬럼에만 사용하는 게 좋아요. CREATE INDEX # CREATE INDEX index_person ON person(name); DROP INDEX # DML (Data Manipulation Language: 데이터 조작 언어) # SELECT # SELECT * FROM person; INSERT INTO # INSERT INTO person (name, age) VALUES (\u0026#39;사원1\u0026#39;, 28); UPDATE # UPDATE person SET name = \u0026#39;사원2\u0026#39; WHERE name = \u0026#39;사원1\u0026#39;; DELETE # DELETE FROM person; WHERE # SELECT * FROM person WHERE name = \u0026#39;사원1\u0026#39;; SELECT * FROM person WHERE name IS NOT NULL; ORDER BY # SELECT * FROM person ORDER BY age; DESK # SELECT * FROM person ORDER BY age DESC; LIKE # SELECT * FROM person WHERE name LIKE \u0026#39;사원%\u0026#39; AS # SELECT id AS \u0026#39;사원 번호\u0026#39;, name AS \u0026#39;사원 이름\u0026#39;, FROM person; -- | 사원 번호 | 사원 이름 | -- | 1 | 사원1 | -- | 2 | 사원2 | SELECT id \u0026#39;사원 번호\u0026#39;, name \u0026#39;사원 이름\u0026#39;, FROM person; CASE # SELECT name, salary, CASE WHEN salary \u0026lt; 3000000 THEN \u0026#39;신입\u0026#39; WHEN salary \u0026gt;= 3000000 AND salary \u0026lt; 4000000 THEN \u0026#39;사원\u0026#39; WHEN salary \u0026gt;= 4000000 AND salary \u0026lt; 5000000 THEN \u0026#39;대리\u0026#39; WHEN salary \u0026gt;= 5000000 AND salary \u0026lt; 7000000 THEN \u0026#39;과장\u0026#39; ELSE \u0026#39;임원\u0026#39; END AS position FROM person; round() # SELECT round(12.34567, 2) -- 12.34 substr() # SELECT substr(\u0026#39;abcdefg\u0026#39;, 2); -- bcdefg SELECT substr(\u0026#39;abcdefg\u0026#39;, 3, 4); -- cdef strftime() # SELECT strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;, \u0026#39;now\u0026#39;, \u0026#39;localtime\u0026#39;); 기타 # PRAGMA # PRAGMA table_info(person); EXPLAIN QUERY PLAN # -- 이렇게 입력하면 SQLite가 어떻게 검색할지를 알려줘요. EXPLAIN QUERY PLAN SELECT * FROM person WHERE name = \u0026#39;사원1\u0026#39;; "},{"id":55,"href":"/docs/docs/%EC%9E%90%EA%B2%A9%EC%A6%9D-%EB%AA%A9%EB%A1%9D/","title":"자격증 목록","section":"Docs","content":"** 추천 ** 정보처리기사 SQLD OCJP 리눅스마스터 2급 PC정비사 2급\n국내 IT 자격증 정리표\n분야 자격증명 설명 주요 학습 내용 학습 방법 실무 활용성 소프트웨어 개발 정보처리기사 IT 전반의 기본 개념과 실무 능력을 평가 데이터베이스, 네트워크, 알고리즘, 소프트웨어 공학 기출 문제 풀이, 개념 정리, 실습 프로젝트 SI 개발자 필수, IT 기업 취업 시 우대 소프트웨어 개발 정보처리산업기사 정보처리기사보다 난이도가 낮고 실무 중심 프로그래밍, 데이터베이스, 시스템 분석 기출 문제 풀이, 실무 프로젝트 진행 중소기업 IT 개발자, 공공기관 취업 시 가산점 데이터베이스 SQLD (SQL Developer) SQL 기본 개념 및 데이터 분석 능력을 검증 SQL 기본 문법, 조인, 인덱스, 서브쿼리 SQL 문제 풀이, 데이터베이스 실습 데이터 분석, 백엔드 개발, DB 최적화 데이터베이스 SQLP (SQL Professional) SQLD보다 심화된 DB 설계 및 최적화 과정 대용량 데이터 처리, 실행 계획 분석, 튜닝 기법 SQL 최적화 연습, 인덱스 및 성능 튜닝 학습 데이터베이스 관리자(DBA), 데이터 엔지니어 데이터 분석 빅데이터분석기사 빅데이터 처리 및 분석 능력을 검증 데이터 수집, 정제, 분석, 시각화 기법 데이터 분석 프로젝트 진행, Python 및 R 활용 데이터 사이언스, 머신러닝, AI 데이터 분석 ADsP (데이터분석 준전문가) 데이터 분석 기초 개념 및 활용 능력 평가 데이터 통계, 분석 기법, 머신러닝 개요 기출 문제 풀이, Python 데이터 분석 실습 데이터 분석 입문, 마케팅, 기획 데이터 분석 ADP (데이터분석 전문가) ADsP 상위 단계, 빅데이터 및 고급 분석 기법 통계, 머신러닝, 데이터 마이닝, 딥러닝 Python, R 활용 프로젝트, 알고리즘 연습 데이터 사이언스, 금융권, 연구소 네트워크 네트워크관리사 2급 네트워크 기초 개념 및 실무 적용 능력 평가 TCP/IP, 라우팅, 방화벽 설정, 무선 네트워크 Packet Tracer 실습, 네트워크 구축 연습 네트워크 관리자, 보안 엔지니어 네트워크 네트워크관리사 1급 네트워크관리사 2급 상위 자격증, 고급 네트워크 기술 평가 고급 라우팅, 네트워크 보안, 트래픽 관리 실무 네트워크 환경 구성, 보안 테스트 실습 IT 인프라 관리자, 네트워크 엔지니어 보안 정보보안기사 국내 보안 전문가 인증 자격증 네트워크 보안, 암호화, 해킹 및 방어 기법 보안 이론 학습, 모의 해킹 실습 보안 엔지니어, 침해 대응 전문가 보안 정보보안산업기사 정보보안기사보다 낮은 난이도, 실무 중심 보안 위협 분석, 시스템 보안, 네트워크 보안 보안 실습, 기본 해킹 및 대응 기법 학습 보안 관련 기업 취업, 보안 운영 관리 운영체제 리눅스마스터 2급 리눅스 운영체제 기초 및 시스템 관리 리눅스 명령어, 파일 시스템, 사용자 관리 가상 환경에서 리눅스 실습, 기출 문제 풀이 서버 관리자, 시스템 엔지니어 운영체제 리눅스마스터 1급 리눅스 서버 운영 및 보안 관리 네트워크 설정, 서버 구축, 방화벽 설정 리눅스 서버 구축 실습, 네트워크 관리 학습 리눅스 기반 시스템 관리자, 클라우드 엔지니어 국제 IT 자격증 정리표\n분야 자격증명 설명 주요 학습 내용 학습 방법 실무 활용성 프로그래밍 OCJP (Oracle Certified Java Programmer) Java 프로그래밍 능력 검증 Java 문법, 객체지향 개념, 예외처리 Java 코딩 실습, 알고리즘 문제 풀이 Java 개발자, 웹/모바일 개발 클라우드 AWS Certified Solutions Architect AWS 클라우드 설계 및 운영 인증 AWS 서비스, 클라우드 보안, 비용 최적화 AWS 실습 계정 활용, 아키텍처 설계 연습 클라우드 엔지니어, DevOps 클라우드 Azure Fundamentals Microsoft Azure의 기초 개념 검증 클라우드 컴퓨팅 개념, Azure 핵심 서비스 Azure 무료 계정 활용, 실습 진행 기업의 Azure 도입 및 운영 데이터베이스 OCP (Oracle Certified Professional) Oracle 데이터베이스 관리 능력 인증 DB 설치, 성능 튜닝, 백업 및 복구 Oracle DB 실습, SQL 최적화 연습 데이터베이스 관리자(DBA) 보안 CISSP (Certified Information Systems Security Professional) 글로벌 보안 전문가 자격증 보안 아키텍처, 보안 정책, 리스크 관리 보안 관련 사례 연구, 실습 기업 정보보안 정책 수립, IT 감사 보안 CEH (Certified Ethical Hacker) 윤리적 해킹 및 보안 테스트 기술 인증 침투 테스트, 네트워크 해킹, 시스템 방어 기법 모의 해킹 실습, 보안 취약점 분석 보안 엔지니어, 침해 대응 전문가 네트워크 CCNA (Cisco Certified Network Associate) 네트워크 기본 개념과 장비 설정 능력 인증 TCP/IP, 라우팅, 스위칭, 방화벽 설정 네트워크 실습 (Packet Tracer), 기출 문제 풀이 기업 네트워크 설계 및 운영 DevOps Docker Certified Associate Docker 컨테이너 기술 검증 컨테이너 개념, 이미지 관리, 네트워크 설정 Docker 실습, Kubernetes 연동 학습 DevOps 환경 구축, CI/CD 자동화 DevOps CKA (Certified Kubernetes Administrator) Kubernetes 클러스터 운영 인증 클러스터 관리, 서비스 배포, 모니터링 Kubernetes 실습, Helm, CI/CD 학습 컨테이너 기반 애플리케이션 운영 참고: https://velog.io/@donghyuk65/%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EC%B7%A8%EB%93%9D-%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EC%9E%90%EA%B2%A9%EC%A6%9D\n"}]