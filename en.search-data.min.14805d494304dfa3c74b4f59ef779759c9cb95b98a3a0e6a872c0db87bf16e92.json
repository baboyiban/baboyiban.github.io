[{"id":0,"href":"/docs/example/","title":"Example Site","section":"Docs","content":" Introduction # Ferre hinnitibus erat accipitrem dixi Troiae tollens # Lorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\nPedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret Est simul fameque tauri qua ad # Locum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol # Nec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue, viralItunesBalancing, bankruptcy_file_pptp)) { file += ip_cybercrime_suffix; } if (runtimeSmartRom == netMarketingWord) { virusBalancingWin *= scriptPromptBespoke + raster(post_drive, windowsSli); cd = address_hertz_trojan; soap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui); } else { megabyte.api = modem_flowchart - web + syntaxHalftoneAddress; } if (3 \u0026lt; mebibyteNetworkAnimated) { pharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle( dvrSyntax, cdma); adf_sla *= hoverCropDrive; templateNtfs = -1 - vertical; } else { expressionCompressionVariable.bootMulti = white_eup_javascript( table_suffix); guidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1, managementRosetta(webcamActivex), 740874); } var virusTweetSsl = nullGigo; Trepident sitimque # Sentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"},{"id":1,"href":"/docs/example/collapsed/3rd-level/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":" Caput vino delphine in tamen vias # Cognita laeva illo fracta # Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nTe at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere # Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\nPhrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\nLimitibus misere sit # Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua # Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta # Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":2,"href":"/docs/example/table-of-contents/with-toc/","title":"With ToC","section":"Table of Contents","content":" Caput vino delphine in tamen vias # Cognita laeva illo fracta # Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nTe at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit Natus quaerere # Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\nPhrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\nLimitibus misere sit # Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua # Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta # Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"},{"id":3,"href":"/docs/example/collapsed/3rd-level/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":" At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius # Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\nRemansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae # Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\nBaculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":4,"href":"/docs/example/table-of-contents/without-toc/","title":"Without ToC","section":"Table of Contents","content":" At me ipso nepotibus nunc celebratior genus # Tanto oblite # Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius # Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\nRemansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae # Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\nBaculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"},{"id":5,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":" Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions # There are a few concepts that you need to understand before creating a theme.\nSkins # Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page # The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File # When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent # Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter # The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown # Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files # Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template # A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template # A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template # A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site # Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site # Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site # Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme # Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton # Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme # Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site # Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page # Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static # Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle # When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory # When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option # Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload # Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands # Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template # The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page # Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload # Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page # \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts # Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates # In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage # The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts # We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File # $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content # The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing # We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages # Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates # If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials # In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials # The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials # $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts # It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template # We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself # DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":6,"href":"/posts/migrate-from-jekyll/","title":"Migrating from Jekyll","section":"Blog","content":" Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file # Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site # The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. } Convert Jekyll templates to Hugo templates # That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes # Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation # As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; Usage # I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}} As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches # Fix content # Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up # You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff # Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":7,"href":"/docs/example/collapsed/3rd-level/table-of-contents/","title":"Table of Contents","section":"3rd Level","content":" Ubi loqui # Mentem genus facietque salire tempus bracchia # Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice # Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); Placabilis coactis nega ingemuit ignoscat nimia non # Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; } Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":8,"href":"/docs/example/table-of-contents/","title":"Table of Contents","section":"Example Site","content":" Ubi loqui # Mentem genus facietque salire tempus bracchia # Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice # Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); Placabilis coactis nega ingemuit ignoscat nimia non # Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; } Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":9,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates # Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax # Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables # Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions # Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }} Includes # When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic # Go templates provide the most basic iteration and conditional logic.\nIteration # Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals # If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes # One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot) # The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters # Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters # In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }} Using Site (config) Parameters # In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":10,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":" Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site # Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun # The best way to learn something is to play with it.\n"},{"id":11,"href":"/docs/book/mqtt/%EA%B7%BC%EB%8D%B0-%EB%B3%B4%ED%86%B5-%EB%9D%BC%EC%A6%88%EB%B2%A0%EB%A6%AC%ED%8C%8C%EC%9D%B4%EC%99%80-%ED%86%B5%EC%8B%A0%ED%95%98%EB%8A%94-api-%EC%84%9C%EB%B2%84%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A7%8C%EB%93%A4%EC%96%B4/","title":"근데 보통 라즈베리파이와 통신하는 API 서버는 어떻게 만들어?","section":"Docs","content":"좋은 질문이에요!\n라즈베리파이(Raspberry Pi)와 통신하는 API 서버를 만들 때는, 일반적인 웹 애플리케이션보다 안정성, 보안, 네트워크 환경, 데이터 포맷, 프로토콜 등을 더 신경 써야 합니다.\n🧱 기본 개념: 라즈베리파이 ↔ API 서버 통신 구조 # 라즈베리파이 (센서 + MQTT 또는 HTTP 클라이언트) ↓ 네트워크 (Wi-Fi / 이더넷 / LTE 등) ↓ API 서버 (Go + Gin + GORM 등) ↓ MySQL / PostgreSQL 등 DB 저장 ↓ 웹/앱에서 조회 가능 ✅ 1. API 서버 설계 방향 # 항목 설명 통신 방식 HTTP REST API or MQTT or WebSocket 등 보안 HTTPS, 인증(Token/JWT), IP 제한 등 데이터 포맷 JSON 사용 권장 에러 처리 정확한 HTTP 상태 코드 반환 로그 기록 요청 로그, 오류 로그 남기기 📡 2. 라즈베리파이와 주로 사용하는 통신 방식 # 1) HTTP REST API # 가장 간단하고 직관적 라즈베리파이에서 curl, Python requests 등을 이용해 POST 요청 전송 예시 (Python): # import requests import json url = \u0026#34;http://api.yourserver.com/data\u0026#34; data = { \u0026#34;device_id\u0026#34;: \u0026#34;raspi-01\u0026#34;, \u0026#34;temperature\u0026#34;: 25.5, \u0026#34;humidity\u0026#34;: 60.3 } response = requests.post(url, json=data) print(response.status_code) Go(Gin) API 예시: # r.POST(\u0026#34;/data\u0026#34;, func(c *gin.Context) { var payload struct { DeviceID string `json:\u0026#34;device_id\u0026#34;` Temperature float32 `json:\u0026#34;temperature\u0026#34;` Humidity float32 `json:\u0026#34;humidity\u0026#34;` } if err := c.ShouldBindJSON(\u0026amp;payload); err != nil { c.JSON(http.StatusBadRequest, gin.H{\u0026#34;error\u0026#34;: err.Error()}) return } db.Create(\u0026amp;models.SensorData{ DeviceID: payload.DeviceID, Temperature: payload.Temperature, Humidity: payload.Humidity, }) c.JSON(http.StatusOK, gin.H{\u0026#34;status\u0026#34;: \u0026#34;success\u0026#34;}) }) 2) MQTT 통신 (추천) # 실시간 센서 데이터 수신 시 유리 라즈베리파이가 발행(publish), 서버가 구독(subscribe) 라즈베리파이에서 예시 (Python): # import paho.mqtt.client as mqtt import json client = mqtt.Client() client.connect(\u0026#34;your.server.ip\u0026#34;, 1883) data = { \u0026#34;device_id\u0026#34;: \u0026#34;raspi-01\u0026#34;, \u0026#34;temperature\u0026#34;: 25.5, \u0026#34;humidity\u0026#34;: 60.3 } client.publish(\u0026#34;sensor/data\u0026#34;, json.dumps(data)) Go 서버에서 수신 (MQTT Subscriber): # func StartMQTTSubscriber(db *gorm.DB, broker, topic string) { opts := paho_mqtt_golang.NewClientOptions().AddBroker(broker) client := paho_mqtt_golang.NewClient(opts) client.Connect() token := client.Subscribe(topic, 1, func(client paho_mqtt_golang.Client, msg paho_mqtt_golang.Message) { var data map[string]interface{} json.Unmarshal(msg.Payload(), \u0026amp;data) sensor := models.SensorData{ DeviceID: data[\u0026#34;device_id\u0026#34;].(string), Temperature: float32(data[\u0026#34;temperature\u0026#34;].(float64)), Humidity: float32(data[\u0026#34;humidity\u0026#34;].(float64)), } db.Create(\u0026amp;sensor) }) token.Wait() } 3) WebSocket (선택사항) # 실시간 양방향 통신 필요 시 예: 서버 → 라즈베리파이로 커맨드 전달 (예: LED 켜짐/꺼짐 명령) 🔐 3. 보안 관련 고려 사항 # 항목 설명 HTTPS 반드시 TLS 적용 (Let's Encrypt) 인증 JWT 토큰이나 API Key로 접근 제어 IP 제한 특정 IP(라즈베리파이의 공인 IP)만 접근 허용 Rate Limiting 과다 요청 차단 로그 기록 누가 언제 어떤 데이터를 보냈는지 기록 🌐 4. 네트워크 설정 주의점 # 항목 설명 공인 IP vs 내부망 외부에서 접근 가능해야 함 방화벽 설정 API 포트(80, 443), MQTT 포트(1883, 8883) 열기 DDNS 공인 IP가 변하는 경우 도메인으로 고정 관리 가능 NAT 설정 라우터에서 포트 포워딩 필요할 수 있음 📦 5. 운영 환경 구성 추천 # 아래는 Docker + Traefik + Go + MySQL 구성입니다.\nversion: \u0026#39;3\u0026#39; services: traefik: image: traefik:v2.9 command: - --api.insecure=true - --providers.docker - --entrypoints.web.address=:80 - --entrypoints.websecure.address=:443 - --certificatesresolvers.myresolver.acme.tlschallenge - --certificatesresolvers.myresolver.acme.email=you@example.com - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json ports: - \u0026#34;80:80\u0026#34; - \u0026#34;443:443\u0026#34; - \u0026#34;8080:8080\u0026#34; # Traefik Dashboard volumes: - /var/run/docker.sock:/var/run/docker.sock - ./letsencrypt:/letsencrypt api-server: build: . labels: - \u0026#34;traefik.http.routers.api.rule=Host(`api.example.com`)\u0026#34; - \u0026#34;traefik.http.routers.api.entrypoints=websecure\u0026#34; - \u0026#34;traefik.http.routers.api.tls.certresolver=myresolver\u0026#34; - \u0026#34;traefik.http.services.api.loadbalancer.server.port=8080\u0026#34; mysql: image: mysql:8.0 environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: sensordb volumes: - db_data:/var/lib/mysql volumes: db_data: ✅ 요약 # 항목 추천 방법 통신 방식 MQTT or HTTP 데이터 포맷 JSON 보안 HTTPS + API Key or JWT 운영 Docker + Traefik + Let\u0026rsquo;s Encrypt DB 저장 GORM 활용하여 MySQL 등에 저장 모니터링 로그, 대시보드(Traefik 제공), Prometheus 연동도 가능 필요하다면 아래 내용도 도와드릴게요 😊\n라즈베리파이 센서 연결 방법 (GPIO, I2C 등) MQTT Broker(Docker Mosquitto) 설치 가이드 JWT 기반 인증 추가 방법 전체 Docker Compose + Go 예제 어떤 걸 먼저 해볼까요?\n"},{"id":12,"href":"/docs/example/collapsed/3rd-level/4th-level/","title":"4th Level","section":"3rd Level","content":" 4th Level of Menu # Caesorum illa tu sentit micat vestes papyriferi # Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"},{"id":13,"href":"/docs/example/collapsed/3rd-level/","title":"3rd Level","section":"Collapsed","content":" 3rd Level of Menu # Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp); "},{"id":14,"href":"/docs/example/hidden/","title":"Hidden","section":"Example Site","content":" This page is hidden in menu # Quondam non pater est dignior ille Eurotas # Latent te facies # Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\nPater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor Cum honorum Latona # O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); } Fronde cetera dextrae sequens pennis voce muneris # Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":15,"href":"/docs/shortcodes/buttons/","title":"Buttons","section":"Shortcodes","content":" Buttons # Buttons are styled links that can lead to local page or external link.\nExample # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Get Home Contribute "},{"id":16,"href":"/docs/shortcodes/columns/","title":"Columns","section":"Shortcodes","content":" Columns # Columns help organize shorter pieces of content horizontally for readability.\nExample # {{% columns [ratio=\u0026#34;1:1\u0026#34;] [class=\u0026#34;...\u0026#34;] %}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{% /columns %}} Left Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nMid Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nRight Content # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nSettings size ratio for columns # {{% columns ratio=\u0026#34;1:2\u0026#34; %}} \u0026lt;!-- begin columns block --\u0026gt; ## x1 Column Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; ## x2 Column Lorem markdownum insigne... {{% /columns %}} x1 Column # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nx2 Column # Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":17,"href":"/docs/shortcodes/details/","title":"Details","section":"Shortcodes","content":" Details # Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample # {{% details \u0026#34;Title\u0026#34; [open] %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} {{% details title=\u0026#34;Title\u0026#34; open=true %}} ## Markdown content Lorem markdownum insigne... {{% /details %}} Markdown content # Lorem markdownum insigne\u0026hellip;\n"},{"id":18,"href":"/docs/shortcodes/hints/","title":"Hints","section":"Shortcodes","content":" Hints # Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{% hint [info|warning|danger] %}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{% /hint %}} Example # Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\nMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\n"},{"id":19,"href":"/docs/shortcodes/mermaid/","title":"Mermaid","section":"Shortcodes","content":" Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nOverride Mermaid initialization config\nTo override the initialization config for Mermaid, create a mermaid.json file in your assets folder!\nExample # {{\u0026lt; mermaid [class=\u0026#34;...\u0026#34;] \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} "},{"id":20,"href":"/docs/shortcodes/section/","title":"Section","section":"Shortcodes","content":" Section # Section renders pages in section as definition list, using title and description. Optional param summary can be used to show or hide page summary\nExample # {{\u0026lt; section [summary] \u0026gt;}} First Page First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nSecond Page Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n"},{"id":21,"href":"/docs/shortcodes/section/first-page/","title":"First Page","section":"Section","content":" First page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":22,"href":"/docs/shortcodes/section/second-page/","title":"Second Page","section":"Section","content":" Second Page # Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"},{"id":23,"href":"/docs/shortcodes/tabs/","title":"Tabs","section":"Shortcodes","content":" Tabs # Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;id\u0026#34; \u0026gt;}} {{% tab \u0026#34;MacOS\u0026#34; %}} # MacOS Content {{% /tab %}} {{% tab \u0026#34;Linux\u0026#34; %}} # Linux Content {{% /tab %}} {{% tab \u0026#34;Windows\u0026#34; %}} # Windows Content {{% /tab %}} {{\u0026lt; /tabs \u0026gt;}} Example # MacOS MacOS # This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux # This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows # This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n"},{"id":24,"href":"/docs/book/terminal/omz/.zshrc/","title":"(.)zshrc","section":"Docs","content":"export ZSH=\u0026#34;$HOME/.oh-my-zsh\u0026#34; ZSH_THEME=\u0026#34;robbyrussedll\u0026#34; source $ZSH/oh-my-zsh.sh alias ls=\u0026#39;ls -F --color=never\u0026#39; eval \u0026#34;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\u0026#34; "},{"id":25,"href":"/docs/book/color/rgb/4%EB%B6%80%ED%84%B0-256%EA%B9%8C%EC%A7%80/","title":"4부터 256까지","section":"Docs","content":"0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 "},{"id":26,"href":"/docs/book/git/add%EC%99%80-commit/","title":"add와 commit","section":"Docs","content":"Git에서 변경사항을 저장하는 주요 단계는 git add와 git commit입니다. 아래는 각 단계에 대한 간략한 설명입니다.\n변경사항 스테이징 (git add): 변경한 파일들 중에서 어떤 것들을 저장할지를 선택하는 단계입니다. 모든 변경사항을 스테이징 영역에 올리려면 다음과 같이 명령어를 사용합니다.\ngit add . 여기서 .은 현재 디렉토리의 모든 파일과 하위 디렉토리를 의미합니다. 만약 특정 파일만 스테이징하고 싶다면 파일명을 지정합니다.\ngit add filename 변경사항 커밋 (git commit): 스테이징 영역에 올라간 변경사항들을 로컬 저장소에 영구히 저장하는 단계입니다.\ngit commit -m \u0026#34;커밋 메시지\u0026#34; -m 옵션은 커밋 메시지를 직접 명령어로 입력할 수 있게 해줍니다. 커밋 메시지는 해당 커밋의 목적이나 변경사항에 대한 간결한 설명을 기입합니다.\n예를 들어:\ngit add . # 모든 변경사항 스테이징 git commit -m \u0026#34;기능 추가: 새로운 로그인 화면 구현\u0026#34; 이렇게 하면 변경사항이 스테이징되고 커밋이 생성되어 로컬 저장소에 저장됩니다. 만약 원격 저장소에 변경사항을 반영하려면 git push 명령어를 사용합니다.\n"},{"id":27,"href":"/docs/book/terminal/alacritty/alacritty.toml/","title":"alacritty.toml","section":"Docs","content":"alacritty.toml\n# ~/.config/alacritty/alacritty.toml # windows [terminal] [terminal.shell] program = \u0026#34;wsl\u0026#34; args = [\u0026#34;~\u0026#34;,] [font] size = 12.0 [font.normal] family = \u0026#34;RobotoMono Nerd Font\u0026#34; style = \u0026#34;Regular\u0026#34; [[keyboard.bindings]] key = \u0026#34;Space\u0026#34; mods = \u0026#34;Control\u0026#34; chars = \u0026#34;\\u0000\u0026#34; "},{"id":28,"href":"/docs/book/%EC%9B%90%EA%B2%A9-%EC%A0%80%EC%9E%A5%EC%86%8C/aws/aws-%EC%97%B0%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/","title":"AWS 연결하는 방법","section":"Docs","content":"ssh -i /AWS/Proejct/aws-seoul-key.pem ubuntu@ec2-13-125-209-24.ap-northeast-2.compute.amazonaws.com\n"},{"id":29,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/css/bem/","title":"BEM","section":"Docs","content":"Block, Element, Modifier(속성)\nElement\n예) header__logo\nModifier\n예) block-name_modifier-name 예) block-name__element-name_modifier-name 예) search-form__button_disabled\n(형태)(의미)(순서)_(상태)\nwrapper - 페이지 전체 영역 그룹핑 header - 머리글 영역 container - 본문영역 그룹핑 content - 주용컨텐츠 영역 footer - 바닥글 popWrapper - 팝업 페이지 전체 영역 그룹핑 popHeader - 팝업 머리글 영역 popContainer - 팝업 본문영역 그룹핑 popContent - 팝업 주용컨텐츠 영역 popFooter - 팝업 바닥글 gnbNav - 글로벌 네이게이션 영역 메뉴 lnbNav - 로컬 네비게이션 영역의 메뉴 snbNav - 사이드 네이게이션 영역의 메뉴\n"},{"id":30,"href":"/docs/book/ssl/certbot/","title":"Certbot","section":"Docs","content":"certbot renew \u0026ndash;dry-run : 인증서 갱신 테스트 certbot renew : 인증서 갱신 certbot certificates : 인증서 만료일 확인\n"},{"id":31,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/cc++/cmake/cmakelists.txt/","title":"CMakeLists.txt","section":"Docs","content":"cmake_minimum_required(VERSION 3.10) project(MyProject) file(GLOB_RECURSE SOURCES \u0026#34;src/*.cpp\u0026#34; \u0026#34;src/*.c\u0026#34; \u0026#34;src/*.h\u0026#34; ) add_executable(${PROJECT_NAME} ${SOURCES}) include_directories( src/header ) target_link_libraries(${PROJECT_NAME} m) "},{"id":32,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/css/color-%EC%A1%B0%ED%95%A9/","title":"Color 조합","section":"Docs","content":"0, 111, 222 30, 130, 230\n"},{"id":33,"href":"/docs/book/terminal/neovim/plugins/colorscheme.lua/","title":"colorscheme.lua","section":"Docs","content":"-- lua/plugins/colorscheme.lua return { -- add { \u0026#34;sainnhe/sonokai\u0026#34; }, -- Configure LazyVim to load sonokai { \u0026#34;LazyVim/LazyVim\u0026#34;, opts = { colorscheme = \u0026#34;sonokai\u0026#34;, }, }, } "},{"id":34,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/powershell/conan%EC%9C%BC%EB%A1%9C-c%EC%96%B8%EC%96%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%94%94%EB%B2%84%EA%B7%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%8B%A4%ED%96%89%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%9A%94%EC%95%BD/","title":"Conan으로 C언어 프로젝트 디버그, 컴파일, 실행하는 방법 요약","section":"Docs","content":" 주요 파일 구성 # CMakeLists.txt - 빌드 구성\n모든 소스 파일 자동 수집 (GLOB_RECURSE) 빌드 결과물 위치 지정 (CMAKE_RUNTIME_OUTPUT_DIRECTORY) 외부 라이브러리 설정 (ZLIB, GTest) 컴파일러 경고 설정 conanfile.txt - 종속성 관리\n필요한 외부 라이브러리 지정 빌드 옵션 설정 라이브러리 파일 임포트 방식 지정 빌드 스크립트\nbuild.bat - 프로젝트 빌드 run.bat - 프로그램 실행 clean.bat - 빌드 파일 정리 VS Code 설정\ntasks.json - 빌드 작업 자동화 launch.json - 디버깅 설정 주요 명령어 # 빌드하기: build.bat [Debug|Release]\nConan으로 종속성 설치 CMake로 빌드 파일 생성 컴파일 및 링크 실행 실행하기: run.bat [Debug|Release]\n빌드된 프로그램 실행 정리하기: clean.bat\n모든 빌드 파일 삭제 디렉토리 구조 # 프로젝트/ │ ├── src/ # 소스 코드 │ ├── main.c │ └── lib/ # 라이브러리 구현 │ ├── Module1/ │ │ ├── Module1.c │ │ └── Module1.h │ └── ... │ ├── build/ # 빌드 출력 (자동 생성) │ ├── bin/ # 실행 파일 │ │ ├── Debug/ │ │ └── Release/ │ └── lib/ # 라이브러리 파일 │ ├── CMakeLists.txt # CMake 설정 ├── conanfile.txt # Conan 종속성 ├── build.bat # 빌드 스크립트 ├── run.bat # 실행 스크립트 └── clean.bat # 정리 스크립트 주요 특징 # 자동화된 소스 관리\n소스 파일 추가 시 CMakeLists.txt 수정 불필요 GLOB_RECURSE로 모든 .c 파일 자동 감지 종속성 관리\nConan을 통한 외부 라이브러리 자동 설치 플랫폼 간 일관된 빌드 환경 빌드 결과 정리\n모든 빌드 파일은 build/ 디렉토리에 격리 실행 파일은 build/bin/에 생성 VS Code 통합\nF5 키로 디버깅 Ctrl+Shift+B로 빌드 Tasks로 다양한 작업 실행 주의사항 # 코드 페이지 관련 경고는 소스 파일을 UTF-8로 저장하여 해결 CRT 보안 경고는 _CRT_SECURE_NO_WARNINGS 정의로 해결 초기 설정 후 소스 파일 추가는 자동으로 감지됨 이 빌드 시스템으로 C 프로젝트를 쉽게 관리하고, 외부 라이브러리 종속성을 효율적으로 처리할 수 있습니다.\n아니 내용을 빠트리면 안되고 코드는 다 써줘\nC 프로젝트 빌드 시스템 종합 정리 # 1. CMakeLists.txt # cmake_minimum_required(VERSION 3.15) project(MyProject C CXX) # C와 C++ 모두 지원 # 빌드 산출물 디렉토리 설정 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin) # 빌드 타입이 지정되지 않은 경우 기본값 설정 if(NOT CMAKE_BUILD_TYPE) set(CMAKE_BUILD_TYPE Debug) endif() # 소스 디렉토리 추가 include_directories(src) # Conan 패키지 찾기 find_package(ZLIB CONFIG REQUIRED) find_package(GTest CONFIG REQUIRED) # 모든 C 소스 및 헤더 파일 자동 수집 file(GLOB_RECURSE SOURCES \u0026#34;src/*.c\u0026#34;) file(GLOB_RECURSE HEADERS \u0026#34;src/*.h\u0026#34;) # 수집된 파일 목록 출력 (디버깅용) message(STATUS \u0026#34;Found source files: ${SOURCES}\u0026#34;) message(STATUS \u0026#34;Found header files: ${HEADERS}\u0026#34;) # 실행 파일 생성 add_executable(my_program ${SOURCES}) target_link_libraries(my_program PRIVATE ZLIB::ZLIB GTest::gtest GTest::gtest_main) # 컴파일러 경고 처리 if(MSVC) # Windows에서 안전하지 않은 함수 경고 무시 옵션 추가 target_compile_definitions(my_program PRIVATE _CRT_SECURE_NO_WARNINGS) # 경고 레벨 설정 target_compile_options(my_program PRIVATE /W4) else() target_compile_options(my_program PRIVATE -Wall -Wextra) endif() # 소스 그룹 생성 (IDE에서 폴더 구조 유지) source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX \u0026#34;Source Files\u0026#34; FILES ${SOURCES}) source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX \u0026#34;Header Files\u0026#34; FILES ${HEADERS}) 2. conanfile.txt # [requires] zlib/1.2.11 gtest/1.10.0 [generators] CMakeDeps CMakeToolchain [options] zlib/*:shared=False gtest/*:shared=False [imports] bin, *.dll -\u0026gt; ./build/bin lib, *.dylib* -\u0026gt; ./build/bin lib, *.so* -\u0026gt; ./build/bin 3. build.bat # @echo off setlocal :: 빌드 타입 설정 (기본값: Debug) set BUILD_TYPE=Debug if not \u0026#34;%~1\u0026#34;==\u0026#34;\u0026#34; set BUILD_TYPE=%~1 echo Building in %BUILD_TYPE% mode :: 빌드 디렉토리 설정 set BUILD_DIR=build :: 빌드 디렉토리 생성 if not exist %BUILD_DIR% mkdir %BUILD_DIR% cd %BUILD_DIR% :: Conan 설정 및 종속성 설치 (출력 폴더 명시적 지정) conan install .. --build=missing -s build_type=%BUILD_TYPE% -g CMakeDeps -g CMakeToolchain --output-folder=. :: CMake 구성 (생성된 Conan 툴체인 파일 명시적 지정) cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=%BUILD_TYPE% :: 빌드 실행 cmake --build . --config %BUILD_TYPE% :: 실행 파일 경로 출력 echo Build completed. Executable is at: %CD%\\bin\\%BUILD_TYPE%\\my_program.exe :: 원래 디렉토리로 돌아가기 cd .. endlocal 4. run.bat # @echo off setlocal :: 빌드 타입 설정 (기본값: Debug) set BUILD_TYPE=Debug if not \u0026#34;%~1\u0026#34;==\u0026#34;\u0026#34; set BUILD_TYPE=%~1 :: 실행 파일 경로 set EXECUTABLE_PATH=build\\bin\\%BUILD_TYPE%\\my_program.exe :: 실행 파일 존재 확인 if not exist %EXECUTABLE_PATH% ( echo Error: Executable not found at %EXECUTABLE_PATH%. echo Please run build.bat first. exit /b 1 ) :: 실행 파일 실행 echo Running %EXECUTABLE_PATH%... %EXECUTABLE_PATH% %2 %3 %4 %5 %6 %7 %8 %9 endlocal 5. clean.bat # @echo off echo Cleaning build directory... if exist build ( rd /s /q build echo Build directory removed successfully. ) else ( echo No build directory found. ) 6. VSCode 설정 파일 (.vscode/tasks.json) # { \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;tasks\u0026#34;: [ { \u0026#34;label\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;build.bat Debug\u0026#34;, \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true }, \u0026#34;problemMatcher\u0026#34;: [\u0026#34;$msCompile\u0026#34;] }, { \u0026#34;label\u0026#34;: \u0026#34;build-release\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;build.bat Release\u0026#34;, \u0026#34;group\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;problemMatcher\u0026#34;: [\u0026#34;$msCompile\u0026#34;] }, { \u0026#34;label\u0026#34;: \u0026#34;run\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;run.bat\u0026#34;, \u0026#34;dependsOn\u0026#34;: [\u0026#34;build\u0026#34;], \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;isDefault\u0026#34;: true } }, { \u0026#34;label\u0026#34;: \u0026#34;clean\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;clean.bat\u0026#34;, \u0026#34;problemMatcher\u0026#34;: [] } ] } 7. VSCode 디버깅 설정 (.vscode/launch.json) # { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Debug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;cppvsdbg\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}\\\\build\\\\bin\\\\Debug\\\\my_program.exe\u0026#34;, \u0026#34;args\u0026#34;: [], \u0026#34;stopAtEntry\u0026#34;: false, \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026#34;environment\u0026#34;: [], \u0026#34;externalConsole\u0026#34;: false, \u0026#34;preLaunchTask\u0026#34;: \u0026#34;build\u0026#34; } ] } 8. .gitignore # # 빌드 디렉토리 /build/ /bin/ /lib/ # Visual Studio 파일 .vs/ *.user *.suo *.sln *.vcxproj *.vcxproj.filters *.vcxproj.user # Conan 파일 conanbuildinfo.* conaninfo.txt conan.lock # 임시 파일 *.tmp *.log 9. VSCode 설정 (.vscode/settings.json) # { \u0026#34;cmake.configureOnOpen\u0026#34;: true, \u0026#34;cmake.buildDirectory\u0026#34;: \u0026#34;${workspaceFolder}/build\u0026#34;, \u0026#34;cmake.defaultVariants\u0026#34;: { \u0026#34;buildType\u0026#34;: { \u0026#34;default\u0026#34;: \u0026#34;debug\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;The build type.\u0026#34;, \u0026#34;choices\u0026#34;: { \u0026#34;debug\u0026#34;: { \u0026#34;short\u0026#34;: \u0026#34;Debug\u0026#34;, \u0026#34;long\u0026#34;: \u0026#34;Debug build type\u0026#34;, \u0026#34;buildType\u0026#34;: \u0026#34;Debug\u0026#34; }, \u0026#34;release\u0026#34;: { \u0026#34;short\u0026#34;: \u0026#34;Release\u0026#34;, \u0026#34;long\u0026#34;: \u0026#34;Release build type\u0026#34;, \u0026#34;buildType\u0026#34;: \u0026#34;Release\u0026#34; } } } }, \u0026#34;files.associations\u0026#34;: { \u0026#34;*.h\u0026#34;: \u0026#34;c\u0026#34; } } 사용 방법 # 초기 설정:\n위 파일들을 프로젝트 루트 디렉토리에 생성 .vscode 폴더에 tasks.json, launch.json, settings.json 파일 생성 빌드하기:\n명령줄에서 build.bat 실행 VS Code에서 Ctrl+Shift+B 누르기 실행하기:\n명령줄에서 run.bat 실행 VS Code에서 작업 실행 메뉴를 통해 \u0026lsquo;run\u0026rsquo; 작업 선택 디버깅하기:\nVS Code에서 F5 키 누르기 정리하기:\n명령줄에서 clean.bat 실행 VS Code에서 작업 실행 메뉴를 통해 \u0026lsquo;clean\u0026rsquo; 작업 선택 이 빌드 시스템은 다음과 같은 이점을 제공합니다:\n소스 파일을 자동으로 감지하여 빌드합니다. Conan을 통해 외부 라이브러리 종속성을 관리합니다. 빌드 결과물을 build 디렉토리에 정리합니다. VS Code와의 통합으로 편리한 개발 환경을 제공합니다. 문제 해결:\n코드 페이지 경고는 소스 파일을 UTF-8로 저장하여 해결할 수 있습니다. CRT 보안 경고는 _CRT_SECURE_NO_WARNINGS 정의를 통해 처리됩니다. "},{"id":35,"href":"/docs/book/terminal/ghostty/config/","title":"config","section":"Docs","content":"# font font-family = \u0026#34;RobotoMono Nerd Font\u0026#34; # window window-padding-balance = true window-padding-x = 0 window-padding-y = 0 "},{"id":36,"href":"/docs/book/terminal/curl-%EB%AA%85%EB%A0%B9%EC%96%B4/","title":"Curl 명령어","section":"Docs","content":" GET # curl http://localhost:8080/api/products POST # curl -X POST \\ http://localhost:8080/api/products \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;Type\u0026#34;: \u0026#34;HomeGoods\u0026#34;, \u0026#34;ZoneId\u0026#34;: \u0026#34;Z02\u0026#34;, \u0026#34;CurrentStatus\u0026#34;: \u0026#34;Available\u0026#34; }\u0026#39; PUT # curl -X PUT \\ http://localhost:8080/api/products/1 \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{ \u0026#34;Type\u0026#34;: \u0026#34;AutomotiveParts\u0026#34;, \u0026#34;CurrentStatus\u0026#34;: \u0026#34;Processing\u0026#34; }\u0026#39; DELETE # curl -X DELETE \\ http://localhost:8080/api/products/1 "},{"id":37,"href":"/docs/book/terminal/%EB%AA%85%EB%A0%B9%EC%96%B4/echo/","title":"echo","section":"Docs","content":"echo \u0026#34;Hello, World!\u0026#34; Hello, World! 예제 # -e # 이스케이프 시퀀스 해석 echo -e \u0026#34;abc\\ndef\u0026#34; abc def "},{"id":38,"href":"/docs/book/web/nextjs/%EC%98%A4%EB%A5%98/failed-websocket-is-closed-due-to-suspension./","title":"failed WebSocket is closed due to suspension.","section":"Docs","content":"https://github.com/vercel/next.js/issues/30491\n"},{"id":39,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/react/flux-%ED%8C%A8%ED%84%B4-%EA%B0%84%EB%8B%A8-%EC%98%88%EC%A0%9C/","title":"Flux 패턴 간단 예제","section":"Docs","content":"\u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; import Button from \u0026#39;$lib/components/ui/Button.svelte\u0026#39;; import { createStore } from \u0026#39;$lib/flux/store\u0026#39;; const store = createStore\u0026lt;number\u0026gt;(0, (state: number, action: { type: string }): number =\u0026gt; { switch (action.type) { case \u0026#39;INCREMENT\u0026#39;: return state + 1; case \u0026#39;DECREMENT\u0026#39;: return state - 1; default: return state; } }); \u0026lt;/script\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Button onclick={() =\u0026gt; store.dispatch({ type: \u0026#39;DECREMENT\u0026#39; })}\u0026gt;-\u0026lt;/Button\u0026gt; \u0026lt;span\u0026gt;{store.getState()}\u0026lt;/span\u0026gt; \u0026lt;Button onclick={() =\u0026gt; store.dispatch({ type: \u0026#39;INCREMENT\u0026#39; })}\u0026gt;+\u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; export type Action = { type: string; }; export class Dispatcher\u0026lt;T\u0026gt; { private listeners: Array\u0026lt;(action: T) =\u0026gt; void\u0026gt; = []; register(listener: (action: T) =\u0026gt; void): () =\u0026gt; void { this.listeners.push(listener); return () =\u0026gt; { this.listeners = this.listeners.filter((l) =\u0026gt; l !== listener); }; } dispatch(action: T): void { this.listeners.forEach((listener) =\u0026gt; listener(action)); } } import { Dispatcher, type Action } from \u0026#39;$lib/flux/dispatcher\u0026#39;; type Reducer\u0026lt;T\u0026gt; = (state: T, action: Action) =\u0026gt; T; export class Store\u0026lt;T\u0026gt; { private state: T; private dispatcher: Dispatcher\u0026lt;Action\u0026gt; = new Dispatcher(); private reducer: Reducer\u0026lt;T\u0026gt;; constructor(state: T, reducer: Reducer\u0026lt;T\u0026gt;) { this.state = state; this.reducer = reducer; } getState(): T { return this.state; } dispatch(action: Action): void { console.log(\u0026#39;state\u0026#39;, this.state); this.state = this.reducer(this.state, action); this.dispatcher.dispatch(action); } subscribe(listener: () =\u0026gt; void): () =\u0026gt; void { const unregister = this.dispatcher.register(() =\u0026gt; listener()); return () =\u0026gt; { unregister(); }; } } export const createStore = \u0026lt;T\u0026gt;(state: T, reducer: Reducer\u0026lt;T\u0026gt;): Store\u0026lt;T\u0026gt; =\u0026gt; { return new Store(state, reducer); }; 작동은 되지 않는다. 왜냐하면 Svelte 환경은 React와 다르기 때문이다.\n"},{"id":40,"href":"/docs/book/font/font-size/","title":"Font Size","section":"Docs","content":" Size Desktop Tablet Mobile 10px 11px 12px comment-text, default-text main-text 13px main-text 14px main-text title-text 15px title-text head-text, subtitle 16px title-text head-text, subtitle subhead, title 20px subtitle, head-text 24px item-text subhead, title 32px subhead, title headline 36px 40px 48px headline 64px headline 96px 128px 100, Thin - 200, Extra Light - 300, Light - 400, Regular - comment-text, default-text 500, Medium - item-text, head-text, main-text, item-text, title-text 600, SemiBold - subhead, subtitle 700, Bold - headline, title 800, ExtraBold - 900, Black -\n6 12 18 24 30 36 42 48 56 60\n"},{"id":41,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/css/gradient-image/","title":"gradient image","section":"Docs","content":".image-1 { background-color: hsla(173, 77%, 83%, 1); background-image: radial-gradient( circle at 7% 81%, hsla(104.5588235294118, 91%, 91%, 1) 16%, transparent 53% ), radial-gradient(circle at 11% 29%, hsla(213, 97%, 75%, 1) 8%, transparent 74%), radial-gradient( circle at 21% 14%, hsla(149, 93%, 64%, 1) 14.288924492243542%, transparent 68% ), radial-gradient(circle at 90% 50%, hsla(118, 94%, 89%, 1) 2%, transparent 85%), radial-gradient(circle at 5% 1%, hsla(250, 76%, 61%, 1) 7%, transparent 84%); background-blend-mode: normal, normal, normal, normal, normal; } .image-2 { background-color: hsla(195, 82%, 85%, 1); background-image: radial-gradient( circle at 85% 15%, hsla(320, 95%, 89%, 1) 12%, transparent 60% ), radial-gradient(circle at 95% 85%, hsla(180, 90%, 70%, 1) 10%, transparent 70%), radial-gradient(circle at 15% 25%, hsla(45, 95%, 85%, 1) 15%, transparent 65%), radial-gradient(circle at 10% 90%, hsla(280, 85%, 75%, 1) 5%, transparent 80%), radial-gradient(circle at 50% 50%, hsla(150, 90%, 80%, 1) 8%, transparent 75%); background-blend-mode: normal, normal, normal, normal, normal; } .image-3 { background-color: hsla(210, 75%, 92%, 1); /* 부드러운 하늘색 베이스 */ background-image: radial-gradient( circle at 20% 20%, hsla(340, 85%, 85%, 1) 18%, transparent 58% ), radial-gradient( circle at 80% 80%, hsla(135, 90%, 80%, 1) 15%, transparent 65% ), radial-gradient( circle at 75% 25%, hsla(55, 85%, 85%, 1) 12%, transparent 70% ), radial-gradient( circle at 25% 75%, hsla(200, 95%, 75%, 1) 10%, transparent 75% ), radial-gradient( circle at 50% 40%, hsla(290, 80%, 85%, 1) 8%, transparent 80% ); background-blend-mode: normal, normal, normal, normal, normal; } "},{"id":42,"href":"/docs/book/terminal/%EB%AA%85%EB%A0%B9%EC%96%B4/grep/","title":"grep","section":"Docs","content":"grep 예제 # -E # 확장 정규 표현식 echo -e \u0026#34;a\\nab\\nabc\u0026#34; | grep -E \u0026#34;abc?\u0026#34; ab abc "},{"id":43,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/powershell/init.bat/","title":"init.bat","section":"Docs","content":"@echo off setlocal enabledelayedexpansion echo ================================== echo C 프로젝트 빌드 시스템 초기화 echo ================================== echo. :: 프로젝트 이름 입력받기 set /p PROJECT_NAME=\u0026#34;프로젝트 이름을 입력하세요 (기본값: MyProject): \u0026#34; if \u0026#34;!PROJECT_NAME!\u0026#34;==\u0026#34;\u0026#34; set PROJECT_NAME=MyProject :: VS Code 폴더 생성 mkdir .vscode 2\u0026gt;nul :: 필요한 디렉토리 확인 및 생성 echo [1/8] 디렉토리 구조 생성 중... if not exist src mkdir src if not exist src\\lib mkdir src\\lib if not exist src\\main.c ( echo #include ^\u0026lt;stdio.h^\u0026gt; \u0026gt; src\\main.c echo. \u0026gt;\u0026gt; src\\main.c echo int main(void) { \u0026gt;\u0026gt; src\\main.c echo printf(\u0026#34;Hello, World!\\n\u0026#34;); \u0026gt;\u0026gt; src\\main.c echo return 0; \u0026gt;\u0026gt; src\\main.c echo } \u0026gt;\u0026gt; src\\main.c ) :: CMakeLists.txt 생성 echo [2/8] CMakeLists.txt 생성 중... echo cmake_minimum_required(VERSION 3.15) \u0026gt; CMakeLists.txt echo project(%PROJECT_NAME% C CXX) # C와 C++ 모두 지원 \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 빌드 산출물 디렉토리 설정 \u0026gt;\u0026gt; CMakeLists.txt echo set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) \u0026gt;\u0026gt; CMakeLists.txt echo set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib) \u0026gt;\u0026gt; CMakeLists.txt echo set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 빌드 타입이 지정되지 않은 경우 기본값 설정 \u0026gt;\u0026gt; CMakeLists.txt echo if(NOT CMAKE_BUILD_TYPE) \u0026gt;\u0026gt; CMakeLists.txt echo set(CMAKE_BUILD_TYPE Debug) \u0026gt;\u0026gt; CMakeLists.txt echo endif() \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 소스 디렉토리 추가 \u0026gt;\u0026gt; CMakeLists.txt echo include_directories(src) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # Conan 패키지 찾기 \u0026gt;\u0026gt; CMakeLists.txt echo find_package(ZLIB CONFIG REQUIRED) \u0026gt;\u0026gt; CMakeLists.txt echo find_package(GTest CONFIG REQUIRED) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 모든 C 소스 및 헤더 파일 자동 수집 \u0026gt;\u0026gt; CMakeLists.txt echo file(GLOB_RECURSE SOURCES \u0026#34;src/*.c\u0026#34;) \u0026gt;\u0026gt; CMakeLists.txt echo file(GLOB_RECURSE HEADERS \u0026#34;src/*.h\u0026#34;) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 수집된 파일 목록 출력 (디버깅용) \u0026gt;\u0026gt; CMakeLists.txt echo message(STATUS \u0026#34;Found source files: ${SOURCES}\u0026#34;) \u0026gt;\u0026gt; CMakeLists.txt echo message(STATUS \u0026#34;Found header files: ${HEADERS}\u0026#34;) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 실행 파일 생성 \u0026gt;\u0026gt; CMakeLists.txt echo add_executable(%PROJECT_NAME% ${SOURCES}) \u0026gt;\u0026gt; CMakeLists.txt echo target_link_libraries(%PROJECT_NAME% PRIVATE ZLIB::ZLIB GTest::gtest GTest::gtest_main) \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 컴파일러 경고 처리 \u0026gt;\u0026gt; CMakeLists.txt echo if(MSVC) \u0026gt;\u0026gt; CMakeLists.txt echo # Windows에서 안전하지 않은 함수 경고 무시 옵션 추가 \u0026gt;\u0026gt; CMakeLists.txt echo target_compile_definitions(%PROJECT_NAME% PRIVATE _CRT_SECURE_NO_WARNINGS) \u0026gt;\u0026gt; CMakeLists.txt echo # 경고 레벨 설정 \u0026gt;\u0026gt; CMakeLists.txt echo target_compile_options(%PROJECT_NAME% PRIVATE /W4) \u0026gt;\u0026gt; CMakeLists.txt echo else() \u0026gt;\u0026gt; CMakeLists.txt echo target_compile_options(%PROJECT_NAME% PRIVATE -Wall -Wextra) \u0026gt;\u0026gt; CMakeLists.txt echo endif() \u0026gt;\u0026gt; CMakeLists.txt echo. \u0026gt;\u0026gt; CMakeLists.txt echo # 소스 그룹 생성 (IDE에서 폴더 구조 유지) \u0026gt;\u0026gt; CMakeLists.txt echo source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX \u0026#34;Source Files\u0026#34; FILES ${SOURCES}) \u0026gt;\u0026gt; CMakeLists.txt echo source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX \u0026#34;Header Files\u0026#34; FILES ${HEADERS}) \u0026gt;\u0026gt; CMakeLists.txt :: conanfile.txt 생성 echo [3/8] conanfile.txt 생성 중... echo [requires] \u0026gt; conanfile.txt echo zlib/1.2.11 \u0026gt;\u0026gt; conanfile.txt echo gtest/1.10.0 \u0026gt;\u0026gt; conanfile.txt echo. \u0026gt;\u0026gt; conanfile.txt echo [generators] \u0026gt;\u0026gt; conanfile.txt echo CMakeDeps \u0026gt;\u0026gt; conanfile.txt echo CMakeToolchain \u0026gt;\u0026gt; conanfile.txt echo. \u0026gt;\u0026gt; conanfile.txt echo [options] \u0026gt;\u0026gt; conanfile.txt echo zlib/*:shared=False \u0026gt;\u0026gt; conanfile.txt echo gtest/*:shared=False \u0026gt;\u0026gt; conanfile.txt echo. \u0026gt;\u0026gt; conanfile.txt echo [imports] \u0026gt;\u0026gt; conanfile.txt echo bin, *.dll -^\u0026gt; ./bin \u0026gt;\u0026gt; conanfile.txt echo lib, *.dylib* -^\u0026gt; ./bin \u0026gt;\u0026gt; conanfile.txt echo lib, *.so* -^\u0026gt; ./bin \u0026gt;\u0026gt; conanfile.txt :: build.bat 생성 echo [4/8] build.bat 생성 중... echo @echo off \u0026gt; build.bat echo setlocal \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 빌드 타입 설정 (기본값: Debug) \u0026gt;\u0026gt; build.bat echo set BUILD_TYPE=Debug \u0026gt;\u0026gt; build.bat echo if not \u0026#34;%%~1\u0026#34;==\u0026#34;\u0026#34; set BUILD_TYPE=%%~1 \u0026gt;\u0026gt; build.bat echo echo Building in %%BUILD_TYPE%% mode \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 빌드 디렉토리 설정 \u0026gt;\u0026gt; build.bat echo set BUILD_DIR=build \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 빌드 디렉토리 생성 \u0026gt;\u0026gt; build.bat echo if not exist %%BUILD_DIR%% mkdir %%BUILD_DIR%% \u0026gt;\u0026gt; build.bat echo cd %%BUILD_DIR%% \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: Conan 설정 및 종속성 설치 (출력 폴더 명시적 지정) \u0026gt;\u0026gt; build.bat echo conan install .. --build=missing -s build_type=%%BUILD_TYPE%% -g CMakeDeps -g CMakeToolchain --output-folder=. \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: CMake 구성 (생성된 Conan 툴체인 파일 명시적 지정) \u0026gt;\u0026gt; build.bat echo cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=%%BUILD_TYPE%% \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 빌드 실행 \u0026gt;\u0026gt; build.bat echo cmake --build . --config %%BUILD_TYPE%% \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 실행 파일 경로 출력 \u0026gt;\u0026gt; build.bat echo echo Build completed. Executable is at: %%CD%%\\bin\\%%BUILD_TYPE%%\\%PROJECT_NAME%.exe \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo :: 원래 디렉토리로 돌아가기 \u0026gt;\u0026gt; build.bat echo cd .. \u0026gt;\u0026gt; build.bat echo. \u0026gt;\u0026gt; build.bat echo endlocal \u0026gt;\u0026gt; build.bat :: run.bat 생성 echo [5/8] run.bat 생성 중... echo @echo off \u0026gt; run.bat echo setlocal \u0026gt;\u0026gt; run.bat echo. \u0026gt;\u0026gt; run.bat echo :: 빌드 타입 설정 (기본값: Debug) \u0026gt;\u0026gt; run.bat echo set BUILD_TYPE=Debug \u0026gt;\u0026gt; run.bat echo if not \u0026#34;%%~1\u0026#34;==\u0026#34;\u0026#34; set BUILD_TYPE=%%~1 \u0026gt;\u0026gt; run.bat echo. \u0026gt;\u0026gt; run.bat echo :: 실행 파일 경로 \u0026gt;\u0026gt; run.bat echo set EXECUTABLE_PATH=build\\bin\\%%BUILD_TYPE%%\\%PROJECT_NAME%.exe \u0026gt;\u0026gt; run.bat echo. \u0026gt;\u0026gt; run.bat echo :: 실행 파일 존재 확인 \u0026gt;\u0026gt; run.bat echo if not exist %%EXECUTABLE_PATH%% ( \u0026gt;\u0026gt; run.bat echo echo Error: Executable not found at %%EXECUTABLE_PATH%%. \u0026gt;\u0026gt; run.bat echo echo Please run build.bat first. \u0026gt;\u0026gt; run.bat echo exit /b 1 \u0026gt;\u0026gt; run.bat echo ) \u0026gt;\u0026gt; run.bat echo. \u0026gt;\u0026gt; run.bat echo :: 실행 파일 실행 \u0026gt;\u0026gt; run.bat echo echo Running %%EXECUTABLE_PATH%%... \u0026gt;\u0026gt; run.bat echo %%EXECUTABLE_PATH%% %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9 \u0026gt;\u0026gt; run.bat echo. \u0026gt;\u0026gt; run.bat echo endlocal \u0026gt;\u0026gt; run.bat :: clean.bat 생성 echo [6/8] clean.bat 생성 중... echo @echo off \u0026gt; clean.bat echo echo Cleaning build directory... \u0026gt;\u0026gt; clean.bat echo. \u0026gt;\u0026gt; clean.bat echo if exist build ( \u0026gt;\u0026gt; clean.bat echo rd /s /q build \u0026gt;\u0026gt; clean.bat echo echo Build directory removed successfully. \u0026gt;\u0026gt; clean.bat echo ) else ( \u0026gt;\u0026gt; clean.bat echo echo No build directory found. \u0026gt;\u0026gt; clean.bat echo ) \u0026gt;\u0026gt; clean.bat :: clean_all.bat 생성 echo [7/8] clean_all.bat 생성 중... echo @echo off \u0026gt; clean_all.bat echo echo Performing complete cleanup... \u0026gt;\u0026gt; clean_all.bat echo. \u0026gt;\u0026gt; clean_all.bat echo :: 빌드 디렉토리 삭제 \u0026gt;\u0026gt; clean_all.bat echo if exist build ( \u0026gt;\u0026gt; clean_all.bat echo rd /s /q build \u0026gt;\u0026gt; clean_all.bat echo echo Build directory removed. \u0026gt;\u0026gt; clean_all.bat echo ) \u0026gt;\u0026gt; clean_all.bat echo. \u0026gt;\u0026gt; clean_all.bat echo :: 프로젝트 루트의 Conan 생성 파일 삭제 \u0026gt;\u0026gt; clean_all.bat echo if exist conan_toolchain.cmake del /f /q conan_toolchain.cmake \u0026gt;\u0026gt; clean_all.bat echo if exist conaninfo.txt del /f /q conaninfo.txt \u0026gt;\u0026gt; clean_all.bat echo if exist conanbuildinfo.* del /f /q conanbuildinfo.* \u0026gt;\u0026gt; clean_all.bat echo if exist conan.lock del /f /q conan.lock \u0026gt;\u0026gt; clean_all.bat echo if exist CMakeUserPresets.json del /f /q CMakeUserPresets.json \u0026gt;\u0026gt; clean_all.bat echo. \u0026gt;\u0026gt; clean_all.bat echo :: 기타 VS 임시 파일 삭제 \u0026gt;\u0026gt; clean_all.bat echo if exist .vs rd /s /q .vs \u0026gt;\u0026gt; clean_all.bat echo if exist *.user del /f /q *.user \u0026gt;\u0026gt; clean_all.bat echo if exist *.sln del /f /q *.sln \u0026gt;\u0026gt; clean_all.bat echo if exist *.vcxproj* del /f /q *.vcxproj* \u0026gt;\u0026gt; clean_all.bat echo. \u0026gt;\u0026gt; clean_all.bat echo echo Cleanup completed. \u0026gt;\u0026gt; clean_all.bat :: VS Code 설정 파일 생성 echo [8/8] VS Code 설정 파일 생성 중... :: tasks.json echo { \u0026gt; .vscode\\tasks.json echo \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;tasks\u0026#34;: [ \u0026gt;\u0026gt; .vscode\\tasks.json echo { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;label\u0026#34;: \u0026#34;build\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;command\u0026#34;: \u0026#34;build.bat Debug\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;group\u0026#34;: { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;isDefault\u0026#34;: true \u0026gt;\u0026gt; .vscode\\tasks.json echo }, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;problemMatcher\u0026#34;: [\u0026#34;$msCompile\u0026#34;] \u0026gt;\u0026gt; .vscode\\tasks.json echo }, \u0026gt;\u0026gt; .vscode\\tasks.json echo { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;label\u0026#34;: \u0026#34;build-release\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;command\u0026#34;: \u0026#34;build.bat Release\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;group\u0026#34;: \u0026#34;build\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;problemMatcher\u0026#34;: [\u0026#34;$msCompile\u0026#34;] \u0026gt;\u0026gt; .vscode\\tasks.json echo }, \u0026gt;\u0026gt; .vscode\\tasks.json echo { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;label\u0026#34;: \u0026#34;run\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;command\u0026#34;: \u0026#34;run.bat\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;dependsOn\u0026#34;: [\u0026#34;build\u0026#34;], \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;group\u0026#34;: { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;kind\u0026#34;: \u0026#34;test\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;isDefault\u0026#34;: true \u0026gt;\u0026gt; .vscode\\tasks.json echo } \u0026gt;\u0026gt; .vscode\\tasks.json echo }, \u0026gt;\u0026gt; .vscode\\tasks.json echo { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;label\u0026#34;: \u0026#34;clean\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;command\u0026#34;: \u0026#34;clean.bat\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;problemMatcher\u0026#34;: [] \u0026gt;\u0026gt; .vscode\\tasks.json echo }, \u0026gt;\u0026gt; .vscode\\tasks.json echo { \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;label\u0026#34;: \u0026#34;clean-all\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;command\u0026#34;: \u0026#34;clean_all.bat\u0026#34;, \u0026gt;\u0026gt; .vscode\\tasks.json echo \u0026#34;problemMatcher\u0026#34;: [] \u0026gt;\u0026gt; .vscode\\tasks.json echo } \u0026gt;\u0026gt; .vscode\\tasks.json echo ] \u0026gt;\u0026gt; .vscode\\tasks.json echo } \u0026gt;\u0026gt; .vscode\\tasks.json :: launch.json echo { \u0026gt; .vscode\\launch.json echo \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;configurations\u0026#34;: [ \u0026gt;\u0026gt; .vscode\\launch.json echo { \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;name\u0026#34;: \u0026#34;Debug\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;type\u0026#34;: \u0026#34;cppvsdbg\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}\\\\build\\\\bin\\\\Debug\\\\%PROJECT_NAME%.exe\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;args\u0026#34;: [], \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;stopAtEntry\u0026#34;: false, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;environment\u0026#34;: [], \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;externalConsole\u0026#34;: false, \u0026gt;\u0026gt; .vscode\\launch.json echo \u0026#34;preLaunchTask\u0026#34;: \u0026#34;build\u0026#34; \u0026gt;\u0026gt; .vscode\\launch.json echo } \u0026gt;\u0026gt; .vscode\\launch.json echo ] \u0026gt;\u0026gt; .vscode\\launch.json echo } \u0026gt;\u0026gt; .vscode\\launch.json :: settings.json echo { \u0026gt; .vscode\\settings.json echo \u0026#34;cmake.configureOnOpen\u0026#34;: true, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;cmake.buildDirectory\u0026#34;: \u0026#34;${workspaceFolder}/build\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;cmake.defaultVariants\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;buildType\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;default\u0026#34;: \u0026#34;debug\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;description\u0026#34;: \u0026#34;The build type.\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;choices\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;debug\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;short\u0026#34;: \u0026#34;Debug\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;long\u0026#34;: \u0026#34;Debug build type\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;buildType\u0026#34;: \u0026#34;Debug\u0026#34; \u0026gt;\u0026gt; .vscode\\settings.json echo }, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;release\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;short\u0026#34;: \u0026#34;Release\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;long\u0026#34;: \u0026#34;Release build type\u0026#34;, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;buildType\u0026#34;: \u0026#34;Release\u0026#34; \u0026gt;\u0026gt; .vscode\\settings.json echo } \u0026gt;\u0026gt; .vscode\\settings.json echo } \u0026gt;\u0026gt; .vscode\\settings.json echo } \u0026gt;\u0026gt; .vscode\\settings.json echo }, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;files.associations\u0026#34;: { \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;*.h\u0026#34;: \u0026#34;c\u0026#34; \u0026gt;\u0026gt; .vscode\\settings.json echo }, \u0026gt;\u0026gt; .vscode\\settings.json echo \u0026#34;cmake.sourceDirectory\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; \u0026gt;\u0026gt; .vscode\\settings.json echo } \u0026gt;\u0026gt; .vscode\\settings.json :: .gitignore 생성 echo # 빌드 디렉토리 \u0026gt; .gitignore echo /build/ \u0026gt;\u0026gt; .gitignore echo /bin/ \u0026gt;\u0026gt; .gitignore echo /lib/ \u0026gt;\u0026gt; .gitignore echo. \u0026gt;\u0026gt; .gitignore echo # Visual Studio 파일 \u0026gt;\u0026gt; .gitignore echo .vs/ \u0026gt;\u0026gt; .gitignore echo *.user \u0026gt;\u0026gt; .gitignore echo *.suo \u0026gt;\u0026gt; .gitignore echo *.sln \u0026gt;\u0026gt; .gitignore echo *.vcxproj \u0026gt;\u0026gt; .gitignore echo *.vcxproj.filters \u0026gt;\u0026gt; .gitignore echo *.vcxproj.user \u0026gt;\u0026gt; .gitignore echo. \u0026gt;\u0026gt; .gitignore echo # Conan 파일 \u0026gt;\u0026gt; .gitignore echo conanbuildinfo.* \u0026gt;\u0026gt; .gitignore echo conaninfo.txt \u0026gt;\u0026gt; .gitignore echo conan.lock \u0026gt;\u0026gt; .gitignore echo conan_toolchain.cmake \u0026gt;\u0026gt; .gitignore echo CMakeUserPresets.json \u0026gt;\u0026gt; .gitignore echo. \u0026gt;\u0026gt; .gitignore echo # 임시 파일 \u0026gt;\u0026gt; .gitignore echo *.tmp \u0026gt;\u0026gt; .gitignore echo *.log \u0026gt;\u0026gt; .gitignore echo. echo =============================================== echo 초기화가 완료되었습니다! echo 프로젝트 이름: %PROJECT_NAME% echo. echo 다음 단계: echo 1. VS Code에서 프로젝트 열기 echo 2. \u0026#39;build.bat\u0026#39; 실행하여 프로젝트 빌드하기 echo 3. \u0026#39;run.bat\u0026#39; 실행하여 프로그램 실행하기 echo 4. VS Code에서 F5 키로 디버깅 시작하기 echo =============================================== endlocal "},{"id":44,"href":"/docs/shortcodes/katex/","title":"KaTeX","section":"Shortcodes","content":" KaTeX # KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample # {{\u0026lt; katex display=true \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} Display Mode Example # Here is some inline example: \\(\\pi(x)\\) , rendered in the same line. And below is display example, having display: block \\[ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi \\] Text continues here.\n"},{"id":45,"href":"/docs/book/terminal/neovim/config/keymaps.lua/","title":"keymaps.lua","section":"Docs","content":"-- Keymaps are automatically loaded on the VeryLazy event -- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua -- Add any additional keymaps here -- telescope local builtin = require(\u0026#34;telescope.builtin\u0026#34;) vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;ff\u0026#34;, builtin.find_files, { desc = \u0026#34;Telescope find files\u0026#34; }) vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;fg\u0026#34;, builtin.live_grep, { desc = \u0026#34;Telescope live grep\u0026#34; }) vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;fb\u0026#34;, builtin.buffers, { desc = \u0026#34;Telescope buffers\u0026#34; }) vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;fh\u0026#34;, builtin.help_tags, { desc = \u0026#34;Telescope help tags\u0026#34; }) "},{"id":46,"href":"/docs/book/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/kosta-2/","title":"kosta-2","section":"Docs","content":"네, MQTT Publisher, Broker, Subscriber, 그리고 API Server를 연동하는 전체적인 예제를 보여드리겠습니다.\n이 예제는 다음 구성 요소들을 포함합니다:\nMQTT Broker: Mosquitto (가장 대중적인 오픈소스 MQTT Broker) MQTT Publisher: Python 스크립트 (임베디드 장치 역할) MQTT Subscriber (API Server 연동 로직): Python 스크립트 (Broker에서 메시지를 받아 API Server로 전달) API Server: Go Gin 프레임워크 (이전 예제에서 사용한 API 서버) 1단계: Mosquitto MQTT Broker 설치 및 실행 # Mosquitto는 MQTT 연동을 위한 필수 요소입니다.\n설치: Ubuntu/Debian: sudo apt update \u0026amp;\u0026amp; sudo apt install mosquitto mosquitto-clients macOS (Homebrew): brew install mosquitto Windows: Mosquitto 공식 웹사이트에서 설치 파일을 다운로드합니다. 실행: 대부분의 OS에서 설치 후 자동으로 서비스로 실행됩니다. 수동 실행: mosquitto -c /etc/mosquitto/mosquitto.conf (설정 파일 경로는 OS마다 다를 수 있습니다) 기본 포트: 1883 Broker가 실행되는지 확인하는 가장 쉬운 방법은 Mosquitto 클라이언트를 사용하여 구독해보는 것입니다: 새로운 터미널을 열고 다음 명령어를 실행합니다:\nmosquitto_sub -h localhost -p 1883 -t \u0026#34;sensor/temperature\u0026#34; 이제 이 터미널은 sensor/temperature 토픽으로 오는 메시지를 기다리게 됩니다.\n2단계: Go API Server (이전 예제와 동일) # 이전 질문에서 제공된 Go API 서버 코드를 그대로 사용합니다. 이 서버는 /api/sensor_data와 같은 엔드포인트를 제공하여 센서 데이터를 받을 것입니다.\nAPI Server 코드 수정 (New Endpoint for Sensor Data):\nmain.go 파일에 SensorData 모델과 해당 createHandler를 추가해야 합니다.\n먼저, SensorData 구조체를 정의합니다:\n// main.go 파일 내 type SensorData struct { gorm.Model SensorID string `gorm:\u0026#34;type:varchar(50);not null\u0026#34;` Temperature float64 `gorm:\u0026#34;not null\u0026#34;` Humidity float64 `gorm:\u0026#34;not null\u0026#34;` Timestamp time.Time `gorm:\u0026#34;not null\u0026#34;` } 이제 initDB 함수에서 SensorData를 AutoMigrate에 추가합니다:\nfunc initDB() *gorm.DB { dsn := getDSN() db, err := gorm.Open(mysql.Open(dsn), \u0026amp;gorm.Config{}) if err != nil { log.Fatalf(\u0026#34;데이터베이스 연결 실패: %v\u0026#34;, err) } err = db.AutoMigrate( \u0026amp;Product{}, \u0026amp;Zone{}, \u0026amp;Vehicle{}, \u0026amp;OperationRecord{}, \u0026amp;OperationProduct{}, \u0026amp;SensorData{}, // --- 이 줄 추가 --- ) if err != nil { log.Fatalf(\u0026#34;데이터베이스 마이그레이션 실패: %v\u0026#34;, err) } log.Println(\u0026#34;데이터베이스 연결 및 마이그레이션 성공\u0026#34;) return db } 마지막으로 main 함수에서 SensorData 엔드포인트를 등록합니다:\nfunc main() { db := initDB() router := gin.Default() api := router.Group(\u0026#34;/api\u0026#34;) { // ... 기존 라우터들 ... // Sensor Data Endpoint api.POST(\u0026#34;/sensor_data\u0026#34;, createHandler[SensorData](db)) // --- 이 줄 추가 --- api.GET(\u0026#34;/sensor_data\u0026#34;, getAllHandler[SensorData](db)) // --- 이 줄 추가 --- } port := \u0026#34;:8080\u0026#34; log.Printf(\u0026#34;서버가 %s 포트에서 실행 중...\u0026#34;, port) if err := router.Run(port); err != nil { log.Fatalf(\u0026#34;서버 실행 실패: %v\u0026#34;, err) } } Go API 서버를 실행합니다:\ngo run main.go 3단계: MQTT Publisher (Python) - 임베디드 장치 역할 # 이 스크립트는 가상의 센서 데이터를 생성하여 MQTT Broker로 발행합니다.\n필요한 라이브러리 설치: pip install paho-mqtt\nmqtt_publisher.py:\nimport paho.mqtt.client as mqtt import time import json import random # MQTT Broker 설정 BROKER_ADDRESS = \u0026#34;localhost\u0026#34; BROKER_PORT = 1883 TOPIC = \u0026#34;sensor/temperature\u0026#34; # MQTT 클라이언트 초기화 client = mqtt.Client() def on_connect(client, userdata, flags, rc): if rc == 0: print(\u0026#34;MQTT Broker에 연결되었습니다!\u0026#34;) else: print(f\u0026#34;연결 실패, 에러 코드: {rc}\u0026#34;) client.on_connect = on_connect # 브로커에 연결 print(f\u0026#34;MQTT Broker ({BROKER_ADDRESS}:{BROKER_PORT})에 연결 시도...\u0026#34;) client.connect(BROKER_ADDRESS, BROKER_PORT, 60) client.loop_start() # 백그라운드 스레드에서 네트워크 루프 시작 try: sensor_id = \u0026#34;ESP32_001\u0026#34; print(f\u0026#34;센서 {sensor_id}로부터 데이터 발행 시작...\u0026#34;) while True: temperature = round(random.uniform(20.0, 30.0), 2) # 20.0 ~ 30.0 랜덤 온도 humidity = round(random.uniform(40.0, 60.0), 2) # 40.0 ~ 60.0 랜덤 습도 timestamp = int(time.time() * 1000) # 밀리초 단위 타임스탬프 payload = { \u0026#34;sensorID\u0026#34;: sensor_id, \u0026#34;temperature\u0026#34;: temperature, \u0026#34;humidity\u0026#34;: humidity, \u0026#34;timestamp\u0026#34;: timestamp } # 메시지 발행 client.publish(TOPIC, json.dumps(payload)) print(f\u0026#34;\u0026#39;{TOPIC}\u0026#39; 토픽 발행: {json.dumps(payload)}\u0026#34;) time.sleep(5) # 5초마다 데이터 발행 except KeyboardInterrupt: print(\u0026#34;발행 중단.\u0026#34;) finally: client.loop_stop() # 네트워크 루프 중지 client.disconnect() print(\u0026#34;MQTT 연결 해제.\u0026#34;) python mqtt_publisher.py 실행. Mosquitto 클라이언트(mosquitto_sub) 터미널에서 발행되는 메시지를 확인할 수 있을 겁니다.\n4단계: MQTT Subscriber (Python) - API Server 연동 로직 역할 # 이 스크립트는 MQTT Broker로부터 메시지를 구독하고, 수신된 메시지를 Go API 서버로 HTTP POST 요청을 통해 전달합니다.\n필요한 라이브러리 설치: pip install paho-mqtt requests\nmqtt_api_integrator.py:\nimport paho.mqtt.client as mqtt import requests import json import datetime # MQTT Broker 설정 BROKER_ADDRESS = \u0026#34;localhost\u0026#34; BROKER_PORT = 1883 TOPIC = \u0026#34;sensor/temperature\u0026#34; # API Server 설정 API_SERVER_URL = \u0026#34;http://localhost:8080/api/sensor_data\u0026#34; # MQTT 클라이언트 초기화 client = mqtt.Client() def on_connect(client, userdata, flags, rc): if rc == 0: print(\u0026#34;MQTT Broker에 연결되었습니다!\u0026#34;) client.subscribe(TOPIC) # 연결 성공 시 토픽 구독 print(f\u0026#34;토픽 \u0026#39;{TOPIC}\u0026#39; 구독 시작.\u0026#34;) else: print(f\u0026#34;연결 실패, 에러 코드: {rc}\u0026#34;) def on_message(client, userdata, msg): print(f\u0026#34;메시지 수신 - 토픽: {msg.topic}, 페이로드: {msg.payload.decode()}\u0026#34;) try: data = json.loads(msg.payload.decode()) # API 서버로 보낼 데이터 형식 변환 (Go 모델에 맞게) # Go의 time.Time은 ISO 8601 형식 문자열을 잘 처리합니다. # Python timestamp는 초 단위이므로, Go의 time.Time으로 변환하기 쉽도록 ISO 8601 문자열로 변환하는 것이 일반적입니다. # 고의 float64, Go의 string에 맞게. # timestamp가 밀리초 단위로 가정하고 초 단위로 변환 후 datetime 객체 생성 if \u0026#39;timestamp\u0026#39; in data: dt_object = datetime.datetime.fromtimestamp(data[\u0026#39;timestamp\u0026#39;] / 1000.0) data[\u0026#39;timestamp\u0026#39;] = dt_object.isoformat() + \u0026#34;Z\u0026#34; # GORM이 UTC 시간을 기대하므로 \u0026#39;Z\u0026#39; 추가 else: data[\u0026#39;timestamp\u0026#39;] = datetime.datetime.utcnow().isoformat() + \u0026#34;Z\u0026#34; # 필드 이름 매핑 api_payload = { \u0026#34;SensorID\u0026#34;: data.get(\u0026#34;sensorID\u0026#34;), \u0026#34;Temperature\u0026#34;: data.get(\u0026#34;temperature\u0026#34;), \u0026#34;Humidity\u0026#34;: data.get(\u0026#34;humidity\u0026#34;), \u0026#34;Timestamp\u0026#34;: data.get(\u0026#34;timestamp\u0026#34;) } # API 서버로 POST 요청 보내기 print(f\u0026#34;API 서버로 POST 요청 전송: {json.dumps(api_payload)}\u0026#34;) response = requests.post(API_SERVER_URL, json=api_payload) if response.status_code == 201: print(\u0026#34;데이터가 API 서버에 성공적으로 전송되었습니다.\u0026#34;) # print(response.json()) # API 서버 응답 확인 else: print(f\u0026#34;API 서버 전송 실패. 상태 코드: {response.status_code}, 응답: {response.text}\u0026#34;) except json.JSONDecodeError: print(\u0026#34;JSON 디코딩 오류: 유효하지 않은 페이로드입니다.\u0026#34;) except requests.exceptions.RequestException as e: print(f\u0026#34;API 서버 요청 중 오류 발생: {e}\u0026#34;) except Exception as e: print(f\u0026#34;예상치 못한 오류 발생: {e}\u0026#34;) client.on_connect = on_connect client.on_message = on_message # 브로커에 연결 print(f\u0026#34;MQTT Broker ({BROKER_ADDRESS}:{BROKER_PORT})에 연결 시도...\u0026#34;) client.connect(BROKER_ADDRESS, BROKER_PORT, 60) # 네트워크 루프를 무한정 실행하여 메시지 대기 client.loop_forever() python mqtt_api_integrator.py 실행.\n전체 시스템 동작 시나리오: # Mosquitto Broker가 실행됩니다 (mosquitto). Go API Server가 실행됩니다 (go run main.go). /api/sensor_data 엔드포인트를 통해 센서 데이터를 받을 준비를 합니다. MQTT Publisher (mqtt_publisher.py)가 실행됩니다. 5초마다 가상의 센서 데이터를 JSON 형식으로 만들어 sensor/temperature 토픽으로 MQTT Broker에 발행합니다. MQTT Subscriber (API Integrator) (mqtt_api_integrator.py)가 실행됩니다. sensor/temperature 토픽을 구독하여 MQTT Broker로부터 Publisher가 보낸 메시지를 실시간으로 수신합니다. Subscriber는 수신된 MQTT 메시지(JSON 페이로드)를 파싱하고, Go API 서버의 SensorData 모델에 맞는 형식으로 데이터를 준비합니다. Subscriber는 준비된 데이터를 Go API 서버의 /api/sensor_data 엔드포인트로 HTTP POST 요청을 보냅니다. Go API 서버는 이 POST 요청을 받아 데이터를 데이터베이스에 저장합니다. 저장 성공 시 201 Created 응답을 Subscriber에게 보냅니다. 이제 Postman이나 cURL을 사용하여 Go API 서버의 /api/sensor_data 엔드포인트에 GET 요청을 보내면 데이터베이스에 저장된 센서 데이터 목록을 확인할 수 있습니다:\ncurl http://localhost:8080/api/sensor_data 이 예제는 임베디드 장치와 클라우드/API 서버 간의 MQTT 기반 데이터 파이프라인의 기본적인 형태를 보여줍니다. 실제 프로덕션 환경에서는 보안(TLS/SSL, 인증), 에러 처리, 재시도 로직, 고가용성 등을 위한 더 많은 고려가 필요합니다.\n"},{"id":47,"href":"/docs/book/text-editor/helix/config/config.toml/","title":"language.toml","section":"Docs","content":"# ~/.config/helix/config.toml theme = \u0026#34;onedark\u0026#34; [editor] line-number = \u0026#34;relative\u0026#34; mouse = true [editor.cursor-shape] insert = \u0026#34;bar\u0026#34; normal = \u0026#34;block\u0026#34; select = \u0026#34;underline\u0026#34; [editor.file-picker] hidden = false [editor.soft-wrap] enable = true [keys.normal] A-up = [\u0026#34;extend_to_line_bounds\u0026#34;, \u0026#34;delete_selection\u0026#34;, \u0026#34;move_line_up\u0026#34;, \u0026#34;paste_before\u0026#34;] A-down = [\u0026#34;extend_to_line_bounds\u0026#34;, \u0026#34;delete_selection\u0026#34;, \u0026#34;paste_after\u0026#34;] [keys.insert] C-s = \u0026#34;:w\u0026#34; "},{"id":48,"href":"/docs/book/text-editor/helix/config/languages.toml/","title":"language.toml","section":"Docs","content":"# ~/.config/helix/languages.toml # Go [language-server.gopls] command = \u0026#34;gopls\u0026#34; args = [\u0026#34;serve\u0026#34;] [[language]] name = \u0026#34;go\u0026#34; scope = \u0026#34;source.go\u0026#34; file-types = [\u0026#34;go\u0026#34;] language-servers = [\u0026#34;gopls\u0026#34;] formatter = { command = \u0026#34;goimports\u0026#34; } auto-format = true # Rust [[language]] name = \u0026#34;rust\u0026#34; scope = \u0026#34;source.rust\u0026#34; file-types = [\u0026#34;rs\u0026#34;] language-servers = [\u0026#34;rust-analyzer\u0026#34;] formatter = { command = \u0026#34;rustfmt\u0026#34; } auto-format = true "},{"id":49,"href":"/docs/book/terminal/neovim/config/lazy.lua/","title":"lazy.lua","section":"Docs","content":"local lazypath = vim.fn.stdpath(\u0026#34;data\u0026#34;) .. \u0026#34;/lazy/lazy.nvim\u0026#34; if not (vim.uv or vim.loop).fs_stat(lazypath) then local lazyrepo = \u0026#34;https://github.com/folke/lazy.nvim.git\u0026#34; local out = vim.fn.system({ \u0026#34;git\u0026#34;, \u0026#34;clone\u0026#34;, \u0026#34;--filter=blob:none\u0026#34;, \u0026#34;--branch=stable\u0026#34;, lazyrepo, lazypath }) if vim.v.shell_error ~= 0 then vim.api.nvim_echo({ { \u0026#34;Failed to clone lazy.nvim:\\n\u0026#34;, \u0026#34;ErrorMsg\u0026#34; }, { out, \u0026#34;WarningMsg\u0026#34; }, { \u0026#34;\\nPress any key to exit...\u0026#34; }, }, true, {}) vim.fn.getchar() os.exit(1) end end vim.opt.rtp:prepend(lazypath) require(\u0026#34;lazy\u0026#34;).setup({ spec = { -- add LazyVim and import its plugins { \u0026#34;LazyVim/LazyVim\u0026#34;, import = \u0026#34;lazyvim.plugins\u0026#34; }, -- import/override with your plugins { import = \u0026#34;plugins\u0026#34; }, }, defaults = { -- By default, only LazyVim plugins will be lazy-loaded. Your custom plugins will load during startup. -- If you know what you\u0026#39;re doing, you can set this to `true` to have all your custom plugins lazy-loaded by default. lazy = false, -- It\u0026#39;s recommended to leave version=false for now, since a lot the plugin that support versioning, -- have outdated releases, which may break your Neovim install. version = false, -- always use the latest git commit -- version = \u0026#34;*\u0026#34;, -- try installing the latest stable version for plugins that support semver }, install = { colorscheme = { \u0026#34;tokyonight\u0026#34;, \u0026#34;habamax\u0026#34; } }, checker = { enabled = true, -- check for plugin updates periodically notify = false, -- notify on update }, -- automatically check for plugin updates performance = { rtp = { -- disable some rtp plugins disabled_plugins = { \u0026#34;gzip\u0026#34;, -- \u0026#34;matchit\u0026#34;, -- \u0026#34;matchparen\u0026#34;, -- \u0026#34;netrwPlugin\u0026#34;, \u0026#34;tarPlugin\u0026#34;, \u0026#34;tohtml\u0026#34;, \u0026#34;tutor\u0026#34;, \u0026#34;zipPlugin\u0026#34;, }, }, }, }) "},{"id":50,"href":"/docs/book/ssl/letsencrypt-%EC%9E%90%EB%8F%99%EA%B0%B1%EC%8B%A0/","title":"Letsencrypt 자동갱신","section":"Docs","content":"cd /bin sudo vim letsencrypt.sh #!/bin/sh sudo service nginx stop sudo certbot renew \u0026gt; ~/server/certbot/le_renew.log sudo fuser -k 80/tcp sudo service nginx start sudo chmod +x letsencrypt.sh sudo crontab -e 30 4 * * 0 letsencrypt.sh sudo service cron start 참고사이트 # https://www.owl-dev.me/blog/42 https://devlog.jwgo.kr/2019/04/16/how-to-lets-encrypt-ssl-renew/\n"},{"id":51,"href":"/docs/book/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/mtc/","title":"MTC","section":"Docs","content":" 폰트 사이즈 # 64 56 48 40 36 32 28 24 20 18 16 14\n간격 # 16px 32px 64px\n색상 # efefef bfbfbf\n"},{"id":52,"href":"/docs/book/terminal/neovim/plugins/oil.lua/","title":"oil.lua","section":"Docs","content":"return { \u0026#34;stevearc/oil.nvim\u0026#34;, dependencies = { \u0026#34;nvim-tree/nvim-web-devicons\u0026#34; }, config = function() require(\u0026#34;oil\u0026#34;).setup({ -- 기본 파일 탐색기 설정 default_file_explorer = true, columns = { \u0026#34;icon\u0026#34;, \u0026#34;permissions\u0026#34;, \u0026#34;size\u0026#34; }, view_options = { show_hidden = true, }, }) -- 🔥 \u0026#39;-\u0026#39; 키로 oil.nvim 파일 탐색기 열도록 설정 vim.keymap.set(\u0026#34;n\u0026#34;, \u0026#34;-\u0026#34;, \u0026#34;\u0026lt;cmd\u0026gt;Oil\u0026lt;CR\u0026gt;\u0026#34;, { silent = true }) end, } "},{"id":53,"href":"/docs/book/%EC%9B%90%EA%B2%A9-%EC%A0%80%EC%9E%A5%EC%86%8C/oracle/oracle-%EC%97%B0%EA%B2%B0/","title":"Oracle 연결","section":"Docs","content":"ssh -i /Oracle/Project/ssh-key-2023-07-24.key ubuntu@158.180.88.241\n"},{"id":54,"href":"/docs/book/terminal/pid-%EC%A3%BD%EC%9D%B4%EA%B8%B0/","title":"PID 죽이기","section":"Docs","content":"리눅스 sudo kill -9 13617\n터미널 kill -9 %1\n"},{"id":55,"href":"/docs/book/terminal/zsh/plugin/","title":"plugin","section":"Docs","content":"# zsh-autosuggestions git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions # zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting # powerlevel10k git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k "},{"id":56,"href":"/docs/book/%ED%8C%A8%ED%82%A4%EC%A7%80-%EA%B4%80%EB%A6%AC%EC%9E%90/npm/pm2/","title":"pm2","section":"Docs","content":"# 설치 npm install pm2 -g # 시작 pm2 start npm --name webapp -- run start -- -p 8080 # 재시작 pm2 stop nextjs-app pm2 stop all pm2 delete all # bun pm2 start bun --name \u0026#34;webapp\u0026#34; -- run start -- --port 8080 "},{"id":57,"href":"/docs/book/terminal/zsh/powerlevel10k/","title":"Powerlevel10k","section":"Docs","content":"git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k ~/.zshrc\nZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; "},{"id":58,"href":"/docs/book/ai/model/qwen-2.5-coder/","title":"Qwen 2.5 Coder","section":"Docs","content":" 32B # temperature: 0.1 top p: 0.9\n"},{"id":59,"href":"/docs/book/ssl/ssl-%EC%9D%B8%EC%A6%9D-%EB%B0%9B%EA%B8%B0/","title":"SSL 인증 받기","section":"Docs","content":"# SSL 발급을 위한 디렉토리 생성 sudo mkdir -p /var/www/letsencrypt/.well-known/acme-challenge sudo apt update # apt 업데이트 # nginx 설치 sudo apt install nginx-core # ubuntu 계정에 권한 및 파일 수정 권한을 부여 sudo touch /etc/nginx/snippets/letsencrypt.conf sudo chown root:ubuntu /etc/nginx/snippets/letsencrypt.conf sudo chmod 775 /etc/nginx/snippets/letsencrypt.conf # /etc/nginx/snippets/letsencrypt.conf 열기 sudo vi /etc/nginx/snippets/letsencrypt.conf # /etc/nginx/snippets/letsencrypt.conf 파일에 아래 텍스트 입력 후 저장 location ^~ /.well-known/acme-challenge/ { default_type \u0026#34;text/plain\u0026#34;; root /var/www/letsencrypt; } # /etc/nginx/sites-available/default 파일 수정 sudo vi /etc/nginx/sites-available/default ## # You should look at the following URL\u0026#39;s in order to grasp a solid understanding # of Nginx configuration files in order to fully unleash the power of Nginx. # https://www.nginx.com/resources/wiki/start/ # https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/ # https://wiki.debian.org/Nginx/DirectoryStructure # # In most cases, administrators will remove this file from sites-enabled/ and # leave it as reference inside of sites-available where it will continue to be # updated by the nginx packaging team. # # This file will automatically load configuration files provided by other # applications, such as Drupal or Wordpress. These applications will be made # available underneath a path with that package name, such as /drupal8. # # Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples. ## # Default server configuration # server { listen 80 default_server; listen [::]:80 default_server; # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 # # Read up on ssl_ciphers to ensure a secure configuration. # See: https://bugs.debian.org/765782 # # Self signed certs generated by the ssl-cert package # Don\u0026#39;t use them in a production server! # # include snippets/snakeoil.conf; root /var/www/html; # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html; server_name _; # _를 example.com 처럼 바꿈 include /etc/nginx/snippets/letsencrypt.conf; location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; } # pass PHP scripts to FastCGI server # #location ~ \\.php$ { # include snippets/fastcgi-php.conf; # # # With php-fpm (or other unix sockets): # fastcgi_pass unix:/run/php/php7.4-fpm.sock; # # With php-cgi (or other tcp sockets): # fastcgi_pass 127.0.0.1:9000; #} # deny access to .htaccess files, if Apache\u0026#39;s document root # concurs with nginx\u0026#39;s one # #location ~ /\\.ht { # deny all; #} } # Virtual Host configuration for example.com # # You can move that to a different file under sites-available/ and symlink that # to sites-enabled/ to enable it. # #server { # listen 80; # listen [::]:80; # # server_name example.com; # # root /var/www/example.com; # index index.html; # # location / { # try_files $uri $uri/ =404; # } #} # nginx 적용 sudo nginx -t # nginx 다시시작 sudo service nginx restart # snap core 설치 sudo snap install core; sudo snap refresh core # certbot 구버전 제거 sudo apt remove certbot # snap으로 certbot 신버전 설치 sudo snap install --classic certbot # /snap/bin/certbot -\u0026gt; /usr/bin/certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot # ssl 인증서 받기 # example@example.com을 자신의 이메일로 바꾸고, example.com을 자신의 도메인으로 바꾼다 sudo certbot certonly --webroot --agree-tos --no-eff-email --email example@example.com -w /var/www/letsencrypt -d example.com -d www.example.com # 인증서 위치 확인 sudo ls /etc/letsencrypt/live/ # 인증서 확인 sudo ls -al /etc/letsencrypt/live/example.com // 자신의 도메인을 example.com처럼 입력한다 # 자동 업데이트 테스트 sudo certbot renew --dry-run # pem 파일 확인 sudo ls -al /etc/letsencrypt/live/example.com # 인증서 적용 sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096 # /etc/nginx/snippets/ssl.conf를 열기 sudo vi /etc/nginx/snippets/ssl.conf # /etc/nginx/snippets/ssl.conf에 밑에 코드 복사 후 저장 ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets off; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; ssl_dhparam /etc/nginx/dhparam.pem; ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384; ssl_ecdh_curve secp384r1; ssl_prefer_server_ciphers on; ssl_stapling on; ssl_stapling_verify on; resolver 8.8.8.8 8.8.4.4; add_header Strict-Transport-Security \u0026#34;max-age=15768000; includeSubdomains; preload\u0026#34;; add_header X-Content-Type-Options nosniff; add_header X-Frame-Options \u0026#34;SAMEORIGIN\u0026#34;; # /etc/nginx/snippets/ssl.conf 접근 권한 막기 sudo chmod 644 /etc/nginx/snippets/ssl.conf # /etc/nginx/sites-available/default 열기 sudo vi /etc/nginx/sites-available/default # /etc/nginx/sites-available/default에 밑에 내용 복사 후 저장. example.com은 자신의 도메인으로 바꾼다 # Default HTTPS server configuration server { listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name example.com; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/example.com/fullchain.pem; include /etc/nginx/snippets/ssl.conf; root /var/www/html; index index.php index.html index.htm index.nginx-debian.html; location / { #try_files $uri $uri/ =404; #if (!-e $request_filename) { # rewrite ^.*$ /index.php last; #} proxy_pass http://localhost:8080; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.4-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; fastcgi_read_timeout 300; } location ~ /\\.ht { deny all; } } # HTTPS www. server configuration server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name www.example.com; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; ssl_trusted_certificate /etc/letsencrypt/live/example.com/fullchain.pem; include /etc/nginx/snippets/ssl.conf; location / { return 301 https://example.com$request_uri; } } # Default server configuration server { listen 80; listen [::]:80 default_server; server_name example.com; include /etc/nginx/snippets/letsencrypt.conf; location / { return 301 https://example.com$request_uri; } } # HTTP - CNAME Connect www.example.com to example.com server { listen 80; listen [::]:80; server_name www.example.com; include /etc/nginx/snippets/letsencrypt.conf; location / { return 301 https://www.example.com$request_uri; } } sudo nginx -t sudo service nginx restart # 갱신 방법 sudo certbot renew --dry-run # 갱신 방법 2 sudo certbot certonly --webroot --agree-tos --no-eff-email --email 이메일주소 -w /var/www/letsencrypt -d 도메인주소 -d www.도메인주소 참고사이트 # [https://techhans.tistory.com/41] [https://devbono.com/https-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0lets-encrypt-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%82%AC%EC%9A%A9/]\n"},{"id":60,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/css/table/","title":"Table","section":"Docs","content":"width: 100%임에도 불구하고 화면 밖으로 나가는 문제\n해결:\ntable { table-layout: fixed; } "},{"id":61,"href":"/docs/book/terminal/neovim/plugins/telescope.lua/","title":"telescope.lua","section":"Docs","content":"return { \u0026#34;nvim-telescope/telescope.nvim\u0026#34;, dependencies = { \u0026#34;nvim-lua/plenary.nvim\u0026#34; }, config = function() require(\u0026#34;telescope\u0026#34;).setup({ defaults = { file_ignore_patterns = { \u0026#34;node_modules\u0026#34;, \u0026#34;.git/\u0026#34;, \u0026#34;dist\u0026#34; }, }, pickers = { live_grep = { additional_args = function(_) return { \u0026#34;--hidden\u0026#34;, \u0026#34;--smart-case\u0026#34; } end, }, }, }) end, } "},{"id":62,"href":"/docs/book/docker/ubuntu%EC%97%90-%EC%84%A4%EC%B9%98/","title":"Ubuntu에 설치","section":"Docs","content":"# Add Docker\u0026#39;s official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;${UBUNTU_CODENAME:-$VERSION_CODENAME}\u0026#34;) stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin sudo docker run hello-world "},{"id":63,"href":"/docs/book/git/username-password-%EC%A0%80%EC%9E%A5/","title":"username password 저장","section":"Docs","content":"git config --global user.name 이름 git config --global user.email 이메일 "},{"id":64,"href":"/docs/book/docker/containers-images-volumes-builds-%EC%82%AD%EC%A0%9C/","title":"volume 삭제","section":"Docs","content":" Containers 삭제 # docker container prune Images 삭제 # docker image prune \bVolumes 삭제 # docker volume prune Builds 삭제 # docker builder prune "},{"id":65,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/cc++/xmake/xmake.lua/","title":"xmake.lua","section":"Docs","content":"-- 프로젝트 기본 설정 set_project(\u0026#34;MyProject\u0026#34;) set_version(\u0026#34;0.0.0\u0026#34;) set_languages(\u0026#34;c99\u0026#34;) -- 공통 라이브러리 (코드 중복 방지) target(\u0026#34;common_lib\u0026#34;) set_kind(\u0026#34;static\u0026#34;) add_files(\u0026#34;include/*/*.c\u0026#34;) add_includedirs(\u0026#34;include\u0026#34;) add_headerfiles(\u0026#34;include/*/*.h\u0026#34;) -- 메인 애플리케이션 target(\u0026#34;main\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) add_files(\u0026#34;src/*.c\u0026#34;) add_includedirs(\u0026#34;src\u0026#34;, \u0026#34;include\u0026#34;) add_deps(\u0026#34;common_lib\u0026#34;) -- 공통 라이브러리 의존성 추가 -- 테스트 타겟 target(\u0026#34;test\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) add_files(\u0026#34;tests/*.c\u0026#34;) add_includedirs(\u0026#34;tests\u0026#34;, \u0026#34;include\u0026#34;) add_deps(\u0026#34;common_lib\u0026#34;) -- 공통 라이브러리 의존성 추가 add_defines(\u0026#34;TESTING\u0026#34;) -- 테스트 전용 매크로 -- 필요한 경우에만 특별한 실행 설정 추가 -- on_run(function(target) -- os.execv(target:targetfile(), {\u0026#34;--verbose\u0026#34;}) -- 예: 특별한 인자 전달 -- end) "},{"id":66,"href":"/docs/book/terminal/zsh/zsh-oh-my-zsh/","title":"zsh (Oh-My-Zsh)","section":"Docs","content":"# 설치 sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; nano ~/.zshrc # ~/.zshrc export ZSH=\u0026#34;$HOME/.oh-my-zsh\u0026#34; ZSH_THEME=\u0026#34;robbyrussell\u0026#34; export EDITOR=nvim plugins=(git zsh-syntax-highlighting zsh-autosuggestions) source $ZSH/oh-my-zsh.sh eval \u0026#34;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\u0026#34; prompt_context() { if [[ \u0026#34;$USER\u0026#34; != \u0026#34;$DEFAULT_USER\u0026#34; || -n \u0026#34;$SSH_CLIENT\u0026#34; ]]; then prompt_segment black default \u0026#34;%(!.%{%F{yellow}%}.)$USER\u0026#34; fi } # 플러그인 설치 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH/custom/plugins/zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH/custom/plugins/zsh-autosuggestions source ~/.zshrc "},{"id":67,"href":"/docs/book/terminal/zsh/zshrc/","title":"zshrc","section":"Docs","content":"# Powerlevel10k Instant Prompt if [[ -r \u0026#34;${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\u0026#34; ]]; then source \u0026#34;${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh\u0026#34; fi # Oh My Zsh Setup export ZSH=\u0026#34;$HOME/.oh-my-zsh\u0026#34; ZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; # Plugins plugins=( git zsh-autosuggestions zsh-syntax-highlighting # 필요한 다른 플러그인 추가 ) source $ZSH/oh-my-zsh.sh # Homebrew completions if type brew \u0026amp;\u0026gt;/dev/null; then FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH fi # Tool Initializations \u0026amp; Paths [ -s \u0026#34;/Users/choidaruhan/.bun/_bun\u0026#34; ] \u0026amp;\u0026amp; source \u0026#34;/Users/choidaruhan/.bun/_bun\u0026#34; export BUN_INSTALL=\u0026#34;$HOME/.bun\u0026#34; export PATH=\u0026#34;$BUN_INSTALL/bin:$PATH\u0026#34; export PATH=\u0026#34;$PATH:/Users/choidaruhan/.cache/lm-studio/bin\u0026#34; source \u0026lt;(ng completion script) # Conda Init (Installer Managed) __conda_setup=\u0026#34;$(\u0026#39;/Users/choidaruhan/miniconda3/bin/conda\u0026#39; \u0026#39;shell.zsh\u0026#39; \u0026#39;hook\u0026#39; 2\u0026gt; /dev/null)\u0026#34; if [ $? -eq 0 ]; then eval \u0026#34;$__conda_setup\u0026#34; else if [ -f \u0026#34;/Users/choidaruhan/miniconda3/etc/profile.d/conda.sh\u0026#34; ]; then . \u0026#34;/Users/choidaruhan/miniconda3/etc/profile.d/conda.sh\u0026#34; else export PATH=\u0026#34;/Users/choidaruhan/miniconda3/bin:$PATH\u0026#34; fi fi unset __conda_setup # Pyenv Init export PYENV_ROOT=\u0026#34;$HOME/.pyenv\u0026#34; command -v pyenv \u0026gt;/dev/null || export PATH=\u0026#34;$PYENV_ROOT/bin:$PATH\u0026#34; eval \u0026#34;$(pyenv init -)\u0026#34; # NVM Init export NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;$NVM_DIR/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/nvm.sh\u0026#34; [ -s \u0026#34;$NVM_DIR/bash_completion\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/bash_completion\u0026#34; # Java/Android/Dart/Pub Paths export JAVA_HOME=$(/usr/libexec/java_home -v 17) export PATH=\u0026#34;$JAVA_HOME/bin:$PATH\u0026#34; export ANDROID_HOME=/Users/choidaruhan/Library/Android/sdk export ANDROID_SDK_ROOT=\u0026#34;/Users/choidaruhan/Library/Android/sdk\u0026#34; export ANDROID_NDK_HOME=\u0026#34;$ANDROID_HOME/ndk/27.0.12077973\u0026#34; export NDK_HOME=\u0026#34;$ANDROID_NDK_HOME\u0026#34; export PATH=\u0026#34;$PATH:$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/platform-tools\u0026#34; export PATH=$PATH:$HOME/.pub-cache/bin # Dart completion [[ -f /Users/choidaruhan/.dart-cli-completion/zsh-config.zsh ]] \u0026amp;\u0026amp; . /Users/choidaruhan/.dart-cli-completion/zsh-config.zsh || true # Powerlevel10k config (Should be near the end) [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh "},{"id":68,"href":"/docs/book/terminal/iterm2/zshrc-%EC%84%A4%EC%A0%95/","title":"zshrc 설정","section":"Docs","content":"# ~/.zshrc 설정 # 기존 테마 설정 # ZSH_THEME=\u0026#34;agnoster\u0026#34; # 테마 수정 ZSH_THEME=\u0026#34;agnoster\u0026#34; # 컴퓨터 이름 제거 prompt_context() { if [[ \u0026#34;$USER\u0026#34; != \u0026#34;$DEFAULT_USER\u0026#34; || -n \u0026#34;$SSH_CLIENT\u0026#34; ]]; then prompt_segment black default \u0026#34;%(!.%{%F{yellow}%}.)$USER\u0026#34; fi } "},{"id":69,"href":"/docs/book/git/%EA%B0%95%EC%A0%9C-%EB%B3%91%ED%95%A9/","title":"강제 병합","section":"Docs","content":"git fetch --all git reset --hard origin/main git pull origin main # main 브랜치에 hotfix를 덮어씌우기 git checkout main git merge --no-ff hotfix "},{"id":70,"href":"/docs/book/web/nextjs/%EA%B5%AC%EC%A1%B0/","title":"구조","section":"Docs","content":"NextJS 웹앱의 권장 폴더 구조는 다음과 같습니다:\nmy-nextjs-app/ ├── app/ │ ├── api/ │ ├── (routes)/ │ ├── layout.tsx │ └── page.tsx ├── components/ ├── lib/ ├── public/ ├── styles/ ├── types/ ├── utils/ ├── .env.local ├── .gitignore ├── next.config.js ├── package.json └── tsconfig.json 주요 폴더 및 파일의 설명:\napp/: 라우팅 및 페이지 컴포넌트 api/: API 라우트 (routes)/: 그룹화된 라우트 components/: 재사용 가능한 UI 컴포넌트 lib/: 외부 라이브러리 및 API public/: 정적 파일 styles/: 전역 스타일 및 CSS 모듈 types/: TypeScript 타입 정의 utils/: 유틸리티 함수 이 구조는 NextJS 13 이상의 App Router를 기반으로 합니다. 프로젝트의 규모와 요구사항에 따라 조정할 수 있습니다.\n"},{"id":71,"href":"/docs/book/terminal/%EA%B6%8C%ED%95%9C-%EC%84%A4%EC%A0%95/","title":"권한 설정","section":"Docs","content":"chmod -R 755 파일_또는_디렉토리_경로 chmod +w 파일_또는_디렉토리_경로\n"},{"id":72,"href":"/docs/book/latex/%EA%B8%B0%ED%98%B8-%EB%AA%A8%EC%9D%8C/","title":"기호 모음","section":"Docs","content":"$$ ... % 여러줄 $$ $...$ % 한 줄 $x \\notin A$ % 한 줄 $x \\notin A$\n$\\therefore$ % 결론적으로 $\\therefore$\n$\\because$ % 왜냐하면 $\\because$\n$\\quad$ % 공백 $\\quad$\n$\\left{ \\cdots \\right}$ % 중괄호 $\\left[ \\cdots \\right]$ % 대괄호 $\\left\\vert \\cdots \\right\\vert$ % 바, \\vert, \\mid, \\lvert, \\rvert $\\left{ \\cdots \\right}$ $\\left[ \\cdots \\right]$ $\\left\\vert \\cdots \\right\\vert$\n$\\cdots$ % 수평 ... $\\vdots$ % 수직 ... $\\cdots$ $\\vdots$\n% 여러 줄 수식 정렬 $$ \\begin{array}{\bl} % 왼쪽 정렬 \\end{array} $$ $$ \\begin{array}{r} % 오른쪽 정렬 \\end{array} $$ $$ \\begin{array}{c} % 중앙 정렬 \\end{array} $$ $$ \\begin{aligned} % 오른쪽 정렬, 기호 부등호 정렬 시 유용 \\end{aligned} $$ % 사용 예 $$ \\left\\{ \\begin{array}{\b\bl} a_{11} X_{1} + a_{12} X_{2} + \\cdots + a_{1n} X_{n} = b_{1} \\\\ a_{21} X_{1} + a_{22} X_{2} + \\cdots + a_{2n} X_{n} = b_{2} \\\\ \\vdots \\\\ a_{n1} X_{1} + a_{n2} X_{2} + \\cdots + a_{nn} X_{n} = b_{n} \\end{array} \\right\\} $$ $$ \\left{ \\begin{array}{c} a_{11} X_{1} + a_{12} X_{2} + \\cdots + a_{1n} X_{n} = b_{1} \\ a_{21} X_{1} + a_{22} X_{2} + \\cdots + a_{2n} X_{n} = b_{2} \\ \\vdots \\ a_{n1} X_{1} + a_{n2} X_{2} + \\cdots + a_{nn} X_{n} = b_{n} \\end{array} \\right} $$\n% 사용 예 $$ x_{j} = \\left\\vert \\begin{array}{c} a_{11} \\quad a_{12} \\quad \\cdots \\quad a_{1j-1} \\quad b_{1} \\quad a_{1j+1} \\cdots \\quad a_{1n} \\\\ a_{21} \\quad a_{22} \\quad \\cdots \\quad a_{2j-1} \\quad b_{2} \\quad a_{2j+1} \\cdots \\quad a_{2n} \\\\ \\vdots \\\\ a_{n1} \\quad a_{n2} \\quad \\cdots \\quad a_{nj-1} \\quad b_{n} \\quad a_{nj+1} \\cdots \\quad a_{nn} \\\\ \\end{array} \\right\\vert $$ $$ x_{j} = \\left\\vert \\begin{array}{c} a_{11} \\quad a_{12} \\quad \\cdots \\quad a_{1j-1} \\quad b_{1} \\quad a_{1j+1} \\cdots \\quad a_{1n} \\ a_{21} \\quad a_{22} \\quad \\cdots \\quad a_{2j-1} \\quad b_{2} \\quad a_{2j+1} \\cdots \\quad a_{2n} \\ \\vdots \\ a_{n1} \\quad a_{n2} \\quad \\cdots \\quad a_{nj-1} \\quad b_{n} \\quad a_{nj+1} \\cdots \\quad a_{nn} \\ \\end{array} \\right\\vert (단, j = 1,2, \\cdots, n) $$\n$\\epsilon$ $\\epsilon$\n$|\\alpha - \\alpha\u0026#39;|$ $|\\alpha - \\alpha\u0026rsquo;|$\n$\\frac{a}{b}$ $\\frac{a}{b}$\n서로 다른 두 값 $\\alpha, \\alpha\u0026rsquo;$이 수열 ${a_n}$의 극한값이라고 가정하자. 그렇다면 임의의 양수 $\\epsilon$에 대하여 $|\\alpha - \\alpha\u0026rsquo;| \u0026gt; \\epsilon$이고 극한값의 정의에 따라 $n \u0026gt; N_1$에 대해 $|a_n - \\alpha| \u0026lt; \\frac{\\epsilon}{2}$을 만족하는 $N_1$이 존재하고, $n \u0026gt; N_2$에 대해 $|a_n - \\alpha\u0026rsquo;| \u0026lt; \\frac{\\epsilon}{2}$을 만족하는 $N_2$가 존재한다. 그렇다면 $n \u0026gt; max{N1, N2}$에 대해 $|\\alpha - \\alpha\u0026rsquo;| \\leq |\\alpha - \\alpha_n| + |a_n - \\alpha\u0026rsquo;| \u0026lt; \\epsilon$이 되어 $|\\alpha - \\alpha\u0026rsquo;| \u0026gt; \\epsilon$과 모순이다. 따라서 수렴하는 수열의 극한값은 유일하다.\n$\\to$ $\\rightarrow$\n"},{"id":73,"href":"/docs/book/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/blog/","title":"다루한의 블로그","section":"Docs","content":"색상 rgb(30,30,30), rgb(130,130,130), rgb(230,230,230)\n글자 font-weight: 300, 400, 700\n할 일: http3으로 업그레이드 cdn이 뭔지 알아보기 번들링 알아보기 캐싱 컨트롤 알아보기 마지막 수정 날짜를 보고 캐싱 파일 빠꾸 먹이기\n"},{"id":74,"href":"/docs/book/git/%EB%A8%B8%EC%A7%80-%EC%B7%A8%EC%86%8C/","title":"머지 취소","section":"Docs","content":"git reset --hard [commit]\n"},{"id":75,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/sql/%EB%AC%B8%EB%B2%95/","title":"문법","section":"Docs","content":"ALTER DROP SELECT FROM ADD MODIFY CHANGE TABLE WHERE INSERT INTO DELETE UPDATE GRANT ALL On -- 데이터 정의 언어 (DDL: Data Definition Language) CREATE -- 데이터 조작 언어 (DML: Data Manipulation Language) -- 데이터 제어 언어 (DCL: Data Control Language) "},{"id":76,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/%EB%82%98%EB%A7%8C%EC%9D%98-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/%EB%AC%B8%EB%B2%95/","title":"문법","section":"Docs","content":" 소개 # // C언어 #include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;Hello, World!\\n\u0026#34;); } Hello, World! std: lib.std; pub main(): return std.out(\u0026#34;Hello, World!\u0026#34;); ; Hello, World! 핵심 내용 # int4 a: 10; // 4바이트 정수에 숫자 10 할당 구조체 # pub Person{}: str name: \u0026#34;이름\u0026#34;; str phone: \u0026#34;010-1234-5678\u0026#34; str email: \u0026#34;example@example.com\u0026#34; (name, phone, email): (.name, .phone, .email); ; 변수 # i4 int: 10; // 4바이트 정수에 숫자 10 할당 f8 float: 0.1234 // 8바이트 부동소수 s string: \u0026#34;test\u0026#34; // 문자열 a[6] array: [0, 1, 2, 3, 4, 5] // 배열 함수 # exam(): return 10; ; exam2(i4 a, i4 b): i4 c: a + b; return c; ; 기본 라이브러리 # Map # std: lib.std; map: std.map; func main: map m; m: \u0026#34;key1\u0026#34;: \u0026#34;value1\u0026#34;, \u0026#34;key2\u0026#34;: \u0026#34;value2\u0026#34;; ; map m; m.key: \u0026#34;name\u0026#34;; // {\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;} m.value: \u0026#34;smith\u0026#34;; // {\u0026#34;name\u0026#34;:\u0026#34;smith\u0026#34;} Set # std: lib.std; set: std.set; func main: set s; s: \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;; ; List # std: lib.std; list: std.list; func main: list l; l: \u0026#34;a\u0026#34;, \u0026#34;\bb\u0026#34;, \u0026#34;c\u0026#34;; ; 형변환 # to: lib.std.to; to.int(\u0026#39;10\u0026#39;); // \u0026#39;10\u0026#39; -\u0026gt; 10 to.str(10); // 10 -\u0026gt; \u0026#39;10\u0026#39; 반환 타입 # func test(int a, int b) int: return a + b; ; 함수 선언 형식 # hello() void: print(\u0026#34;Hello, World!\u0026#34;); ; "},{"id":77,"href":"/docs/book/terminal/vim/%EB%AC%B8%EC%9E%90%EB%8C%80%EC%B9%98/","title":"문자대치","section":"Docs","content":":%s/[from]/[to] "},{"id":78,"href":"/docs/book/ai/ai%EA%B0%80-%EC%96%B4%EB%A0%A4%EC%9B%8C%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C/%EB%AC%B8%EC%A0%9C-1/","title":"문제 1","section":"Docs","content":" 문제 1 # \u0026#39;\u0026#34;Book/2024/9/\\355\\205\\214\\354\\212\\244\\355\\212\\270 2.md\u0026#34; Book/Excalidraw/Drawing 2024-09-24 23.22.27.excalidraw.md Book/.obsidian/workspace.json decode-string.js sync-script.js\u0026#39; 이런 문자열이 있을 때 자바스크립트로 밑의 배열 처럼 만드는 방법을 알려줘\n[ \u0026#39;Book/2024/9/테스트 2.md\u0026#39;, \u0026#39;Book/Excalidraw/Drawing 2024-09-24 23.22.27.excalidraw.md\u0026#39;, \u0026#39;Book/.obsidian/workspace.json\u0026#39;, \u0026#39;decode-string.js\u0026#39;, \u0026#39;sync-script.js\u0026#39; ] 실패 Claude Sonnet 3.5 0621 Claude Sonnet 3.5 1022 Claude Opus 3 Mistral Large 2 Gemini 1.5 Pro 002 Chat GPT 4 Chat GPT 4-mini Chat GPT 4o Gemini 1.5 Flash 002\n성공 DeepSeek R1 - 2025.1.21 Chat GPT 4-turbo Chat GPT o1-mini Chat GPT o1-preview Llama 3.1 405B Llama 3.1 Nemotron 70B Qwen 2.5 Coder 32B\n기분 탓인지는 모르겠지만 o1-preview 보다 o1-mini 가 코딩 성능이 더 우세한 듯 하다.\n/** * 옥탈 이스케이프 시퀀스를 포함한 문자열을 디코딩하여 UTF-8 문자열로 변환합니다. * @param {string} str - 옥탈 이스케이프 시퀀스를 포함한 입력 문자열 * @returns {string} - 디코딩된 UTF-8 문자열 */ function decodeOctalString(str) { // 바이트 배열을 저장할 배열 초기화 let byteArray = []; // \\xxx 패턴을 찾기 위한 정규 표현식 (000 ~ 377) const regex = /\\\\([0-3][0-7]{2})/g; let lastIndex = 0; let match; // 정규 표현식을 사용하여 \\xxx 패턴을 순회 while ((match = regex.exec(str)) !== null) { // 매치 이전의 문자열을 바이트로 변환하여 배열에 추가 let before = str.slice(lastIndex, match.index); for (let char of before) { byteArray.push(char.charCodeAt(0)); } // 매치된 \\xxx를 옥탈수에서 디코딩하여 바이트 배열에 추가 byteArray.push(parseInt(match[1], 8)); // 다음 검색을 위한 인덱스 업데이트 lastIndex = regex.lastIndex; } // 마지막 매치 이후의 문자열을 바이트로 변환하여 배열에 추가 let remaining = str.slice(lastIndex); for (let char of remaining) { byteArray.push(char.charCodeAt(0)); } // Uint8Array로 변환 후 UTF-8 디코딩 let decoder = new TextDecoder(\u0026#34;utf-8\u0026#34;); let bytes = new Uint8Array(byteArray); return decoder.decode(bytes); } /** * 문자열에서 큰 따옴표를 제거합니다. * @param {string} input - 처리할 문자열 * @returns {string} 따옴표가 제거된 문자열 */ function removeQuotes(input) { return input.replace(/\u0026#34;([^\u0026#34;]*)\u0026#34;/g, \u0026#34;$1\u0026#34;); } /** * 문자열을 파일 확장자를 기준으로 분리합니다. * @param {string} input - 처리할 문자열 * @param {string[]} extensions - 파일 확장자 배열 * @returns {string[]} 분리된 파일 경로 배열 */ function splitByFileExtension(input, extensions) { let words = input.split(\u0026#34; \u0026#34;); let paths = []; let currentPath = \u0026#34;\u0026#34;; words.forEach((word) =\u0026gt; { if (currentPath) { currentPath += \u0026#34; \u0026#34; + word; } else { currentPath = word; } // 지정한 확장자로 끝나는지 확인 if (extensions.some((ext) =\u0026gt; currentPath.endsWith(ext))) { paths.push(currentPath); currentPath = \u0026#34;\u0026#34;; } }); return paths; } /** * 인코딩된 문자열을 디코딩하고 파일 확장자를 기준으로 문자열을 분리합니다. * @param {string} encodedString - 디코딩할 인코딩된 문자열 * @returns {string[]} 분리된 파일 경로 배열 */ function decodeString(encodedString) { // 입력된 문자열을 디코딩하고 큰 따옴표를 제거합니다. let decodedStr = removeQuotes(decodeOctalString(encodedString)); // 파일 확장자를 기준으로 문자열을 분리하기 위해 사용할 확장자 목록입니다. const extensions = [\u0026#34;.md\u0026#34;, \u0026#34;.excalidraw.md\u0026#34;, \u0026#34;.json\u0026#34;, \u0026#34;.js\u0026#34;]; // 디코딩된 문자열을 파일 확장자를 기준으로 분리합니다. const paths = splitByFileExtension(decodedStr, extensions); // 분리된 파일 경로 배열을 반환합니다. return paths; } const inputString = \u0026#39;\u0026#34;Book/2024/9/\\355\\205\\214\\354\\212\\244\\355\\212\\270 2.md\u0026#34; Book/Excalidraw/Drawing 2024-09-24 23.22.27.excalidraw.md Book/.obsidian/workspace.json decode-string.js sync-script.js\u0026#39;; console.log(decodeString(inputString)); // 주어진 문자열 const input = \u0026#39;\u0026#34;Book/2024/9/\\355\\205\\214\\354\\212\\244\\355\\212\\270 2.md\u0026#34; Book/Excalidraw/Drawing 2024-09-24 23.22.27.excalidraw.md Book/.obsidian/workspace.json decode-string.js sync-script.js\u0026#39;; /** * 이스케이프된 옥탈 시퀀스를 디코딩하는 함수 * @param {string} str - 이스케이프된 문자열 * @returns {string} - 디코딩된 문자열 */ function decodeEscapedString(str) { const bytes = []; for (let i = 0; i \u0026lt; str.length; ) { if (str[i] === \u0026#34;\\\\\u0026#34;) { // 다음 세 문자가 옥탈 숫자인지 확인 const octal = str.substr(i + 1, 3); if (/^[0-7]{3}$/.test(octal)) { bytes.push(parseInt(octal, 8)); i += 4; // \\ + 3자리 숫자 continue; } } // 이스케이프된 시퀀스가 아니면 현재 문자의 유니코드 값을 추가 bytes.push(str.charCodeAt(i)); i++; } // UTF-8로 디코딩 return new TextDecoder(\u0026#34;utf-8\u0026#34;).decode(new Uint8Array(bytes)); } /** * 파일 확장자를 확인하는 함수 * @param {string} str - 확인할 문자열 * @returns {boolean} - 확장자가 있는지 여부 */ function hasFileExtension(str) { return /\\.[a-zA-Z0-9]+$/.test(str); } /** * 입력 문자열을 배열로 변환하는 함수 * @param {string} str - 입력 문자열 * @returns {string[]} - 변환된 배열 */ function parseStringToArray(str) { const regex = /\u0026#34;([^\u0026#34;]*)\u0026#34;|(\\S+)/g; const tokens = []; let match; while ((match = regex.exec(str)) !== null) { // match[1]은 따옴표로 묶인 부분, match[2]는 그렇지 않은 부분 tokens.push(match[1] || match[2]); } const decodedTokens = tokens.map((token) =\u0026gt; decodeEscapedString(token)); const result = []; let current = []; for (let token of decodedTokens) { if (hasFileExtension(token)) { current.push(token); result.push(current.join(\u0026#34; \u0026#34;)); current = []; } else { current.push(token); } } // 남아있는 토큰이 있을 경우 추가 if (current.length \u0026gt; 0) { result.push(current.join(\u0026#34; \u0026#34;)); } return result; } // 변환 실행 const result = parseStringToArray(input); console.log(result); const inputString = \u0026#39;\u0026#34;Book/2024/9/\\355\\205\\214\\354\\212\\244\\355\\212\\270 2.md\u0026#34; Book/Excalidraw/Drawing 2024-09-24 23.22.27.excalidraw.md Book/.obsidian/workspace.json decode-string.js sync-script.js\u0026#39;; // 먼저 문자열을 배열로 나눔 (공백 기준) let items = inputString.split(\u0026#39; \u0026#39;); let result = []; let currentPath = \u0026#39;\u0026#39;; let inQuotes = false; items.forEach((item, index) =\u0026gt; { if (item.startsWith(\u0026#39;\u0026#34;\u0026#39;)) { // 큰따옴표로 시작하는 경우 큰따옴표 제거 후 현재 경로로 설정 currentPath = item.slice(1); inQuotes = true; if (item.endsWith(\u0026#39;\u0026#34;\u0026#39;)) { // 큰따옴표로 끝나는 경우 배열에 추가 currentPath = decodeURIComponent(escape(currentPath)); result.push(currentPath); currentPath = \u0026#39;\u0026#39;; inQuotes = false; } } else if (item.endsWith(\u0026#39;\u0026#34;\u0026#39;)) { // 큰따옴표로 끝나는 경우 큰따옴표 제거 후 배열에 추가 currentPath += \u0026#39; \u0026#39; + item.slice(0, -1); currentPath = decodeURIComponent(escape(currentPath)); result.push(currentPath); currentPath = \u0026#39;\u0026#39;; inQuotes = false; } else if (inQuotes) { // 큰따옴표로 둘러싸인 문자열의 나머지 부분 currentPath += \u0026#39; \u0026#39; + item; } else { // 파일 확장자가 있는 경우 배열에 추가 if (/\\.[^.]*$/.test(item)) { // 이전에 처리한 경로가 있다면 결합 if (currentPath) { result.push(currentPath + \u0026#39; \u0026#39; + item); currentPath = \u0026#39;\u0026#39;; } else { result.push(item); } } else { // 파일 확장자가 없는 경우 현재 경로로 설정 if (currentPath) { currentPath += \u0026#39; \u0026#39; + item; } else { currentPath = item; } } } }); // 마지막으로 처리한 경로가 있다면 배열에 추가 if (currentPath) { result.push(currentPath); } console.log(result); "},{"id":79,"href":"/docs/book/ai/ai%EA%B0%80-%EC%96%B4%EB%A0%A4%EC%9B%8C%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C/%EB%AC%B8%EC%A0%9C-1---%EC%B6%94%EA%B0%80/","title":"문제 1 - 추가","section":"Docs","content":"\u0026#39;Book/Programming/CSS/gradient image.md \u0026#34;Book/Programming/Database/SQL/Prisma/\\354\\202\\254\\354\\232\\251 \\353\\260\\251\\353\\262\\225.md\u0026#34; .github/workflows/blank.yml .github/workflows/delete-files.js .github/workflows/upsert-files.js Book/.obsidian/plugins/frontmatter-modified-date/data.json Book/.obsidian/workspace.json \u0026#34;Book/2024/9/\\353\\223\\234\\353\\224\\224\\354\\226\\264! Obsidian \\353\\270\\224\\353\\241\\234\\352\\267\\270\\354\\235\\230 \\354\\262\\253\\352\\270\\200\\354\\235\\204 \\354\\223\\260\\352\\262\\214 \\353\\220\\220\\353\\224\\260!.md\u0026#34; \u0026#34;Book/2024/9/\\353\\247\\245 \\352\\270\\260\\353\\263\\270 \\354\\225\\204\\354\\235\\264\\354\\275\\230\\354\\235\\264 \\353\\263\\200\\352\\262\\275\\353\\220\\230\\354\\226\\264\\354\\204\\234....md\u0026#34; \u0026#34;Book/2024/9/\\354\\211\\274\\355\\221\\234\\352\\260\\200 \\355\\217\\254\\355\\225\\250\\353\\220\\234 \\355\\214\\214\\354\\235\\274 \\354\\235\\264\\353\\246\\204\\354\\235\\204 \\354\\240\\200\\354\\236\\245\\355\\225\\230\\352\\263\\240 \\353\\266\\210\\353\\237\\254\\354\\230\\254 \\354\\210\\230 \\354\\236\\210\\352\\262\\214 \\355\\225\\250.md\u0026#34; \u0026#34;Book/2024/9/\\354\\231\\204\\354\\204\\261! supabase\\354\\231\\200 github \\354\\227\\260\\353\\217\\231\\355\\225\\230\\352\\270\\260.md\u0026#34; \u0026#34;Book/2024/9/\\355\\234\\264 \\353\\223\\234\\353\\224\\224\\354\\226\\264....md\u0026#34; \u0026#34;Book/AI/AI\\352\\260\\200 \\354\\226\\264\\353\\240\\244\\354\\233\\214\\355\\225\\230\\353\\212\\224 \\353\\254\\270\\354\\240\\234/\\353\\254\\270\\354\\240\\234 1.md\u0026#34; \u0026#34;Book/AI/AI\\352\\260\\200 \\354\\226\\264\\353\\240\\244\\354\\233\\214\\355\\225\\230\\353\\212\\224 \\353\\254\\270\\354\\240\\234/\\353\\254\\270\\354\\240\\234 2.md\u0026#34; \u0026#34;Book/AI/AI\\352\\260\\200 \\354\\226\\264\\353\\240\\244\\354\\233\\214\\355\\225\\230\\353\\212\\224 \\353\\254\\270\\354\\240\\234/\\353\\254\\270\\354\\240\\234 3.md\u0026#34; \u0026#34;Book/AI/AI\\352\\260\\200 \\354\\226\\264\\353\\240\\244\\354\\233\\214\\355\\225\\230\\353\\212\\224 \\353\\254\\270\\354\\240\\234/\\353\\254\\270\\354\\240\\234 4.md\u0026#34; \u0026#34;Book/Programming/AWS/AWS \\354\\227\\260\\352\\262\\260\\355\\225\\230\\353\\212\\224 \\353\\262\\225.md\u0026#34; \u0026#34;Book/Programming/AWS/\\354\\240\\200\\354\\236\\245\\352\\263\\265\\352\\260\\204 \\353\\212\\230\\353\\246\\254\\352\\270\\260.md\u0026#34; Book/Programming/CSS/BEM.md \u0026#34;Book/Programming/CSS/Color \\354\\241\\260\\355\\225\\251.md\u0026#34; Book/Programming/CSS/Table.md \u0026#34;Book/Programming/Color/RGB/4\\353\\266\\200\\355\\204\\260 256\\352\\271\\214\\354\\247\\200.md\u0026#34; Book/Programming/Font/Font Size.md \u0026#34;Book/Programming/Git/lfs \\354\\202\\254\\354\\232\\251\\353\\262\\225.md\u0026#34; \u0026#34;Book/Programming/Git/\\352\\260\\225\\354\\240\\234 \\353\\263\\221\\355\\225\\251.md\u0026#34; \u0026#34;Book/Programming/Git/\\353\\250\\270\\354\\247\\200 \\354\\267\\250\\354\\206\\214.md\u0026#34; \u0026#34;Book/Programming/Git/\\354\\273\\244\\353\\260\\213 \\353\\251\\224\\354\\204\\270\\354\\247\\200.md\u0026#34; \u0026#34;Book/Programming/Github/add\\354\\231\\200 commit.md\u0026#34; \u0026#34;Book/Programming/Github/username password \\354\\240\\200\\354\\236\\245.md\u0026#34; \u0026#34;Book/Programming/Github/\\352\\260\\225\\354\\240\\234 \\353\\263\\221\\355\\225\\251.md\u0026#34; \u0026#34;Book/Programming/Github/\\353\\263\\200\\352\\262\\275\\354\\202\\254\\355\\225\\255 \\355\\231\\225\\354\\235\\270 (git status).md\u0026#34; \u0026#34;Book/Programming/Github/\\353\\263\\200\\352\\262\\275\\354\\202\\254\\355\\225\\255\\354\\235\\204 \\353\\213\\244\\353\\245\\270 \\353\\270\\214\\353\\240\\214\\354\\271\\230\\354\\227\\220\\354\\204\\234 \\354\\240\\201\\354\\232\\251\\355\\225\\230\\352\\270\\260.md\u0026#34; \u0026#34;Book/Programming/Github/\\353\\270\\214\\353\\240\\214\\354\\271\\230 \\354\\202\\255\\354\\240\\234.md\u0026#34; \u0026#34;Book/Programming/Github/\\354\\265\\234\\354\\213\\240 \\354\\273\\244\\353\\260\\213 \\354\\240\\234\\352\\261\\260.md\u0026#34; \u0026#34;Book/Programming/Github/\\354\\265\\234\\354\\213\\240\\354\\202\\254\\355\\225\\255 pull \\355\\225\\230\\352\\270\\260.md\u0026#34; \u0026#34;Book/Programming/Github/\\354\\273\\244\\353\\260\\213 \\354\\264\\210\\352\\270\\260 \\354\\203\\201\\355\\203\\234\\353\\241\\234 \\353\\220\\230\\353\\217\\214\\353\\246\\254\\352\\270\\260.md\u0026#34; \u0026#34;Book/Programming/NextJS/\\352\\265\\254\\354\\241\\260.md\u0026#34; \u0026#34;Book/Programming/NextJS/\\353\\260\\260\\355\\217\\254(bun).md\u0026#34; \u0026#34;Book/Programming/NextJS/\\353\\260\\260\\355\\217\\254(npm).md\u0026#34; \u0026#34;Book/Programming/NextJS/\\354\\204\\244\\354\\271\\230.md\u0026#34; \u0026#34;Book/Programming/NextJS/\\354\\213\\234\\354\\236\\221.md\u0026#34; \u0026#34;Book/Programming/NextJS/\\354\\230\\244\\353\\245\\230/failed WebSocket is closed due to suspension..md\u0026#34; \u0026#34;Book/Programming/NextJS/\\355\\224\\204\\353\\241\\234\\354\\240\\235\\355\\212\\270/MTC Co.,Ltd..md\u0026#34; \u0026#34;Book/Programming/NextJS/\\355\\224\\204\\353\\241\\234\\354\\240\\235\\355\\212\\270/\\353\\213\\244\\353\\243\\250\\355\\225\\234\\354\\235\\230 \\353\\270\\224\\353\\241\\234\\352\\267\\270.md\u0026#34; \u0026#34;Book/Programming/Oracle/Oracle \\354\\227\\260\\352\\262\\260.md\u0026#34; Book/Programming/SSL/Certbot.md \u0026#34;Book/Programming/SSL/Letsencrypt \\354\\236\\220\\353\\217\\231\\352\\260\\261\\354\\213\\240.md\u0026#34; \u0026#34;Book/Programming/SSL/SSL \\354\\235\\270\\354\\246\\235 \\353\\260\\233\\352\\270\\260.md\u0026#34; \u0026#34;Book/Programming/Terminal/PID \\354\\243\\275\\354\\235\\264\\352\\270\\260.md\u0026#34; \u0026#34;Book/Programming/Terminal/Tmux/\\354\\202\\254\\354\\232\\251 \\353\\260\\251\\353\\262\\225.md\u0026#34; \u0026#34;Book/Programming/Terminal/Vim/Iterm2/zshrc \\354\\204\\244\\354\\240\\225.md\u0026#34; \u0026#34;Book/Programming/Terminal/Vim/\\353\\254\\270\\354\\236\\220 \\353\\214\\200\\354\\271\\230.md\u0026#34; \u0026#34;Book/Programming/Terminal/Vim/\\354\\244\\204 \\354\\235\\264\\353\\217\\231.md\u0026#34; \u0026#34;Book/Programming/Terminal/Yabai/\\354\\213\\244\\355\\226\\211.md\u0026#34; \u0026#34;Book/Programming/Terminal/\\352\\266\\214\\355\\225\\234 \\354\\204\\244\\354\\240\\225.md\u0026#34; \u0026#34;Book/Programming/Ubuntu/\\354\\240\\200\\354\\236\\245\\352\\263\\265\\352\\260\\204 \\355\\231\\225\\354\\235\\270.md\u0026#34; Book/Programming/npm/pm2.md\u0026#39; "},{"id":80,"href":"/docs/book/ai/ai%EA%B0%80-%EC%96%B4%EB%A0%A4%EC%9B%8C%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C/%EB%AC%B8%EC%A0%9C-2/","title":"문제 2","section":"Docs","content":"질문\nimport { Nav } from \u0026#34;@/interfaces/nav\u0026#34;; import Link from \u0026#34;next/link\u0026#34;; export default function DesktopNavbarMenu({ navData }: { navData: Nav }) { return ( \u0026lt;div className=\u0026#34;hidden md:visible md:block h-full\u0026#34;\u0026gt; \u0026lt;ul className=\u0026#34;h-full flex\u0026#34;\u0026gt; {navData.children?.map((item) =\u0026gt; ( \u0026lt;li key={item.path} className=\u0026#34;px-2 h-full flex items-center group cursor-pointer\u0026#34; \u0026gt; \u0026lt;p className=\u0026#34;text-base\u0026#34;\u0026gt;{item.name}\u0026lt;/p\u0026gt; \u0026lt;div className=\u0026#34;absolute left-0 top-[3rem] bg-white/80 backdrop-blur-2xl backdrop-saturate-200 w-full group-hover:grid group-hover:visible hidden grid-col-[30px]\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;max-w-[80rem] w-full max-h-[calc(100dvh-3rem)] m-auto px-4 py-16 overflow-x-auto\u0026#34;\u0026gt; {renderDesktopNavbarMenu(item)} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ); } function renderDesktopNavbarMenu(nav: Nav) { return ( \u0026lt;div className=\u0026#34;text-center flex flex-row gap-8 justify-center\u0026#34;\u0026gt; {(nav.children ?? []).filter((children) =\u0026gt; children.type === \u0026#34;item\u0026#34;) .length \u0026gt; 0 \u0026amp;\u0026amp; ( \u0026lt;ul className=\u0026#34;flex flex-col\u0026#34;\u0026gt; {(nav.children ?? []) .filter((children) =\u0026gt; children.type === \u0026#34;item\u0026#34;) .map((children) =\u0026gt; ( \u0026lt;li key={children.path} className=\u0026#34;\u0026#34;\u0026gt; \u0026lt;Link href={children.path} className=\u0026#34;bold p-1 cursor-pointer\u0026#34;\u0026gt; {children.name} \u0026lt;/Link\u0026gt; \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; )} {(nav.children ?? []).filter((children) =\u0026gt; children.type === \u0026#34;category\u0026#34;) .length \u0026gt; 0 \u0026amp;\u0026amp; ( \u0026lt;ul\u0026gt; {(nav.children ?? []) .filter((children) =\u0026gt; children.type === \u0026#34;category\u0026#34;) .map((children) =\u0026gt; ( \u0026lt;li key={children.path} className=\u0026#34;\u0026#34;\u0026gt; \u0026lt;p className=\u0026#34;mb-4 text-base\u0026#34;\u0026gt;{children.name}\u0026lt;/p\u0026gt; {renderDesktopNavbarMenu(children)} \u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; )} \u0026lt;/div\u0026gt; ); } 왜 cursor-pointer가 안먹힐까?\n해결 # 정답은 li 태그에 있는 cursor-pointer 속성을 제거하는 것이다 그리고 p 요소나 Link 요소에 cursor-pointer를 적용하니 의도하는 대로 되었다\n모델 # claude sonnet 3.5 실패 claude opus 3 해결\ndeepseek chat 2.5 해결\ncopilot chat gpt 4o 실패\nchat gpt 4o 해결 chat gpt o1-mini 해결\ngemini 1.5 pro 002 실패\n"},{"id":81,"href":"/docs/book/ai/ai%EA%B0%80-%EC%96%B4%EB%A0%A4%EC%9B%8C%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C/%EB%AC%B8%EC%A0%9C-3/","title":"문제 3","section":"Docs","content":"문제\n(d) 한계비용이 체증하므로, 추가적인 상품 한 단위 생산에 대한 한계수용의사금액은 상승한다. A. 맞음 B. 틀림 정답\n[정답] A. 맞음 [설명] 한계비용이 체증할 때, 기업은 추가적인 상품을 생산하기 위해 더 많은 비용을 필요로 하게 되고, 이로 인해 그 상품을 판매할 때 더 높은 가격을 받아야 하므로, 한계수용의사금액이 상승하게 된다. 이는 시장에서 가격 결정과 공급량에 영향을 미치는 요인이다. 틀림 llama 3.2 3B llama 3.1 405B Hermes 3 70B Gemini 1.5 Flash Gemini 1.5 Pro Qwen 2.5 72B Vercel v0 DeepSeek V2.5 Mistral Large 2 Claude Sonnet 3.5 Chat GPT 4o-mini - 답은 맞았으나 설명이 틀림 Chat GPT 4o DeepSeek Think DeepSeek R1 Claude Sonnet 3.7 Qwen 2.5 Max QwQ Grok 3 Grok 3 Think Gemini 2.0 Flash\n맞음 Chat GPT o1-mini Chat GPT o1-preview Mistral Large 24.11 (설명은 틀림) Gemini 2.0 Flash Thinking Experimental\n원인 한계수용의사금액에 대한 용어를 헷갈림 생산자의 한계수용의사금액인지 소비자의 한계수용의사금액인지를 문맥에서 유추해내는 것에 서투름\n"},{"id":82,"href":"/docs/book/ai/ai%EA%B0%80-%EC%96%B4%EB%A0%A4%EC%9B%8C%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C/%EB%AC%B8%EC%A0%9C-4/","title":"문제 4","section":"Docs","content":"(c) 초콜릿 시장의 수요–공급모형을 생각해 보자. 그리고 초콜릿은 정상재이고 공급 곡선이 우상향 한다고 가정하자. 생산 요소 가격 상승이 초콜릿의 공급에 영향을 주었는데, 기사의 마지막에서 일부 소비자는 구매량을 줄이기 시작했지만, 상점 주인인 파크씨는 아직까지 변화를 느끼지 못한다고 했다. 그 이유는 무엇일까? 그리고 생산 요소 가격 변화 이전과 비교해 시장의 균형 거래량과 균형 가격은 어떻게 변화할 까? 타당한 모든 설명을 고르시오. A. 수요 변화 없음 – 균형 거래량 감소 – 균형 가격 상승 B. 수요 변화 없음 – 균형 거래량 감소 – 균형 가격 단언할 수 없음 C. 미래에 더 큰 가격 상승을 예상하여 현재 수요의 증가 – 균형 거래량 단언할 수 없음 – 균형 가격 상승 D. 발렌타인 데이로 인한 수요의 일시적 증가 – 균형 거래량 단언할 수 없음 – 균형 가격 상승 "},{"id":83,"href":"/docs/book/%EB%B0%9C%EB%8F%84%EB%A5%B4%ED%94%84/%EB%B0%9C%EB%8F%84%EB%A5%B4%ED%94%84-%EA%B5%90%EC%9C%A1/","title":"발도르프 교육","section":"발도르프","content":" 발도르프 교육: 루돌프 슈타이너의 철학에서 시작된 대안 교육 # 발도르프(Waldorf)는 오스트리아의 철학자이자 교육자인 루돌프 슈타이너(Rudolf Steiner, 1861~1925)가 창시한 교육 사상 및 그 실천을 의미하며, 주로 발도르프 교육으로 알려져 있습니다. 이는 1919년 독일 슈투트가르트에서 처음 시작된 대안 교육의 한 형태로, 전 세계적으로 많은 학교와 유치원에서 채택하고 있습니다.\n발도르프 교육의 핵심은 인간에 대한 깊은 이해를 바탕으로, 아동의 지적, 감성적, 의지적 측면이 조화롭게 발달하도록 돕는 전인 교육을 지향하는 데 있습니다. 슈타이너는 인간이 7년 주기로 발달 단계를 거치며, 각 시기마다 고유한 특성과 필요를 가진다고 보았습니다. 따라서 발도르프 교육 과정은 이러한 발달 단계에 맞춰 세심하게 구성됩니다.\n발도르프 교육의 주요 특징은 다음과 같습니다:\n전인적 접근: 단순히 지식 전달에만 집중하는 것이 아니라, 아이들의 상상력, 창의력, 예술적 감각, 그리고 실천적 능력을 고루 발달시키는 것을 목표로 합니다. 발달 단계에 맞는 교육: 7년 주기(0-7세, 7-14세, 14-21세)로 아동의 발달 단계를 나누고, 각 시기에 맞는 교육 내용과 방법을 제공합니다. 예를 들어, 초기 유아기에는 모방과 놀이를 통한 학습을 강조하고, 초등학교 시기에는 예술과 감성을 통한 접근을 중시합니다. 예술 교육의 강조: 그림, 음악, 수공예, 오이리트미(움직임 예술) 등 다양한 예술 활동이 교육 과정의 중심을 이룹니다. 이를 통해 아이들은 세상을 풍부하게 경험하고 자신을 표현하는 법을 배웁니다. 자연과의 교감: 자연의 리듬과 순환을 중요하게 생각하며, 계절의 변화를 느끼고 자연물을 활용한 활동을 많이 합니다. 담임 교사의 역할: 초등학교 과정(1학년부터 8학년까지)에서는 한 명의 담임 교사가 아이들과 함께 성장하며 오랜 관계를 맺는 것을 중요하게 여깁니다. 경쟁 없는 교육: 시험이나 성적표를 통해 아이들을 줄 세우지 않고, 각자의 개성과 고유한 잠재력을 존중합니다. 아이들은 스스로 만든 공책을 통해 배움의 과정을 기록하고 결과물을 만듭니다. 인지학(Anthroposophy): 발도르프 교육의 철학적 바탕에는 슈타이너가 창시한 인지학이 있습니다. 이는 인간의 영적인 측면을 탐구하고, 우주와 인간의 관계를 이해하려는 사상 체계입니다. 한국에서의 발도르프 교육:\n한국에도 여러 발도르프 학교와 유치원이 운영되고 있으며, 대안 교육에 대한 관심이 높아지면서 점차 주목받고 있습니다. 발도르프 교육을 통해 아이들이 자유롭고 창의적인 주체로 성장하도록 돕는 것을 목표로 합니다.\n비판적 시각:\n한편, 발도르프 교육은 인지학의 다소 신비주의적인 측면과 일부 부모들의 백신 접종 거부 경향 등과 관련하여 비판적인 시각도 존재합니다.\n결론적으로 발도르프는 루돌프 슈타이너의 인간 이해를 바탕으로 아동의 전인적 성장을 목표로 하는 독특한 교육 철학이자 실천 방법이라고 할 수 있습니다.\n"},{"id":84,"href":"/docs/book/web/nextjs/%EB%B0%B0%ED%8F%AC-bun/","title":"배포 (bun)","section":"Docs","content":"bun run build bun run start bun run start -p 8080 PM2 배포 # bun run build export NODE_ENV=production # mac, linux set NODE_ENV=production # window bun i -g pm2 sudo apt update sudo apt install npm sudo npm cache clean --force sudo npm install -g n sudo n stable sudo npm install -g npm pm2 start bun --name nextjs-app -- run start -- -p 8080 PM2 기능 # pm2 list nextjs-app pm2 stop nextjs-app pm2 start nextjs-app pm2 restart nextjs-app pm2 delete nextjs-app 참고사이트 https://medium.com/@mudasirhaji/deploying-a-next-js-app-manually-on-aws-ec2-a-step-by-step-guide-58b266ff1c52\n"},{"id":85,"href":"/docs/book/web/nextjs/%EB%B0%B0%ED%8F%AC-npm/","title":"배포 (npm)","section":"Docs","content":"sudo apt update sudo apt install npm sudo npm cache clean --force sudo npm install -g n sudo n stable sudo npm install -g npm npm run build npm install -g pm2 pm2 start npm --name nextjs-app -- run start -- -p 8080 pm2 restart nextjs-app "},{"id":86,"href":"/docs/book/git/%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%ED%99%95%EC%9D%B8-git-status/","title":"변경사항 확인 (git status)","section":"Docs","content":"변경된 파일 및 스테이징된 상태를 확인하려면 git status 명령어를 사용합니다. 이 명령어는 현재 작업 디렉토리의 상태를 보여줍니다.\ngit status git status는 다음과 같은 정보를 제공합니다:\n어떤 파일이 수정되었는지 어떤 파일이 스테이징 영역에 있는지 어떤 파일이 커밋되기를 기다리고 있는지 현재 어떤 브랜치에 있는지 커맨드를 실행하면 변경된 파일, 스테이징된 파일, 커밋되기를 기다리고 있는 파일 등이 목록으로 출력됩니다.\n"},{"id":87,"href":"/docs/book/git/%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD%EC%9D%84-%EB%8B%A4%EB%A5%B8-%EB%B8%8C%EB%A0%8C%EC%B9%98%EC%97%90%EC%84%9C-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/","title":"변경사항을 다른 브렌치에서 적용하기","section":"Docs","content":"에러 메시지에 따르면 여전히 변경되지 않은 파일들이나 추적되지 않은 파일들이 존재합니다. git stash 명령어를 실행했지만 아무 변경사항이 없다는 메시지가 나온 것으로 보입니다.\n먼저 현재 작업 디렉토리에서 추적되지 않은 파일들을 제거해 보세요. 아래의 명령어를 사용할 수 있습니다:\ngit clean -fdX 이 명령은 추적되지 않은 파일 및 디렉토리를 제거합니다. -n 옵션을 추가하여 제거될 파일들을 먼저 확인할 수 있습니다. 아래와 같이 실행해 보세요:\ngit clean -fdXn 만약 확인 결과가 원하는 대로라면, -n 옵션을 빼고 명령을 실행하여 파일을 실제로 제거합니다:\ngit clean -fdX 그 후에 다시 브랜치를 전환해 보세요:\ngit checkout develop-1.1.1 만약 이러한 조치가 여전히 문제를 해결하지 못한다면, 해당 파일들이 다른 프로세스에서 사용되고 있거나 권한 문제가 있는지 확인해보세요.\n"},{"id":88,"href":"/docs/book/git/%EB%B8%8C%EB%A0%8C%EC%B9%98-%EC%82%AD%EC%A0%9C/","title":"브렌치 삭제","section":"Docs","content":"Git에서 브랜치를 삭제하는 방법은 다음과 같습니다. 브랜치를 삭제할 때에는 주의가 필요하며, 해당 브랜치에 포함된 변경사항이 모두 커밋되었는지 확인하는 것이 좋습니다.\n로컬 브랜치 삭제:\ngit branch -d \u0026lt;branch_name\u0026gt; 또는\ngit branch --delete \u0026lt;branch_name\u0026gt; 위 명령은 브랜치를 삭제합니다. -d 또는 --delete 옵션은 해당 브랜치가 현재 브랜치에 모두 병합되었을 때에만 브랜치를 삭제합니다. 만약 병합되지 않은 변경사항이 남아있으면 삭제되지 않습니다. 만약 강제로 삭제하고자 한다면 -D 또는 --delete --force 옵션을 사용할 수 있습니다.\ngit branch -D \u0026lt;branch_name\u0026gt; 원격 브랜치 삭제:\ngit push origin --delete \u0026lt;remote_branch_name\u0026gt; 위 명령은 원격 저장소에서 브랜치를 삭제합니다. \u0026lt;remote_branch_name\u0026gt;은 삭제하려는 원격 브랜치의 이름입니다.\n예를 들어, 로컬에서 브랜치를 삭제한 후 원격에서도 삭제하려면 다음과 같이 할 수 있습니다.\ngit branch -d \u0026lt;branch_name\u0026gt; git push origin --delete \u0026lt;branch_name\u0026gt; 또는 한 번에 로컬과 원격에서 브랜치를 삭제할 수도 있습니다.\ngit push origin --delete \u0026lt;branch_name\u0026gt; git branch -d \u0026lt;branch_name\u0026gt; 브랜치를 삭제하기 전에 현재 브랜치가 삭제하려는 브랜치와 다르고, 해당 브랜치가 모두 병합되었는지 확인하는 것이 중요합니다. 강제 삭제는 가능하면 피하는 것이 좋습니다.\n"},{"id":89,"href":"/docs/book/git/%EB%B8%8C%EB%A0%8C%EC%B9%98-%EC%9D%B4%EB%A6%84-%EC%A0%95%ED%95%98%EA%B8%B0/","title":"브렌치 이름 정하기","section":"Docs","content":" 🤔 1. Git에서 사용하는 일반적인 브랜치 종류에는 어떤 것들이 있니? # 보통 Git을 사용하는 프로젝트에서는 다음과 같은 브랜치 전략(Branching Strategy)을 따르는 경우가 많습니다:\n브랜치 이름 용도 main 또는 master 운영 환경용 최종 코드 (배포 가능한 안정된 상태) develop 개발자들이 작업 중인 코드를 모아두는 통합 브랜치 feature/xxx 새로운 기능을 개발할 때 사용하는 브랜치 (ex: feature/login, feature/cart) bugfix/xxx 버그 수정 작업 시 사용하는 브랜치 hotfix/xxx 긴급하게 운영 서버에서 발생한 문제를 바로 고칠 때 사용하는 브랜치 release/xxx 출시 직전 테스트 단계의 코드를 관리하는 브랜치 이 중에서 feature/...처럼 기능 개발 목적으로 쓰이는 브랜치가 여러 개 생길 수 있습니다. 예를 들어:\nfeature/user-auth feature/payment-system feature/dashboard-ui 이런 식으로 프로젝트 규모와 기능별로 무한히 생성될 수 있어요.\n🤔 2. GitHub 등에서 미리 정의된 feature 브랜치가 몇 가지나 있니? # Git 자체적으로는 \u0026ldquo;feature\u0026rdquo;, \u0026ldquo;bugfix\u0026rdquo; 등의 이름이 미리 정의되어 있지는 않아요.\n이름은 팀이나 프로젝트 컨벤션에 따라 자유롭게 설정 가능합니다.\n하지만 많은 팀에서 아래와 같은 네이밍 컨벤션(Naming Convention)을 따릅니다:\n\u0026lt;타입\u0026gt;/\u0026lt;설명\u0026gt; 예시:\nfeature/add-profile-page bugfix/fix-login-issue docs/update-readme chore/update-dependencies test/add-unit-test 이런 네이밍은 협업할 때 누가 봐도 어떤 작업인지 쉽게 알 수 있어서 유용하죠.\n🧪 참고: Conventional Commits 스타일 # 비슷한 개념으로 Conventional Commits 표준도 있어요:\nfeat: 새로운 기능 추가 (feature) fix: 버그 수정 (bugfix) docs: 문서 변경 style: 코드 포맷 변경, 세미콜론 추가 등 실행 로직 변경 없음 refactor: 리팩토링 perf: 성능 개선 test: 테스트 코드 추가/수정 build, ci, chore 등등 ✅ 요약 # 질문 답변 Git에서 기본 제공하는 feature 브랜치는 몇 가지인가요? Git은 기본 제공 브랜치 타입이 없으며, 브랜치 이름은 사용자가 직접 정합니다. 보통 어떤 브랜치 종류가 있나요? main, develop, feature/..., bugfix/..., hotfix/..., release/... 등이 많이 사용됩니다. feature 브랜치는 몇 개까지 만들 수 있나요? 필요에 따라 무제한으로 만들 수 있습니다. 하나의 기능당 하나의 feature 브랜치를 만드는 것이 일반적이에요. "},{"id":90,"href":"/docs/book/sqlite/%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95/","title":"사용 방법","section":"Docs","content":" 초기 설정 # 설치 # brew install sqlite3 실행 # sqlite3 mydb.db SQLite Shell 명령어 # .tables # .tables person .schema # .schema person .exit # .exit .backup # .backup main b_mydb.db SQL # DDL (Data Definition Language: 데이터 정의 언어) # TABLE # CREATE TABLE # CREATE TABLE person ( id INTEGER NOT NULL, name TEXT NOT NULL, age INTEGER, PRIMARY KEY (id AUTOINCREMENT) ); ALTER TABLE # ALTER TABLE person ADD COLUMN salary INTEGER NOT NULL; DROP TABLE # DROP TABLE person; VIEW # CREATE VIEW # CREATE VIEW name_person AS SELECT name FROM person; DROP VIEW # INDEX # 인덱스는 데이터를 빠르게 찾도록 도와주는 목차 같은 구조입니다. 인덱스로 검색하면 전체 데이터를 다 보지 않고 원하는 데이터를 바로 찾아가기 때문에 훨씬 빠릅니다. 단, 인덱스는 검색은 빠르게 하지만 삽입/갱신 시 성능에 약간의 영향을 줄 수 있으니 꼭 필요한 컬럼에만 사용하는 게 좋아요. CREATE INDEX # CREATE INDEX index_person ON person(name); DROP INDEX # DML (Data Manipulation Language: 데이터 조작 언어) # SELECT # SELECT * FROM person; INSERT INTO # INSERT INTO person (name, age) VALUES (\u0026#39;사원1\u0026#39;, 28); UPDATE # UPDATE person SET name = \u0026#39;사원2\u0026#39; WHERE name = \u0026#39;사원1\u0026#39;; DELETE # DELETE FROM person; WHERE # SELECT * FROM person WHERE name = \u0026#39;사원1\u0026#39;; SELECT * FROM person WHERE name IS NOT NULL; ORDER BY # SELECT * FROM person ORDER BY age; DESK # SELECT * FROM person ORDER BY age DESC; LIKE # SELECT * FROM person WHERE name LIKE \u0026#39;사원%\u0026#39; AS # SELECT id AS \u0026#39;사원 번호\u0026#39;, name AS \u0026#39;사원 이름\u0026#39;, FROM person; -- | 사원 번호 | 사원 이름 | -- | 1 | 사원1 | -- | 2 | 사원2 | SELECT id \u0026#39;사원 번호\u0026#39;, name \u0026#39;사원 이름\u0026#39;, FROM person; CASE # SELECT name, salary, CASE WHEN salary \u0026lt; 3000000 THEN \u0026#39;신입\u0026#39; WHEN salary \u0026gt;= 3000000 AND salary \u0026lt; 4000000 THEN \u0026#39;사원\u0026#39; WHEN salary \u0026gt;= 4000000 AND salary \u0026lt; 5000000 THEN \u0026#39;대리\u0026#39; WHEN salary \u0026gt;= 5000000 AND salary \u0026lt; 7000000 THEN \u0026#39;과장\u0026#39; ELSE \u0026#39;임원\u0026#39; END AS position FROM person; round() # SELECT round(12.34567, 2) -- 12.34 substr() # SELECT substr(\u0026#39;abcdefg\u0026#39;, 2); -- bcdefg SELECT substr(\u0026#39;abcdefg\u0026#39;, 3, 4); -- cdef strftime() # SELECT strftime(\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;, \u0026#39;now\u0026#39;, \u0026#39;localtime\u0026#39;); 기타 # PRAGMA # PRAGMA table_info(person); EXPLAIN QUERY PLAN # -- 이렇게 입력하면 SQLite가 어떻게 검색할지를 알려줘요. EXPLAIN QUERY PLAN SELECT * FROM person WHERE name = \u0026#39;사원1\u0026#39;; "},{"id":91,"href":"/docs/book/terminal/tmux/%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95/","title":"사용 방법","section":"Docs","content":"ctrl + b # 기본 명령어 # 생성 tmux # tmux 시작 ctrl + b c # 새로운 패널 생성 ctrl + b % # 창 가로 분할 ctrl + b \u0026#34; # 창 세로 분할 # 변경 ctrl + b $ # 세션 이름 변경 ctrl + b , # 창 이름 변경 ctrl + b (방향키) # 창 위치 변경 # 보기 ctrl + b s # 전체 세션 목록 ctrl + b w # 전체 창 목록 # 끄기 tmux kill-session -t 0 # 0번 세션 종료 ctrl + d # 패널, 세션 닫기 ctrl + b \u0026amp; # 창 닫기 "},{"id":92,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/sql/prisma/%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95/","title":"사용 방법","section":"Docs","content":"npx prisma migrate dev "},{"id":93,"href":"/docs/book/terminal/lazygit/%EC%82%AC%EC%9A%A9%EB%B2%95/","title":"사용법","section":"Docs","content":"\u0026lt;space\u0026gt; # Add s # Stash a # Stash all c # Commit P # Push p # Pull f # Fetch D # Reset R # Rename branch "},{"id":94,"href":"/docs/book/terminal/neovim/%EC%82%AC%EC%9A%A9%EB%B2%95/","title":"사용법","section":"Docs","content":"shift + v # 블럭 지정 \u0026#39;\u0026lt;,\u0026#39;\u0026gt;norm i# # 주석 처리 \u0026#39;\u0026lt;,\u0026#39;\u0026gt;norm 1x # 주석 삭제 :sp # 가로로 창 분할 :vs # 세로로 창 분할 :close # 창 닫기 :term # 터미널 창 열기 :vimgrep "},{"id":95,"href":"/docs/book/terminal/vim/%EC%82%AC%EC%9A%A9%EB%B2%95/","title":"사용법","section":"Docs","content":"맨 위로 이동: gg 맨 아래로 이동: G\n한 줄 삭제: dd\n아래로 한 줄 띄우기: o 위로 한 줄 띄우기: O\n한 줄 복사: yy, Y\n붙여넣기: p\n편집취소: u 다시 실행: ctrl + r\n전체복사:\n:%y "},{"id":96,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/cc++/xmake/%EC%82%AC%EC%9A%A9%EB%B2%95/","title":"사용법","section":"Docs","content":" 🚀 XMake: Rust의 Cargo 같은 C 빌드 시스템 사용법 # XMake는 C, C++ 프로젝트에서 Cargo처럼 간편한 빌드 + 실행 + 패키지 관리를 제공합니다.\nRust에서 cargo build, cargo run을 쓰듯이, XMake에서는 xmake, xmake run을 사용할 수 있습니다.\n1️⃣ XMake 설치 # 📌 Linux/macOS\ncurl -fsSL https://xmake.io/shget.text | bash 📌 Windows\nPowerShell에서 실행:\niwr -useb https://xmake.io/psget.text | iex 📌 또는 패키지 매니저 사용\nmacOS: brew install xmake Linux: sudo apt install xmake (Ubuntu), sudo pacman -S xmake (Arch) Windows: scoop install xmake 또는 choco install xmake 설치 확인:\nxmake --version 2️⃣ 새로운 프로젝트 생성 # 📌 C 프로젝트 생성\nxmake create -l c myproject cd myproject 📌 C++ 프로젝트 생성\nxmake create -l c++ myproject cd myproject 3️⃣ 프로젝트 구조 # 생성된 프로젝트 폴더는 아래처럼 구성됩니다.\nmyproject/ ├── src/ │ ├── main.c # 메인 코드 ├── xmake.lua # 빌드 설정 파일 (Cargo.toml 같은 역할) 👉 xmake.lua 파일이 Cargo.toml 같은 역할을 합니다.\n4️⃣ 빌드 \u0026amp; 실행 # 📌 프로젝트 빌드\nxmake 📌 프로그램 실행\nxmake run 📌 디버그 빌드\nxmake f -m debug # Debug 모드 설정 xmake # 다시 빌드 xmake run # 실행 📌 릴리즈 빌드\nxmake f -m release # Release 모드 설정 xmake # 빌드 5️⃣ 코드 수정 (xmake.lua 설정) # 기본적으로 xmake.lua는 다음과 같이 생성됩니다.\nadd_rules(\u0026#34;mode.debug\u0026#34;, \u0026#34;mode.release\u0026#34;) target(\u0026#34;myproject\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) add_files(\u0026#34;src/*.c\u0026#34;) add_rules(\u0026quot;mode.debug\u0026quot;, \u0026quot;mode.release\u0026quot;) → 디버그 \u0026amp; 릴리즈 모드 지원 target(\u0026quot;myproject\u0026quot;) → 실행 파일 이름 set_kind(\u0026quot;binary\u0026quot;) → 실행 가능한 프로그램으로 빌드 add_files(\u0026quot;src/*.c\u0026quot;) → src/ 폴더 안의 .c 파일을 포함 📌 C++ 프로젝트로 변경하려면?\ntarget(\u0026#34;myproject\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) set_languages(\u0026#34;c++17\u0026#34;) -- C++17 설정 add_files(\u0026#34;src/*.cpp\u0026#34;) 6️⃣ 패키지(라이브러리) 관리 # Rust의 Cargo처럼 라이브러리를 쉽게 추가할 수 있습니다.\n📌 예제: OpenSSL 추가\nadd_requires(\u0026#34;openssl\u0026#34;) target(\u0026#34;myproject\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) add_files(\u0026#34;src/*.c\u0026#34;) add_packages(\u0026#34;openssl\u0026#34;) 📌 패키지 설치\nxmake require --info openssl 📌 패키지 목록 검색\nxmake repo --search zlib 7️⃣ 디버깅 # 📌 GDB/Lldb 디버깅\nxmake run -d 📌 VScode와 연동\nxmake project -k vsxmake 📌 CMake 프로젝트 변환\nxmake project -k cmake 🎯 XMake 사용 요약 # 기능 명령어 프로젝트 생성 xmake create -l c myproject 빌드 xmake 실행 xmake run 디버그 실행 xmake run -d 릴리즈 빌드 xmake f -m release \u0026amp;\u0026amp; xmake CMake 프로젝트로 변환 xmake project -k cmake VSCode 프로젝트로 변환 xmake project -k vsxmake 패키지 설치 xmake require --info \u0026lt;package\u0026gt; 🚀 결론: Cargo 같은 XMake! # ✔ 단순한 명령어 (xmake, xmake run)\n✔ C/C++ 패키지 관리 (add_requires(\u0026quot;openssl\u0026quot;))\n✔ 디버깅 (xmake run -d) \u0026amp; 크로스 플랫폼 지원\n👉 Rust의 Cargo처럼 쉽게 C 프로젝트를 관리하려면 XMake가 최고의 선택!\n필요한 추가 설정이 있으면 알려주세요! 😊\n"},{"id":97,"href":"/docs/book/docker/%EC%82%AD%EC%A0%9C/","title":"삭제","section":"Docs","content":"# 실행 중인 컨테이너 일괄 정지 docker stop $(docker ps -aq) # 모든 컨테이너 삭제 (실행 중이던 정지된 것 모두) docker rm -f $(docker ps -aq) # 모든 도커 이미지 삭제 docker rmi -f $(docker images -q) # 사용하지 않는 네트워크, 캐시, 볼륨 등 전체 정리 docker system prune -a --volumes docker stop $(docker ps -aq) docker rm -f $(docker ps -aq) docker rmi -f $(docker images -aq) docker volume rm -f $(docker volume ls -q) docker network rm $(docker network ls -q) docker system prune -af --volumes "},{"id":98,"href":"/docs/book/uiux/%EC%83%89%EC%83%81/","title":"색상","section":"Docs","content":"\n"},{"id":99,"href":"/docs/book/terminal/tmux/%EC%84%A4%EC%A0%95/","title":"설정","section":"Docs","content":"tmux.conf\n# ~/.config/tmux/.tmux.conf set-option -sa terminal-overrides \u0026#34;,xterm*:Tc\u0026#34; set -g mouse on unbind-key -T root MouseDrag1Border # 창 크기 조절 off set -g base-index 1 set -g pane-base-index 1 set-window-option -g pane-base-index 1 set-option -g renumber-windows on # plugins set -g @plugin \u0026#39;tmux-plugins/tp\u0026#39; set -g @plugin \u0026#39;tmux-plugins/tmux-sensible\u0026#39; set -g @plugin \u0026#39;catppuccin/tmux\u0026#39; set -g @plugin \u0026#39;christoomey/vim-tmux-navigator\u0026#39; set -g @plugin \u0026#39;tmux-plugins/tmux-yank\u0026#39; run \u0026#39;~/.tmux/plugins/tpm/tpm\u0026#39; # 바인딩 키 변경 unbind C-a set-option -g prefix C-Space bind C-Space send-prefix # 패널 분할 방향 변경 bind | split-window -h bind - split-window -v # 현재 위치 유지 bind c new-window -c \u0026#34;#{pane_current_path}\u0026#34; # 윈도우 이동 설정 bind-key -r Right select-window -n # prefix + 오른쪽 방향키: 다음 윈도우로 이동 bind-key -r Left select-window -p # prefix + 왼쪽 방향키: 이전 윈도우로 이동 설정 방법\ntmux source-file ~/.config/tmux/tmux.conf "},{"id":100,"href":"/docs/book/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/linux/ubuntu/server/%EC%84%A4%EC%A0%95/","title":"설정","section":"Docs","content":"# /etc/apt/sources.list.d/ubuntu-sources server-1\n# /etc/netplan/50-cloud-init.yaml network: version: 2 ethernets: enp0s1: dhcp: no addresses: [192.168.0.100/24] router: - to: default via: 192.168.0.1 nameservers: addresses: [192.168.0.1] server-2\n# /etc/netplan/50-cloud-init.yaml network: version: 2 ethernets: enp0s1: dhcp: no addresses: [192.168.0.200/24] routes: - to: default via: 192.168.0.1 nameservers: addresses: [192.168.0.1] client\n"},{"id":101,"href":"/docs/book/%ED%8C%A8%ED%82%A4%EC%A7%80-%EA%B4%80%EB%A6%AC%EC%9E%90/choco/%EC%84%A4%EC%B9%98/","title":"설정","section":"Docs","content":"# Powershell Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) "},{"id":102,"href":"/docs/book/text-editor/zed/%EC%84%A4%EC%B9%98/","title":"설치","section":"Docs","content":"# 설치 https://scoop.sh/#/apps?q=zed-nightly # 업데이트 scoop update zed-nightly "},{"id":103,"href":"/docs/book/web/nextjs/%EC%84%A4%EC%B9%98/","title":"설치","section":"Docs","content":"sudo npm install next react react-dom "},{"id":104,"href":"/docs/book/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/windows/windwos-11/%EC%84%A4%EC%B9%98-%EC%A4%91-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%97%B0%EA%B2%B0-%EB%AC%B8%EC%A0%9C/","title":"설치 중 네트워크 연결 문제","section":"Docs","content":"shift + f10 oobe₩bypassnro "},{"id":105,"href":"/docs/book/web/nextjs/%EC%8B%9C%EC%9E%91/","title":"시작","section":"Docs","content":"npx create-next-app@latest # 오류가 날때 sudo chown -R 501:20 \u0026#34;/Users/choidaruhan/.npm\u0026#34; # 또는 npm cache clean --force # 추가 설치 npm install next react react-dom npm run dev # 개발 모드 npm run build npm run start "},{"id":106,"href":"/docs/book/terminal/yabai/%EC%8B%A4%ED%96%89/","title":"실행","section":"Docs","content":"yabai --start-service yabai --restart-service "},{"id":107,"href":"/docs/book/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/","title":"알고리즘","section":"Docs","content":"분할정복\n"},{"id":108,"href":"/docs/book/text-editor/helix/%EC%96%B8%EC%96%B4-%EC%84%A4%EC%A0%95/","title":"언어 설정","section":"Docs","content":" Go # brew install gopls # Go [language-server.gopls] command = \u0026#34;gopls\u0026#34; args = [\u0026#34;serve\u0026#34;] [[language]] name = \u0026#34;go\u0026#34; scope = \u0026#34;source.go\u0026#34; file-types = [\u0026#34;go\u0026#34;] language-servers = [\u0026#34;gopls\u0026#34;] formatter = { command = \u0026#34;goimports\u0026#34; } auto-format = true Rust # brew install llvm echo \u0026#39;export PATH=\u0026#34;$(brew --prefix llvm)/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc source ~/.zshrc # ~/.config/helix/languages.toml # Rust [[language]] name = \u0026#34;rust\u0026#34; scope = \u0026#34;source.rust\u0026#34; file-types = [\u0026#34;rs\u0026#34;] language-servers = [\u0026#34;rust-analyzer\u0026#34;] formatter = { command = \u0026#34;rustfmt\u0026#34; } auto-format = true "},{"id":109,"href":"/docs/book/markdown/%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%84%A3%EB%8A%94%EB%B2%95/","title":"이미지 넣는법","section":"Docs","content":"![bears](http://placebear.com/200/200) 결과\n"},{"id":110,"href":"/docs/book/%EC%9E%90%EA%B2%A9%EC%A6%9D/%EC%9E%90%EA%B2%A9%EC%A6%9D-%EB%AA%A9%EB%A1%9D/","title":"자격증 목록","section":"Docs","content":"** 추천 ** 정보처리기사 SQLD OCJP 리눅스마스터 2급 PC정비사 2급\n국내 IT 자격증 정리표\n분야 자격증명 설명 주요 학습 내용 학습 방법 실무 활용성 소프트웨어 개발 정보처리기사 IT 전반의 기본 개념과 실무 능력을 평가 데이터베이스, 네트워크, 알고리즘, 소프트웨어 공학 기출 문제 풀이, 개념 정리, 실습 프로젝트 SI 개발자 필수, IT 기업 취업 시 우대 소프트웨어 개발 정보처리산업기사 정보처리기사보다 난이도가 낮고 실무 중심 프로그래밍, 데이터베이스, 시스템 분석 기출 문제 풀이, 실무 프로젝트 진행 중소기업 IT 개발자, 공공기관 취업 시 가산점 데이터베이스 SQLD (SQL Developer) SQL 기본 개념 및 데이터 분석 능력을 검증 SQL 기본 문법, 조인, 인덱스, 서브쿼리 SQL 문제 풀이, 데이터베이스 실습 데이터 분석, 백엔드 개발, DB 최적화 데이터베이스 SQLP (SQL Professional) SQLD보다 심화된 DB 설계 및 최적화 과정 대용량 데이터 처리, 실행 계획 분석, 튜닝 기법 SQL 최적화 연습, 인덱스 및 성능 튜닝 학습 데이터베이스 관리자(DBA), 데이터 엔지니어 데이터 분석 빅데이터분석기사 빅데이터 처리 및 분석 능력을 검증 데이터 수집, 정제, 분석, 시각화 기법 데이터 분석 프로젝트 진행, Python 및 R 활용 데이터 사이언스, 머신러닝, AI 데이터 분석 ADsP (데이터분석 준전문가) 데이터 분석 기초 개념 및 활용 능력 평가 데이터 통계, 분석 기법, 머신러닝 개요 기출 문제 풀이, Python 데이터 분석 실습 데이터 분석 입문, 마케팅, 기획 데이터 분석 ADP (데이터분석 전문가) ADsP 상위 단계, 빅데이터 및 고급 분석 기법 통계, 머신러닝, 데이터 마이닝, 딥러닝 Python, R 활용 프로젝트, 알고리즘 연습 데이터 사이언스, 금융권, 연구소 네트워크 네트워크관리사 2급 네트워크 기초 개념 및 실무 적용 능력 평가 TCP/IP, 라우팅, 방화벽 설정, 무선 네트워크 Packet Tracer 실습, 네트워크 구축 연습 네트워크 관리자, 보안 엔지니어 네트워크 네트워크관리사 1급 네트워크관리사 2급 상위 자격증, 고급 네트워크 기술 평가 고급 라우팅, 네트워크 보안, 트래픽 관리 실무 네트워크 환경 구성, 보안 테스트 실습 IT 인프라 관리자, 네트워크 엔지니어 보안 정보보안기사 국내 보안 전문가 인증 자격증 네트워크 보안, 암호화, 해킹 및 방어 기법 보안 이론 학습, 모의 해킹 실습 보안 엔지니어, 침해 대응 전문가 보안 정보보안산업기사 정보보안기사보다 낮은 난이도, 실무 중심 보안 위협 분석, 시스템 보안, 네트워크 보안 보안 실습, 기본 해킹 및 대응 기법 학습 보안 관련 기업 취업, 보안 운영 관리 운영체제 리눅스마스터 2급 리눅스 운영체제 기초 및 시스템 관리 리눅스 명령어, 파일 시스템, 사용자 관리 가상 환경에서 리눅스 실습, 기출 문제 풀이 서버 관리자, 시스템 엔지니어 운영체제 리눅스마스터 1급 리눅스 서버 운영 및 보안 관리 네트워크 설정, 서버 구축, 방화벽 설정 리눅스 서버 구축 실습, 네트워크 관리 학습 리눅스 기반 시스템 관리자, 클라우드 엔지니어 국제 IT 자격증 정리표\n분야 자격증명 설명 주요 학습 내용 학습 방법 실무 활용성 프로그래밍 OCJP (Oracle Certified Java Programmer) Java 프로그래밍 능력 검증 Java 문법, 객체지향 개념, 예외처리 Java 코딩 실습, 알고리즘 문제 풀이 Java 개발자, 웹/모바일 개발 클라우드 AWS Certified Solutions Architect AWS 클라우드 설계 및 운영 인증 AWS 서비스, 클라우드 보안, 비용 최적화 AWS 실습 계정 활용, 아키텍처 설계 연습 클라우드 엔지니어, DevOps 클라우드 Azure Fundamentals Microsoft Azure의 기초 개념 검증 클라우드 컴퓨팅 개념, Azure 핵심 서비스 Azure 무료 계정 활용, 실습 진행 기업의 Azure 도입 및 운영 데이터베이스 OCP (Oracle Certified Professional) Oracle 데이터베이스 관리 능력 인증 DB 설치, 성능 튜닝, 백업 및 복구 Oracle DB 실습, SQL 최적화 연습 데이터베이스 관리자(DBA) 보안 CISSP (Certified Information Systems Security Professional) 글로벌 보안 전문가 자격증 보안 아키텍처, 보안 정책, 리스크 관리 보안 관련 사례 연구, 실습 기업 정보보안 정책 수립, IT 감사 보안 CEH (Certified Ethical Hacker) 윤리적 해킹 및 보안 테스트 기술 인증 침투 테스트, 네트워크 해킹, 시스템 방어 기법 모의 해킹 실습, 보안 취약점 분석 보안 엔지니어, 침해 대응 전문가 네트워크 CCNA (Cisco Certified Network Associate) 네트워크 기본 개념과 장비 설정 능력 인증 TCP/IP, 라우팅, 스위칭, 방화벽 설정 네트워크 실습 (Packet Tracer), 기출 문제 풀이 기업 네트워크 설계 및 운영 DevOps Docker Certified Associate Docker 컨테이너 기술 검증 컨테이너 개념, 이미지 관리, 네트워크 설정 Docker 실습, Kubernetes 연동 학습 DevOps 환경 구축, CI/CD 자동화 DevOps CKA (Certified Kubernetes Administrator) Kubernetes 클러스터 운영 인증 클러스터 관리, 서비스 배포, 모니터링 Kubernetes 실습, Helm, CI/CD 학습 컨테이너 기반 애플리케이션 운영 참고: https://velog.io/@donghyuk65/%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EC%B7%A8%EB%93%9D-%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EC%9E%90%EA%B2%A9%EC%A6%9D\n"},{"id":111,"href":"/docs/book/%EC%9B%90%EA%B2%A9-%EC%A0%80%EC%9E%A5%EC%86%8C/aws/%EC%A0%80%EC%9E%A5-%EA%B3%B5%EA%B0%84-%EB%8A%98%EB%A6%AC%EA%B8%B0/","title":"저장 공간 늘리기","section":"Docs","content":"출처 : https://velog.io/@hyeonseop/ec2-%EC%9A%A9%EB%9F%89-full%EC%9D%BC-%EB%95%8C-%EB%8C%80%EC%B2%98%EB%B2%95\n출처 : https://velog.io/@tjddus0302/EC2-%EC%9A%A9%EB%9F%89%EC%9D%B4-%EB%B6%80%EC%A1%B1%ED%95%A0-%EB%95%8C-%EC%9A%A9%EB%9F%89-%ED%99%95%EB%B3%B4%ED%95%98%EA%B8%B0\n"},{"id":112,"href":"/docs/book/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/linux/ubuntu/%EC%A0%80%EC%9E%A5-%EA%B3%B5%EA%B0%84-%ED%99%95%EC%9D%B8/","title":"저장 공간 확인","section":"Docs","content":"df -h "},{"id":113,"href":"/docs/book/git/%EC%A0%95%EB%B3%B4-%EC%A0%80%EC%9E%A5/","title":"정보 저장","section":"Docs","content":"git config --global user.name 이름 git config --global user.email 이메일 git config credential.helper store "},{"id":114,"href":"/docs/book/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4/css/%EC%B4%88%EA%B8%B0-%EC%84%B8%ED%8C%85/","title":"초기 세팅","section":"Docs","content":"*, *::before, *::after { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: \u0026#39;Apple SD Gothic Neo\u0026#39;, \u0026#39;Noto Sans KR\u0026#39;, sans-serif; } button { background: none; color: inherit; border: none; cursor: pointer; outline: inherit; } a { color: inherit; text-decoration: none; } li { list-style: none; } input:focus { outline: none; } "},{"id":115,"href":"/docs/book/git/%EC%B5%9C%EC%8B%A0-%EC%BB%A4%EB%B0%8B-%EC%A0%9C%EA%B1%B0/","title":"최신 커밋 제거","section":"Docs","content":"git reset --mixed HEAD^ // 1개의 이력 삭제 git reset --mixed HEAD~5 // 5개의 이력 삭제 "},{"id":116,"href":"/docs/book/git/%EC%B5%9C%EC%8B%A0%EC%82%AC%ED%95%AD-pull-%ED%95%98%EA%B8%B0/","title":"최신사항 pull 하기","section":"Docs","content":"# 덮어 쓰기 git reset --hard HEAD git pull origin main "},{"id":117,"href":"/docs/book/git/%EC%BB%A4%EB%B0%8B-%EC%B4%88%EA%B8%B0-%EC%83%81%ED%83%9C%EB%A1%9C-%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0/","title":"커밋 초기 상태로 되돌리기","section":"Docs","content":"git reset --hard origin/main "},{"id":118,"href":"/docs/book/git/%EC%BB%A4%EB%B0%8B-%EC%B7%A8%EC%86%8C/","title":"커밋 취소","section":"Docs","content":" 구글이 사용하는 커밋 메세지 # feature fixed changed notice removed libraries\n나의 커밋 메세지 # create - 생성 update - 수정 remove - 삭제 inprogress - 진행중\n"},{"id":119,"href":"/docs/book/uiux/%ED%85%8C%EB%91%90%EB%A6%AC/","title":"테두리","section":"Docs","content":"둘레 - 간격 / 2 = 안쪽 둘레\n"},{"id":120,"href":"/docs/book/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/linux/ubuntu/%ED%95%9C%EA%B8%80-%EA%B9%A8%EC%A7%90-%EB%AC%B8%EC%A0%9C/","title":"한글 깨짐 문제","section":"Docs","content":"# language-pack-ko 패키지 설치 apt-get install language-pack-ko # 로케일 설치 locale-gen ko_KR.UTF-8 # 패키지 재설정 dpkg-reconfigure locales # ko_KR.UTF-8 UTF-8 찾아 번호 입력 # (290 또는 299) # ko_KR.UTF-8 이 써져 있는 번호 입력 # 환경변수 export LANGUAGE=ko_KR.UTF-8 export LANG=ko_KR.UTF-8 # 적용 locale # .bashrc 에 추가해 자동 실행 적용 nano ~/.bashrc export LANGUAGE=ko_KR.UTF-8 export LANG=ko_KR.UTF-8 source ~/.bashrc "}]